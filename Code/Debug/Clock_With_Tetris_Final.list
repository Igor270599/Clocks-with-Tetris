
Clock_With_Tetris_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e074  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800e188  0800e188  0000f188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4e8  0800e4e8  00010110  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4e8  0800e4e8  00010110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4e8  0800e4e8  00010110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4e8  0800e4e8  0000f4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4ec  0800e4ec  0000f4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800e4f0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000110  0800e600  00010110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800e600  000105ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001643f  00000000  00000000  00010139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3f  00000000  00000000  00026578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed1  00000000  00000000  0002b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b10c  00000000  00000000  0002c2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c508  00000000  00000000  000473cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e18  00000000  00000000  000638d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f46ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  000f4730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000fa18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e16c 	.word	0x0800e16c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	0800e16c 	.word	0x0800e16c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c96:	2afd      	cmp	r2, #253	@ 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	@ 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	@ 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <AppInit>:
MP3_Player_t MP3_Player;
Joestick_t Joestick;
Light_Sensor_t Light_Sensor;

void AppInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ee8:	2024      	movs	r0, #36	@ 0x24
 8000eea:	f007 ffe0 	bl	8008eae <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eee:	2025      	movs	r0, #37	@ 0x25
 8000ef0:	f007 ffdd 	bl	8008eae <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ef4:	2012      	movs	r0, #18
 8000ef6:	f007 ffda 	bl	8008eae <HAL_NVIC_EnableIRQ>
	/*
	HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
	HAL_ADC_Start_IT(&hadc);
	*/
	Application.mode=CLOCK;
 8000efa:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <AppInit+0xfc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
	Application.rotation=ROTATION_90_DEGREES;
 8000f00:	4b37      	ldr	r3, [pc, #220]	@ (8000fe0 <AppInit+0xfc>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	711a      	strb	r2, [r3, #4]
	Application.clockDefinition.clock_style=BIG_FOUR_DIGITS;
 8000f06:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <AppInit+0xfc>)
 8000f08:	2203      	movs	r2, #3
 8000f0a:	721a      	strb	r2, [r3, #8]
	Application.clockDefinition.font_style=NEOCLASSIC;
 8000f0c:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <AppInit+0xfc>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	725a      	strb	r2, [r3, #9]
	Application.clockDefinition.hours=20;
 8000f12:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <AppInit+0xfc>)
 8000f14:	2214      	movs	r2, #20
 8000f16:	715a      	strb	r2, [r3, #5]
	Application.clockDefinition.minutes=3;
 8000f18:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <AppInit+0xfc>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	719a      	strb	r2, [r3, #6]
	Application.clockDefinition.seconds=13;
 8000f1e:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <AppInit+0xfc>)
 8000f20:	220d      	movs	r2, #13
 8000f22:	71da      	strb	r2, [r3, #7]
	Application.clockDefinition.isBorderEnabled=true;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <AppInit+0xfc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	729a      	strb	r2, [r3, #10]
	Application.clockDefinition.isDotsBlinked=true;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <AppInit+0xfc>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	72da      	strb	r2, [r3, #11]
	Application.volume=4;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <AppInit+0xfc>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	Application.mp3_PlayerDefinition.animationVariant=FALLING_DOTS;
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <AppInit+0xfc>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	Application.intensivity=0;
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <AppInit+0xfc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	Application.isAutoBrightnessEnabled=true;
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <AppInit+0xfc>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	Application.rouserDefinition.hours=20;
 8000f50:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <AppInit+0xfc>)
 8000f52:	2214      	movs	r2, #20
 8000f54:	761a      	strb	r2, [r3, #24]
	Application.rouserDefinition.minutes=25;
 8000f56:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <AppInit+0xfc>)
 8000f58:	2219      	movs	r2, #25
 8000f5a:	765a      	strb	r2, [r3, #25]
	Application.tetrisDefinition.isSoundEnabled=true;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <AppInit+0xfc>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Application.tetrisDefinition.Startspeed=3;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <AppInit+0xfc>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	HAL_Delay(500);
 8000f6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f70:	f007 fa7e 	bl	8008470 <HAL_Delay>
	while (MPU6050_Init(&hi2c1) == 1);
 8000f74:	bf00      	nop
 8000f76:	481b      	ldr	r0, [pc, #108]	@ (8000fe4 <AppInit+0x100>)
 8000f78:	f005 fcac 	bl	80068d4 <MPU6050_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <AppInit+0x92>
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f82:	4919      	ldr	r1, [pc, #100]	@ (8000fe8 <AppInit+0x104>)
 8000f84:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <AppInit+0x100>)
 8000f86:	f005 fcff 	bl	8006988 <MPU6050_Read_All>
	DS3231_Init(&hi2c1);
 8000f8a:	4816      	ldr	r0, [pc, #88]	@ (8000fe4 <AppInit+0x100>)
 8000f8c:	f006 f85c 	bl	8007048 <DS3231_Init>
	DS3231_Collect_data(&RTC_data);
 8000f90:	4816      	ldr	r0, [pc, #88]	@ (8000fec <AppInit+0x108>)
 8000f92:	f006 f826 	bl	8006fe2 <DS3231_Collect_data>
	InitMax7219(8);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f004 fe8e 	bl	8005cb8 <InitMax7219>
	SetIntensivity(Application.intensivity);
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <AppInit+0xfc>)
 8000f9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f968 	bl	8006278 <SetIntensivity>
	UpdateMax7219();
 8000fa8:	f004 ffc4 	bl	8005f34 <UpdateMax7219>
	HAL_ADC_Start_IT(&hadc1);
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <AppInit+0x10c>)
 8000fae:	f007 fb5b 	bl	8008668 <HAL_ADC_Start_IT>
	MP3_Reset();
 8000fb2:	f005 fc07 	bl	80067c4 <MP3_Reset>
	MP3_SetVolume(Application.volume);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <AppInit+0xfc>)
 8000fb8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fafb 	bl	80065b8 <MP3_SetVolume>
	HAL_Delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc6:	f007 fa53 	bl	8008470 <HAL_Delay>
	MP3_Stop();
 8000fca:	f005 fbbd 	bl	8006748 <MP3_Stop>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET );
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd4:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <AppInit+0x110>)
 8000fd6:	f008 f9d2 	bl	800937e <HAL_GPIO_WritePin>
	//StartGame();
	//DS3231_SetFullTime(13, 35, 0);
	//DS3231_SetFullDate(16, 11, 6, 2024);
	while(1)
	{
		AppTask();
 8000fda:	f000 f80d 	bl	8000ff8 <AppTask>
 8000fde:	e7fc      	b.n	8000fda <AppInit+0xf6>
 8000fe0:	20000138 	.word	0x20000138
 8000fe4:	200002f8 	.word	0x200002f8
 8000fe8:	200001b0 	.word	0x200001b0
 8000fec:	200001a0 	.word	0x200001a0
 8000ff0:	200002c8 	.word	0x200002c8
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <AppTask>:
	}
}

void AppTask(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
static uint8_t	prevTick=0;
static uint8_t	prevIntensivity=0;
static uint8_t	prevVolume=0;
bool keyResetFlag=true;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]

	if(prevTick!=Get_Timer_1_ms())
 8001002:	4bad      	ldr	r3, [pc, #692]	@ (80012b8 <AppTask+0x2c0>)
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4bad      	ldr	r3, [pc, #692]	@ (80012bc <AppTask+0x2c4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	f000 82fe 	beq.w	800160c <AppTask+0x614>
	{
//---------------------------------------------------------------------------- 1 ms
		prevTick=Get_Timer_1_ms();
 8001010:	4ba9      	ldr	r3, [pc, #676]	@ (80012b8 <AppTask+0x2c0>)
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	4ba9      	ldr	r3, [pc, #676]	@ (80012bc <AppTask+0x2c4>)
 8001016:	701a      	strb	r2, [r3, #0]

//---------------------------------------------------------------------------- 1 ms
		if(Get_Timer_1_ms()>=10)
 8001018:	4ba7      	ldr	r3, [pc, #668]	@ (80012b8 <AppTask+0x2c0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b09      	cmp	r3, #9
 800101e:	f240 82f5 	bls.w	800160c <AppTask+0x614>
		{
//---------------------------------------------------------------------------- 10 ms
			Timers.Timer_10_ms++;
 8001022:	4ba5      	ldr	r3, [pc, #660]	@ (80012b8 <AppTask+0x2c0>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4ba3      	ldr	r3, [pc, #652]	@ (80012b8 <AppTask+0x2c0>)
 800102c:	705a      	strb	r2, [r3, #1]
			Timers.Timer_1_ms=0;
 800102e:	4ba2      	ldr	r3, [pc, #648]	@ (80012b8 <AppTask+0x2c0>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
			ButtonsTask();
 8001034:	f001 f9a8 	bl	8002388 <ButtonsTask>
//---------------------------------------------------------------------------- 10 ms
			if(Get_Timer_10_ms()==10)
 8001038:	4b9f      	ldr	r3, [pc, #636]	@ (80012b8 <AppTask+0x2c0>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	2b0a      	cmp	r3, #10
 800103e:	f040 82e5 	bne.w	800160c <AppTask+0x614>
			{
//---------------------------------------------------------------------------- 100 ms
				Timers.Timer_100_ms++;
 8001042:	4b9d      	ldr	r3, [pc, #628]	@ (80012b8 <AppTask+0x2c0>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b9b      	ldr	r3, [pc, #620]	@ (80012b8 <AppTask+0x2c0>)
 800104c:	709a      	strb	r2, [r3, #2]
				Timers.Timer_10_ms=0;
 800104e:	4b9a      	ldr	r3, [pc, #616]	@ (80012b8 <AppTask+0x2c0>)
 8001050:	2200      	movs	r2, #0
 8001052:	705a      	strb	r2, [r3, #1]
				LightSensorAverage();
 8001054:	f000 fbb4 	bl	80017c0 <LightSensorAverage>
				CreateImage();
 8001058:	f000 fbfe 	bl	8001858 <CreateImage>
				ProcessJoestick();
 800105c:	f001 fdd8 	bl	8002c10 <ProcessJoestick>
				if((Get_Timer_100_ms()%2)==0)
 8001060:	4b95      	ldr	r3, [pc, #596]	@ (80012b8 <AppTask+0x2c0>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d14e      	bne.n	800110c <AppTask+0x114>
				{
					if(Application.keyCode!=NONE_BUTTON)
 800106e:	4b94      	ldr	r3, [pc, #592]	@ (80012c0 <AppTask+0x2c8>)
 8001070:	78db      	ldrb	r3, [r3, #3]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d04a      	beq.n	800110c <AppTask+0x114>
					{
						switch(Application.keyCode)
 8001076:	4b92      	ldr	r3, [pc, #584]	@ (80012c0 <AppTask+0x2c8>)
 8001078:	78db      	ldrb	r3, [r3, #3]
 800107a:	2bce      	cmp	r3, #206	@ 0xce
 800107c:	dc43      	bgt.n	8001106 <AppTask+0x10e>
 800107e:	2bcb      	cmp	r3, #203	@ 0xcb
 8001080:	da0a      	bge.n	8001098 <AppTask+0xa0>
 8001082:	2bc9      	cmp	r3, #201	@ 0xc9
 8001084:	d002      	beq.n	800108c <AppTask+0x94>
 8001086:	2bca      	cmp	r3, #202	@ 0xca
 8001088:	d003      	beq.n	8001092 <AppTask+0x9a>
										DecreaseVolume();
										Application.additionalFunctionsTimer=5;
									}
								}
							break;
							default:			break;
 800108a:	e03c      	b.n	8001106 <AppTask+0x10e>
							case INCREASE_HOURS_CONTINUOUSLY: 		IncreaseHoursButton(); break;
 800108c:	f000 ff78 	bl	8001f80 <IncreaseHoursButton>
 8001090:	e03c      	b.n	800110c <AppTask+0x114>
							case INCREASE_MINUTES_CONTINUOUSLY: 	IncreaseMinutesButton(); break;
 8001092:	f000 ffa9 	bl	8001fe8 <IncreaseMinutesButton>
 8001096:	e039      	b.n	800110c <AppTask+0x114>
								if(Application.mode!=AADITIONAL_FUNCTIONS)
 8001098:	4b89      	ldr	r3, [pc, #548]	@ (80012c0 <AppTask+0x2c8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b06      	cmp	r3, #6
 800109e:	d001      	beq.n	80010a4 <AppTask+0xac>
									EnterAditionalMode();
 80010a0:	f000 fe8a 	bl	8001db8 <EnterAditionalMode>
								if(Application.addtionalFunctions==SET_BRIGHTNESS)
 80010a4:	4b86      	ldr	r3, [pc, #536]	@ (80012c0 <AppTask+0x2c8>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d113      	bne.n	80010d4 <AppTask+0xdc>
									if(Application.keyCode==INCREASE_BRIGHTNESS_CONTINUOUSLY)
 80010ac:	4b84      	ldr	r3, [pc, #528]	@ (80012c0 <AppTask+0x2c8>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	2bcc      	cmp	r3, #204	@ 0xcc
 80010b2:	d105      	bne.n	80010c0 <AppTask+0xc8>
										IncreaseBrightness();
 80010b4:	f000 fe28 	bl	8001d08 <IncreaseBrightness>
										Application.additionalFunctionsTimer=5;
 80010b8:	4b81      	ldr	r3, [pc, #516]	@ (80012c0 <AppTask+0x2c8>)
 80010ba:	2205      	movs	r2, #5
 80010bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
									if(Application.keyCode==DECREASE_BRIGHTNESS_CONTINUOUSLY)
 80010c0:	4b7f      	ldr	r3, [pc, #508]	@ (80012c0 <AppTask+0x2c8>)
 80010c2:	78db      	ldrb	r3, [r3, #3]
 80010c4:	2bcb      	cmp	r3, #203	@ 0xcb
 80010c6:	d105      	bne.n	80010d4 <AppTask+0xdc>
										DecreaseBrightness();
 80010c8:	f000 fe34 	bl	8001d34 <DecreaseBrightness>
										Application.additionalFunctionsTimer=5;
 80010cc:	4b7c      	ldr	r3, [pc, #496]	@ (80012c0 <AppTask+0x2c8>)
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
								if(Application.addtionalFunctions==SET_VOLUME)
 80010d4:	4b7a      	ldr	r3, [pc, #488]	@ (80012c0 <AppTask+0x2c8>)
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d116      	bne.n	800110a <AppTask+0x112>
									if(Application.keyCode==INCREASE_VOLUME_CONTINUOUSLY)
 80010dc:	4b78      	ldr	r3, [pc, #480]	@ (80012c0 <AppTask+0x2c8>)
 80010de:	78db      	ldrb	r3, [r3, #3]
 80010e0:	2bce      	cmp	r3, #206	@ 0xce
 80010e2:	d105      	bne.n	80010f0 <AppTask+0xf8>
										IncreaseVolume();
 80010e4:	f000 fe3c 	bl	8001d60 <IncreaseVolume>
										Application.additionalFunctionsTimer=5;
 80010e8:	4b75      	ldr	r3, [pc, #468]	@ (80012c0 <AppTask+0x2c8>)
 80010ea:	2205      	movs	r2, #5
 80010ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
									if(Application.keyCode==DECREASE_VOLUME_CONTINUOUSLY)
 80010f0:	4b73      	ldr	r3, [pc, #460]	@ (80012c0 <AppTask+0x2c8>)
 80010f2:	78db      	ldrb	r3, [r3, #3]
 80010f4:	2bcd      	cmp	r3, #205	@ 0xcd
 80010f6:	d108      	bne.n	800110a <AppTask+0x112>
										DecreaseVolume();
 80010f8:	f000 fe48 	bl	8001d8c <DecreaseVolume>
										Application.additionalFunctionsTimer=5;
 80010fc:	4b70      	ldr	r3, [pc, #448]	@ (80012c0 <AppTask+0x2c8>)
 80010fe:	2205      	movs	r2, #5
 8001100:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
							break;
 8001104:	e001      	b.n	800110a <AppTask+0x112>
							default:			break;
 8001106:	bf00      	nop
 8001108:	e000      	b.n	800110c <AppTask+0x114>
							break;
 800110a:	bf00      	nop
						}
					}
				}
//---------------------------------------------------------------------------- 100 ms
				if(Get_Timer_100_ms()==10)
 800110c:	4b6a      	ldr	r3, [pc, #424]	@ (80012b8 <AppTask+0x2c0>)
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	2b0a      	cmp	r3, #10
 8001112:	d116      	bne.n	8001142 <AppTask+0x14a>
				{
					Timers.Timer_1_s++;
 8001114:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <AppTask+0x2c0>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	4a67      	ldr	r2, [pc, #412]	@ (80012b8 <AppTask+0x2c0>)
 800111c:	6053      	str	r3, [r2, #4]
					Timers.blink=!(Timers.blink);
 800111e:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <AppTask+0x2c0>)
 8001120:	7a1b      	ldrb	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf14      	ite	ne
 8001126:	2301      	movne	r3, #1
 8001128:	2300      	moveq	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <AppTask+0x2c0>)
 800113a:	721a      	strb	r2, [r3, #8]
					Timers.Timer_100_ms=0;
 800113c:	4b5e      	ldr	r3, [pc, #376]	@ (80012b8 <AppTask+0x2c0>)
 800113e:	2200      	movs	r2, #0
 8001140:	709a      	strb	r2, [r3, #2]
				}
//---------------------------------------------------------------------------- 1 s
					switch(Get_Timer_100_ms()%10)
 8001142:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <AppTask+0x2c0>)
 8001144:	789a      	ldrb	r2, [r3, #2]
 8001146:	4b5f      	ldr	r3, [pc, #380]	@ (80012c4 <AppTask+0x2cc>)
 8001148:	fba3 1302 	umull	r1, r3, r3, r2
 800114c:	08d9      	lsrs	r1, r3, #3
 800114e:	460b      	mov	r3, r1
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b09      	cmp	r3, #9
 800115c:	f200 8256 	bhi.w	800160c <AppTask+0x614>
 8001160:	a201      	add	r2, pc, #4	@ (adr r2, 8001168 <AppTask+0x170>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	0800156d 	.word	0x0800156d
 800116c:	08001191 	.word	0x08001191
 8001170:	0800156d 	.word	0x0800156d
 8001174:	080013c3 	.word	0x080013c3
 8001178:	0800156d 	.word	0x0800156d
 800117c:	08001411 	.word	0x08001411
 8001180:	0800156d 	.word	0x0800156d
 8001184:	080015ff 	.word	0x080015ff
 8001188:	0800156d 	.word	0x0800156d
 800118c:	080015ff 	.word	0x080015ff
					{
					case	1:

						if((Application.keyCode>CONTINUOUSLY_MARK)||(Application.keyCode==FAST_FALL_BUTTON))
 8001190:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <AppTask+0x2c8>)
 8001192:	78db      	ldrb	r3, [r3, #3]
 8001194:	2bc8      	cmp	r3, #200	@ 0xc8
 8001196:	d803      	bhi.n	80011a0 <AppTask+0x1a8>
 8001198:	4b49      	ldr	r3, [pc, #292]	@ (80012c0 <AppTask+0x2c8>)
 800119a:	78db      	ldrb	r3, [r3, #3]
 800119c:	2b26      	cmp	r3, #38	@ 0x26
 800119e:	d101      	bne.n	80011a4 <AppTask+0x1ac>
						{
							keyResetFlag=false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
						}

						if(Application.keyCode!=NONE_BUTTON)
 80011a4:	4b46      	ldr	r3, [pc, #280]	@ (80012c0 <AppTask+0x2c8>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80f3 	beq.w	8001394 <AppTask+0x39c>
						{
							switch(Application.keyCode)
 80011ae:	4b44      	ldr	r3, [pc, #272]	@ (80012c0 <AppTask+0x2c8>)
 80011b0:	78db      	ldrb	r3, [r3, #3]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	2b29      	cmp	r3, #41	@ 0x29
 80011b6:	f200 80e8 	bhi.w	800138a <AppTask+0x392>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <AppTask+0x1c8>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	08001269 	.word	0x08001269
 80011c4:	0800126f 	.word	0x0800126f
 80011c8:	08001299 	.word	0x08001299
 80011cc:	0800129f 	.word	0x0800129f
 80011d0:	080012a5 	.word	0x080012a5
 80011d4:	080012ab 	.word	0x080012ab
 80011d8:	08001275 	.word	0x08001275
 80011dc:	0800127b 	.word	0x0800127b
 80011e0:	080012b1 	.word	0x080012b1
 80011e4:	080012c9 	.word	0x080012c9
 80011e8:	080012c9 	.word	0x080012c9
 80011ec:	080012f3 	.word	0x080012f3
 80011f0:	080012f3 	.word	0x080012f3
 80011f4:	08001281 	.word	0x08001281
 80011f8:	08001287 	.word	0x08001287
 80011fc:	0800126f 	.word	0x0800126f
 8001200:	0800127b 	.word	0x0800127b
 8001204:	0800131d 	.word	0x0800131d
 8001208:	08001323 	.word	0x08001323
 800120c:	08001329 	.word	0x08001329
 8001210:	0800132f 	.word	0x0800132f
 8001214:	08001335 	.word	0x08001335
 8001218:	08001281 	.word	0x08001281
 800121c:	08001287 	.word	0x08001287
 8001220:	0800126f 	.word	0x0800126f
 8001224:	08001275 	.word	0x08001275
 8001228:	0800127b 	.word	0x0800127b
 800122c:	0800133b 	.word	0x0800133b
 8001230:	08001341 	.word	0x08001341
 8001234:	08001347 	.word	0x08001347
 8001238:	0800134d 	.word	0x0800134d
 800123c:	08001353 	.word	0x08001353
 8001240:	08001359 	.word	0x08001359
 8001244:	0800135f 	.word	0x0800135f
 8001248:	08001373 	.word	0x08001373
 800124c:	08001379 	.word	0x08001379
 8001250:	0800126f 	.word	0x0800126f
 8001254:	0800138b 	.word	0x0800138b
 8001258:	0800137f 	.word	0x0800137f
 800125c:	08001385 	.word	0x08001385
 8001260:	0800128d 	.word	0x0800128d
 8001264:	08001293 	.word	0x08001293
							{                                           
								case CHANGE_MODE_BUTTON:				ChangeModeButton();		break;
 8001268:	f000 ff60 	bl	800212c <ChangeModeButton>
 800126c:	e092      	b.n	8001394 <AppTask+0x39c>

								case CLOCK_CHANGE_FONT_BUTTON:
								case ROUSER_CHANGE_FONT_BUTTON:
								case TIMER_CHANGE_FONT_BUTTON:
								case TETRIS_CHANGE_FONT_BUTTON:
									ChangeFontButton();
 800126e:	f000 fff7 	bl	8002260 <ChangeFontButton>
								break;
 8001272:	e08f      	b.n	8001394 <AppTask+0x39c>

								case CLOCK_ANIMATION_BUTTON:
								case TIMER_ANIMATION_BUTTON:
									AnimationButton();
 8001274:	f000 ff74 	bl	8002160 <AnimationButton>
								break;
 8001278:	e08c      	b.n	8001394 <AppTask+0x39c>

								case CLOCK_BORDER_BUTTON:
								case ROUSER_BORDER_BUTTON:
								case TIMER_BORDER_BUTTON:
									BorderButton();
 800127a:	f000 ff9d 	bl	80021b8 <BorderButton>
								break;
 800127e:	e089      	b.n	8001394 <AppTask+0x39c>

								case ROUSER_INCREASE_HOURS_BUTTON:
								case TIMER_INCREASE_HOURS_BUTTON:
									IncreaseHoursButton();
 8001280:	f000 fe7e 	bl	8001f80 <IncreaseHoursButton>
								break;
 8001284:	e086      	b.n	8001394 <AppTask+0x39c>

								case ROUSER_INCREASE_MINUTES_BUTTON:
								case TIMER_INCREASE_MINUTES_BUTTON:
									IncreaseMinutesButton();
 8001286:	f000 feaf 	bl	8001fe8 <IncreaseMinutesButton>
								break;
 800128a:	e083      	b.n	8001394 <AppTask+0x39c>

								case CLOCK_SWOWN_DATE_BUTTON: 			ClockShownDateButton();			break;
 800128c:	f000 f9fe 	bl	800168c <ClockShownDateButton>
 8001290:	e080      	b.n	8001394 <AppTask+0x39c>
								case CLOCK_SAY_DATE_BUTTON: 			ClockSayDateButton();			break;
 8001292:	f000 fa15 	bl	80016c0 <ClockSayDateButton>
 8001296:	e07d      	b.n	8001394 <AppTask+0x39c>
								case CLOCK_CHANGE_STYLE_BUTTON: 		ClockChangeStyleButton();		break;
 8001298:	f000 ffcc 	bl	8002234 <ClockChangeStyleButton>
 800129c:	e07a      	b.n	8001394 <AppTask+0x39c>
								case SAY_TIME_BUTTON: 					SayTimeButton();				break;
 800129e:	f000 fc7b 	bl	8001b98 <SayTimeButton>
 80012a2:	e077      	b.n	8001394 <AppTask+0x39c>
								case COUNT_DOWN_BUTTON: 				CountDownButton();				break;
 80012a4:	f000 fca4 	bl	8001bf0 <CountDownButton>
 80012a8:	e074      	b.n	8001394 <AppTask+0x39c>
								case AUTO_BRIGHTNESS_BUTTON: 			EnableDisableAutoBrightness();	break;
 80012aa:	f000 f9bb 	bl	8001624 <EnableDisableAutoBrightness>
 80012ae:	e071      	b.n	8001394 <AppTask+0x39c>

								case ALARM_TIMER_DISABLE_BUTTON:		AlarmTimerDisableButton();		break;
 80012b0:	f000 fc48 	bl	8001b44 <AlarmTimerDisableButton>
 80012b4:	e06e      	b.n	8001394 <AppTask+0x39c>
 80012b6:	bf00      	nop
 80012b8:	2000012c 	.word	0x2000012c
 80012bc:	2000023a 	.word	0x2000023a
 80012c0:	20000138 	.word	0x20000138
 80012c4:	cccccccd 	.word	0xcccccccd

								case DECREASE_BRIGHTNESS_BUTTON:
								case INCREASE_BRIGHTNESS_BUTTON:
									if(Application.addtionalFunctions==SET_BRIGHTNESS)
 80012c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001550 <AppTask+0x558>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d15e      	bne.n	800138e <AppTask+0x396>
									{
										if(Application.keyCode==DECREASE_BRIGHTNESS_BUTTON)
 80012d0:	4b9f      	ldr	r3, [pc, #636]	@ (8001550 <AppTask+0x558>)
 80012d2:	78db      	ldrb	r3, [r3, #3]
 80012d4:	2b0a      	cmp	r3, #10
 80012d6:	d101      	bne.n	80012dc <AppTask+0x2e4>
											DecreaseBrightness();
 80012d8:	f000 fd2c 	bl	8001d34 <DecreaseBrightness>

										if(Application.keyCode==INCREASE_BRIGHTNESS_BUTTON)
 80012dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001550 <AppTask+0x558>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	2b0b      	cmp	r3, #11
 80012e2:	d101      	bne.n	80012e8 <AppTask+0x2f0>
											IncreaseBrightness();
 80012e4:	f000 fd10 	bl	8001d08 <IncreaseBrightness>

										Application.additionalFunctionsTimer=5;
 80012e8:	4b99      	ldr	r3, [pc, #612]	@ (8001550 <AppTask+0x558>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
									}
								break;
 80012f0:	e04d      	b.n	800138e <AppTask+0x396>

								case DECREASE_VOLUME_BUTTON:
								case INCREASE_VOLUME_BUTTON:
									if(Application.addtionalFunctions==SET_VOLUME)
 80012f2:	4b97      	ldr	r3, [pc, #604]	@ (8001550 <AppTask+0x558>)
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d14b      	bne.n	8001392 <AppTask+0x39a>
									{
										if(Application.keyCode==DECREASE_VOLUME_BUTTON)
 80012fa:	4b95      	ldr	r3, [pc, #596]	@ (8001550 <AppTask+0x558>)
 80012fc:	78db      	ldrb	r3, [r3, #3]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d101      	bne.n	8001306 <AppTask+0x30e>
											DecreaseVolume();
 8001302:	f000 fd43 	bl	8001d8c <DecreaseVolume>

										if(Application.keyCode==INCREASE_VOLUME_BUTTON)
 8001306:	4b92      	ldr	r3, [pc, #584]	@ (8001550 <AppTask+0x558>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	2b0d      	cmp	r3, #13
 800130c:	d101      	bne.n	8001312 <AppTask+0x31a>
											IncreaseVolume();
 800130e:	f000 fd27 	bl	8001d60 <IncreaseVolume>

										Application.additionalFunctionsTimer=5;
 8001312:	4b8f      	ldr	r3, [pc, #572]	@ (8001550 <AppTask+0x558>)
 8001314:	2205      	movs	r2, #5
 8001316:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
									}
								break;
 800131a:	e03a      	b.n	8001392 <AppTask+0x39a>

								case ALARM_OFF_BUTTON: 					RouserAlarmOffButton();				break;
 800131c:	f000 fe98 	bl	8002050 <RouserAlarmOffButton>
 8001320:	e038      	b.n	8001394 <AppTask+0x39c>
								case ALARM_ON_BUTTON: 					RouserAlarmOnButton();				break;
 8001322:	f000 fea5 	bl	8002070 <RouserAlarmOnButton>
 8001326:	e035      	b.n	8001394 <AppTask+0x39c>
								case CHANGE_ALARM_TYPE_BUTTON: 			RouserChangeAlarmTypeButton();		break;
 8001328:	f000 fbf6 	bl	8001b18 <RouserChangeAlarmTypeButton>
 800132c:	e032      	b.n	8001394 <AppTask+0x39c>
								case RETURN_TO_CLOCK_MODE_BUTTON: 		ReturnToClockModeButton();			break;
 800132e:	f000 f9a1 	bl	8001674 <ReturnToClockModeButton>
 8001332:	e02f      	b.n	8001394 <AppTask+0x39c>
								case SET_CLOCK_TIME_BUTTON: 			SetClockTimeButton();				break;
 8001334:	f000 fc36 	bl	8001ba4 <SetClockTimeButton>
 8001338:	e02c      	b.n	8001394 <AppTask+0x39c>
								case TIMER_OFF_BUTTON: 					TimerOffButton();					break;
 800133a:	f000 fdb5 	bl	8001ea8 <TimerOffButton>
 800133e:	e029      	b.n	8001394 <AppTask+0x39c>
								case TIMER_ON_BUTTON:					TimerOnButton();					break;
 8001340:	f000 fdc2 	bl	8001ec8 <TimerOnButton>
 8001344:	e026      	b.n	8001394 <AppTask+0x39c>
								case TIMER_ALARM_OFF_BUTTON:			AlarmTimerDisableButton();				break;
 8001346:	f000 fbfd 	bl	8001b44 <AlarmTimerDisableButton>
 800134a:	e023      	b.n	8001394 <AppTask+0x39c>

								case CHANGE_MP3_PLAYER_ANIMATION_BUTTON: 	ChangeMP3_PlayerAnimationButton(); 			break;
 800134c:	f000 fcc2 	bl	8001cd4 <ChangeMP3_PlayerAnimationButton>
 8001350:	e020      	b.n	8001394 <AppTask+0x39c>
								case NEXT_TRECK_BUTTON: 					MP3_PlayNextTrack();						break;
 8001352:	f000 fc89 	bl	8001c68 <MP3_PlayNextTrack>
 8001356:	e01d      	b.n	8001394 <AppTask+0x39c>
								case PREV_TRECK_BUTTON: 					MP3_PlayPrevTrack();						break;
 8001358:	f000 fca4 	bl	8001ca4 <MP3_PlayPrevTrack>
 800135c:	e01a      	b.n	8001394 <AppTask+0x39c>
								case PAUSE_PLAY_BUTTON:
									if(MP3_Player.state==MP3_BYSY)
 800135e:	4b7d      	ldr	r3, [pc, #500]	@ (8001554 <AppTask+0x55c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <AppTask+0x374>
									{
										MP3_Pause();
 8001366:	f005 f967 	bl	8006638 <MP3_Pause>
									}
									else
									{
										MP3_Play();
									}
								break;
 800136a:	e013      	b.n	8001394 <AppTask+0x39c>
										MP3_Play();
 800136c:	f005 f9a8 	bl	80066c0 <MP3_Play>
								break;
 8001370:	e010      	b.n	8001394 <AppTask+0x39c>

								case CHANGE_TETRIS_MELODY_BUTTON: 				ChangeTetrisMelodyButton();			break;
 8001372:	f000 f9ff 	bl	8001774 <ChangeTetrisMelodyButton>
 8001376:	e00d      	b.n	8001394 <AppTask+0x39c>
								case ENABLE_DISABLE_TETRIS_MELODY_BUTTON: 		EnableDisabTetetrisMelody();		break;
 8001378:	f000 f9de 	bl	8001738 <EnableDisabTetetrisMelody>
 800137c:	e00a      	b.n	8001394 <AppTask+0x39c>
								case RESTART_GAME_BUTTON: 						RestartGame();						break;
 800137e:	f006 f84d 	bl	800741c <RestartGame>
 8001382:	e007      	b.n	8001394 <AppTask+0x39c>
								case CHANGE_START_SPEED_BUTTON:					ChangeTetrisStartSpeed();			break;
 8001384:	f000 f9be 	bl	8001704 <ChangeTetrisStartSpeed>
 8001388:	e004      	b.n	8001394 <AppTask+0x39c>
								default:																			break;
 800138a:	bf00      	nop
 800138c:	e002      	b.n	8001394 <AppTask+0x39c>
								break;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <AppTask+0x39c>
								break;
 8001392:	bf00      	nop
							}
						}
						if(keyResetFlag)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8133 	beq.w	8001602 <AppTask+0x60a>
						{
							Application.keyCode=NONE_BUTTON;
 800139c:	4b6c      	ldr	r3, [pc, #432]	@ (8001550 <AppTask+0x558>)
 800139e:	2200      	movs	r2, #0
 80013a0:	70da      	strb	r2, [r3, #3]
							if((Get_Timer_1_s()%5)==0)
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <AppTask+0x560>)
 80013a4:	6859      	ldr	r1, [r3, #4]
 80013a6:	4b6d      	ldr	r3, [pc, #436]	@ (800155c <AppTask+0x564>)
 80013a8:	fba3 2301 	umull	r2, r3, r3, r1
 80013ac:	089a      	lsrs	r2, r3, #2
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	1aca      	subs	r2, r1, r3
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	f040 8123 	bne.w	8001602 <AppTask+0x60a>
							{
								KeysReset();				//сбрасываем кнопки раз в 5 секунд для безопасности
 80013bc:	f001 fc60 	bl	8002c80 <KeysReset>
							}
						}
					break;
 80013c0:	e11f      	b.n	8001602 <AppTask+0x60a>

					case	3:
						if(Application.additionalFunctionsTimer!=0)
 80013c2:	4b63      	ldr	r3, [pc, #396]	@ (8001550 <AppTask+0x558>)
 80013c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <AppTask+0x3e6>
						{
							Application.additionalFunctionsTimer--;
 80013cc:	4b60      	ldr	r3, [pc, #384]	@ (8001550 <AppTask+0x558>)
 80013ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001550 <AppTask+0x558>)
 80013d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80013dc:	e00d      	b.n	80013fa <AppTask+0x402>
						}
						else
						{
							if(Application.mode==AADITIONAL_FUNCTIONS)
 80013de:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <AppTask+0x558>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d109      	bne.n	80013fa <AppTask+0x402>
							{
								Application.mode=Application.returnMode;
 80013e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001550 <AppTask+0x558>)
 80013e8:	785a      	ldrb	r2, [r3, #1]
 80013ea:	4b59      	ldr	r3, [pc, #356]	@ (8001550 <AppTask+0x558>)
 80013ec:	701a      	strb	r2, [r3, #0]
								Application.returnMode=NONE_MODE;
 80013ee:	4b58      	ldr	r3, [pc, #352]	@ (8001550 <AppTask+0x558>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	705a      	strb	r2, [r3, #1]
								Application.addtionalFunctions=NO_FUNCTION;
 80013f4:	4b56      	ldr	r3, [pc, #344]	@ (8001550 <AppTask+0x558>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	709a      	strb	r2, [r3, #2]
							}
						}


						UpdateTime();
 80013fa:	f000 ff7f 	bl	80022fc <UpdateTime>
						MPU6050_Read_All(&hi2c1, &MPU6050);
 80013fe:	4958      	ldr	r1, [pc, #352]	@ (8001560 <AppTask+0x568>)
 8001400:	4858      	ldr	r0, [pc, #352]	@ (8001564 <AppTask+0x56c>)
 8001402:	f005 fac1 	bl	8006988 <MPU6050_Read_All>
						SetOrintation();
 8001406:	f000 fa8d 	bl	8001924 <SetOrintation>

						MP3_Task();
 800140a:	f004 ff99 	bl	8006340 <MP3_Task>
					break;
 800140e:	e0fd      	b.n	800160c <AppTask+0x614>

					case	5:
						if((Application.clockDefinition.hours==Application.rouserDefinition.hours)&&(Application.clockDefinition.minutes==Application.rouserDefinition.minutes))
 8001410:	4b4f      	ldr	r3, [pc, #316]	@ (8001550 <AppTask+0x558>)
 8001412:	795a      	ldrb	r2, [r3, #5]
 8001414:	4b4e      	ldr	r3, [pc, #312]	@ (8001550 <AppTask+0x558>)
 8001416:	7e1b      	ldrb	r3, [r3, #24]
 8001418:	429a      	cmp	r2, r3
 800141a:	d132      	bne.n	8001482 <AppTask+0x48a>
 800141c:	4b4c      	ldr	r3, [pc, #304]	@ (8001550 <AppTask+0x558>)
 800141e:	799a      	ldrb	r2, [r3, #6]
 8001420:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <AppTask+0x558>)
 8001422:	7e5b      	ldrb	r3, [r3, #25]
 8001424:	429a      	cmp	r2, r3
 8001426:	d12c      	bne.n	8001482 <AppTask+0x48a>
						{
							if((Application.rouserDefinition.isSignalEnabled==false)&&(Application.rouserDefinition.isAlarmChecked==false)&&(Application.rouserDefinition.isAlarmEnabled==true))
 8001428:	4b49      	ldr	r3, [pc, #292]	@ (8001550 <AppTask+0x558>)
 800142a:	7f5b      	ldrb	r3, [r3, #29]
 800142c:	f083 0301 	eor.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d029      	beq.n	800148a <AppTask+0x492>
 8001436:	4b46      	ldr	r3, [pc, #280]	@ (8001550 <AppTask+0x558>)
 8001438:	7f1b      	ldrb	r3, [r3, #28]
 800143a:	f083 0301 	eor.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d022      	beq.n	800148a <AppTask+0x492>
 8001444:	4b42      	ldr	r3, [pc, #264]	@ (8001550 <AppTask+0x558>)
 8001446:	7edb      	ldrb	r3, [r3, #27]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01e      	beq.n	800148a <AppTask+0x492>
							{
								Application.rouserDefinition.isSignalEnabled=true;
 800144c:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <AppTask+0x558>)
 800144e:	2201      	movs	r2, #1
 8001450:	775a      	strb	r2, [r3, #29]
								Application.saved_volume=Application.volume;
 8001452:	4b3f      	ldr	r3, [pc, #252]	@ (8001550 <AppTask+0x558>)
 8001454:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8001458:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <AppTask+0x558>)
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								Application.volume=10;
 800145e:	4b3c      	ldr	r3, [pc, #240]	@ (8001550 <AppTask+0x558>)
 8001460:	220a      	movs	r2, #10
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
								MP3_SetVolume(Application.volume);
 8001466:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <AppTask+0x558>)
 8001468:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800146c:	4618      	mov	r0, r3
 800146e:	f005 f8a3 	bl	80065b8 <MP3_SetVolume>
								HAL_Delay(500);
 8001472:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001476:	f006 fffb 	bl	8008470 <HAL_Delay>
								MP3_PlayTrack(ROUSER_SIGNAL);
 800147a:	20a7      	movs	r0, #167	@ 0xa7
 800147c:	f005 f9e0 	bl	8006840 <MP3_PlayTrack>
							if((Application.rouserDefinition.isSignalEnabled==false)&&(Application.rouserDefinition.isAlarmChecked==false)&&(Application.rouserDefinition.isAlarmEnabled==true))
 8001480:	e003      	b.n	800148a <AppTask+0x492>
							}
						}
						else
						{
							Application.rouserDefinition.isAlarmChecked=false;
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <AppTask+0x558>)
 8001484:	2200      	movs	r2, #0
 8001486:	771a      	strb	r2, [r3, #28]
 8001488:	e000      	b.n	800148c <AppTask+0x494>
							if((Application.rouserDefinition.isSignalEnabled==false)&&(Application.rouserDefinition.isAlarmChecked==false)&&(Application.rouserDefinition.isAlarmEnabled==true))
 800148a:	bf00      	nop
						}

						if(Application.timerDefinition.isTimerEnabled == true)
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <AppTask+0x558>)
 800148e:	7bdb      	ldrb	r3, [r3, #15]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d02c      	beq.n	80014ee <AppTask+0x4f6>
						{
							if((Get_Timer_1_s()%60==Application.timerDefinition.remainder)&&(Get_Timer_1_s() != Application.timerDefinition.startTime))
 8001494:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <AppTask+0x560>)
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <AppTask+0x570>)
 800149a:	fba3 2301 	umull	r2, r3, r3, r1
 800149e:	095a      	lsrs	r2, r3, #5
 80014a0:	4613      	mov	r3, r2
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	1aca      	subs	r2, r1, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <AppTask+0x558>)
 80014ac:	7cdb      	ldrb	r3, [r3, #19]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d11d      	bne.n	80014ee <AppTask+0x4f6>
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <AppTask+0x560>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <AppTask+0x558>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d017      	beq.n	80014ee <AppTask+0x4f6>
							{
								if(Application.timerDefinition.minutes==0)
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <AppTask+0x558>)
 80014c0:	7b5b      	ldrb	r3, [r3, #13]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <AppTask+0x4ea>
								{
									if(Application.timerDefinition.hours!=0)
 80014c6:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <AppTask+0x558>)
 80014c8:	7b1b      	ldrb	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00f      	beq.n	80014ee <AppTask+0x4f6>
									{
										Application.timerDefinition.hours--;
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <AppTask+0x558>)
 80014d0:	7b1b      	ldrb	r3, [r3, #12]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <AppTask+0x558>)
 80014d8:	731a      	strb	r2, [r3, #12]
										Application.timerDefinition.minutes=59;
 80014da:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <AppTask+0x558>)
 80014dc:	223b      	movs	r2, #59	@ 0x3b
 80014de:	735a      	strb	r2, [r3, #13]
 80014e0:	e005      	b.n	80014ee <AppTask+0x4f6>
									}
								}
								else
								{
									Application.timerDefinition.minutes--;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <AppTask+0x558>)
 80014e4:	7b5b      	ldrb	r3, [r3, #13]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <AppTask+0x558>)
 80014ec:	735a      	strb	r2, [r3, #13]
								}
							}
						}

						if((Application.timerDefinition.isTimerEnabled == true)&&(Application.timerDefinition.hours == 0)&&(Application.timerDefinition.minutes == 0))
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <AppTask+0x558>)
 80014f0:	7bdb      	ldrb	r3, [r3, #15]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8087 	beq.w	8001606 <AppTask+0x60e>
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <AppTask+0x558>)
 80014fa:	7b1b      	ldrb	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 8082 	bne.w	8001606 <AppTask+0x60e>
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <AppTask+0x558>)
 8001504:	7b5b      	ldrb	r3, [r3, #13]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d17d      	bne.n	8001606 <AppTask+0x60e>
						{
							if(Application.timerDefinition.isSignalEnabled==false)
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <AppTask+0x558>)
 800150c:	7c1b      	ldrb	r3, [r3, #16]
 800150e:	f083 0301 	eor.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d076      	beq.n	8001606 <AppTask+0x60e>
							{
								Application.timerDefinition.isSignalEnabled=true;
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <AppTask+0x558>)
 800151a:	2201      	movs	r2, #1
 800151c:	741a      	strb	r2, [r3, #16]
								Application.saved_volume=Application.volume;
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <AppTask+0x558>)
 8001520:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <AppTask+0x558>)
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								Application.volume=10;
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <AppTask+0x558>)
 800152c:	220a      	movs	r2, #10
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
								MP3_SetVolume(Application.volume);
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <AppTask+0x558>)
 8001534:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001538:	4618      	mov	r0, r3
 800153a:	f005 f83d 	bl	80065b8 <MP3_SetVolume>
								HAL_Delay(500);
 800153e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001542:	f006 ff95 	bl	8008470 <HAL_Delay>
								MP3_PlayTrack(TIMER_SIGNAL);
 8001546:	20ad      	movs	r0, #173	@ 0xad
 8001548:	f005 f97a 	bl	8006840 <MP3_PlayTrack>
							}
						}
					break;
 800154c:	e05b      	b.n	8001606 <AppTask+0x60e>
 800154e:	bf00      	nop
 8001550:	20000138 	.word	0x20000138
 8001554:	20000210 	.word	0x20000210
 8001558:	2000012c 	.word	0x2000012c
 800155c:	cccccccd 	.word	0xcccccccd
 8001560:	200001b0 	.word	0x200001b0
 8001564:	200002f8 	.word	0x200002f8
 8001568:	88888889 	.word	0x88888889
					case	2:
					case	4:
					case	6:
					case	8:

						if(Application.isAutoBrightnessEnabled==true)
 800156c:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <AppTask+0x61c>)
 800156e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01e      	beq.n	80015b4 <AppTask+0x5bc>
						{
							switch (Light_Sensor.level)
 8001576:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <AppTask+0x620>)
 8001578:	7d9b      	ldrb	r3, [r3, #22]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d010      	beq.n	80015a0 <AppTask+0x5a8>
 800157e:	2b02      	cmp	r3, #2
 8001580:	dc13      	bgt.n	80015aa <AppTask+0x5b2>
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <AppTask+0x594>
 8001586:	2b01      	cmp	r3, #1
 8001588:	d005      	beq.n	8001596 <AppTask+0x59e>
 800158a:	e00e      	b.n	80015aa <AppTask+0x5b2>
							{
								case DARK:
									Application.intensivity=INTENSIVITY_DARK_VALUE;
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <AppTask+0x61c>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
								break;
 8001594:	e00e      	b.n	80015b4 <AppTask+0x5bc>

								case NORMAL:
									Application.intensivity=INTENSIVITY_NORMAL_VALUE;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <AppTask+0x61c>)
 8001598:	2202      	movs	r2, #2
 800159a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
								break;
 800159e:	e009      	b.n	80015b4 <AppTask+0x5bc>

								case BRIGHT:
									Application.intensivity=INTENSIVITY_HIGHT_VALUE;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <AppTask+0x61c>)
 80015a2:	2205      	movs	r2, #5
 80015a4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
								break;
 80015a8:	e004      	b.n	80015b4 <AppTask+0x5bc>

								default:
									Application.intensivity=INTENSIVITY_NORMAL_VALUE;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <AppTask+0x61c>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
								break;
 80015b2:	bf00      	nop
							}
						}

						if(prevIntensivity!=Application.intensivity)
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <AppTask+0x61c>)
 80015b6:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <AppTask+0x624>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d00a      	beq.n	80015d8 <AppTask+0x5e0>
						{
							SetIntensivity(Application.intensivity);
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <AppTask+0x61c>)
 80015c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fe55 	bl	8006278 <SetIntensivity>
							prevIntensivity=Application.intensivity;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <AppTask+0x61c>)
 80015d0:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <AppTask+0x624>)
 80015d6:	701a      	strb	r2, [r3, #0]
						}

						if(prevVolume!=Application.volume)
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <AppTask+0x61c>)
 80015da:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <AppTask+0x628>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d011      	beq.n	800160a <AppTask+0x612>
						{
							MP3_SetVolume(Application.volume);
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <AppTask+0x61c>)
 80015e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 ffe3 	bl	80065b8 <MP3_SetVolume>
							prevVolume=Application.volume;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <AppTask+0x61c>)
 80015f4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <AppTask+0x628>)
 80015fa:	701a      	strb	r2, [r3, #0]
						}

					break;
 80015fc:	e005      	b.n	800160a <AppTask+0x612>
					break;
 80015fe:	bf00      	nop
 8001600:	e004      	b.n	800160c <AppTask+0x614>
					break;
 8001602:	bf00      	nop
 8001604:	e002      	b.n	800160c <AppTask+0x614>
					break;
 8001606:	bf00      	nop
 8001608:	e000      	b.n	800160c <AppTask+0x614>
					break;
 800160a:	bf00      	nop
					}
//---------------------------------------------------------------------------- 1 s
			}
		}
	}
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000138 	.word	0x20000138
 8001618:	20000220 	.word	0x20000220
 800161c:	2000023b 	.word	0x2000023b
 8001620:	2000023c 	.word	0x2000023c

08001624 <EnableDisableAutoBrightness>:

void EnableDisableAutoBrightness(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	if(Application.isAutoBrightnessEnabled == true)
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 800162a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <EnableDisableAutoBrightness+0x20>
	{
		Application.isAutoBrightnessEnabled=false;
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		Application.intensivity=INTENSIVITY_DEFAULT_VALUE;
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 800163c:	2204      	movs	r2, #4
 800163e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8001642:	e003      	b.n	800164c <EnableDisableAutoBrightness+0x28>
	}
	else
	{
		Application.isAutoBrightnessEnabled=true;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	}

	Application.addtionalFunctions=SHOWN_AUTO_BRIGHTNESS;
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 800164e:	2207      	movs	r2, #7
 8001650:	709a      	strb	r2, [r3, #2]
	Application.returnMode=Application.mode;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 8001658:	705a      	strb	r2, [r3, #1]
	Application.mode=AADITIONAL_FUNCTIONS;
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 800165c:	2206      	movs	r2, #6
 800165e:	701a      	strb	r2, [r3, #0]
	Application.additionalFunctionsTimer=5;
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <EnableDisableAutoBrightness+0x4c>)
 8001662:	2205      	movs	r2, #5
 8001664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000138 	.word	0x20000138

08001674 <ReturnToClockModeButton>:

void ReturnToClockModeButton(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	MP3_Stop();
 8001678:	f005 f866 	bl	8006748 <MP3_Stop>
	Application.mode=CLOCK;
 800167c:	4b02      	ldr	r3, [pc, #8]	@ (8001688 <ReturnToClockModeButton+0x14>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000138 	.word	0x20000138

0800168c <ClockShownDateButton>:

void ClockShownDateButton(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	if(Application.addtionalFunctions!=SHOWN_DATE)
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <ClockShownDateButton+0x30>)
 8001692:	789b      	ldrb	r3, [r3, #2]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d00d      	beq.n	80016b4 <ClockShownDateButton+0x28>
	{
		Application.addtionalFunctions=SHOWN_DATE;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <ClockShownDateButton+0x30>)
 800169a:	2205      	movs	r2, #5
 800169c:	709a      	strb	r2, [r3, #2]
		Application.returnMode=Application.mode;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <ClockShownDateButton+0x30>)
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <ClockShownDateButton+0x30>)
 80016a4:	705a      	strb	r2, [r3, #1]
		Application.mode=AADITIONAL_FUNCTIONS;
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <ClockShownDateButton+0x30>)
 80016a8:	2206      	movs	r2, #6
 80016aa:	701a      	strb	r2, [r3, #0]
		Application.additionalFunctionsTimer=5;
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <ClockShownDateButton+0x30>)
 80016ae:	2205      	movs	r2, #5
 80016b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000138 	.word	0x20000138

080016c0 <ClockSayDateButton>:

void ClockSayDateButton(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	MP3_Player.function=SAY_DATE;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <ClockSayDateButton+0x3c>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	705a      	strb	r2, [r3, #1]
	MP3_Player.delay=1;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <ClockSayDateButton+0x3c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	719a      	strb	r2, [r3, #6]
	Application.saved_volume=Application.volume;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <ClockSayDateButton+0x40>)
 80016d2:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <ClockSayDateButton+0x40>)
 80016d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	Application.volume=10;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <ClockSayDateButton+0x40>)
 80016de:	220a      	movs	r2, #10
 80016e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	MP3_SetVolume(Application.volume);
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <ClockSayDateButton+0x40>)
 80016e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 ff64 	bl	80065b8 <MP3_SetVolume>
	HAL_Delay(300);
 80016f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016f4:	f006 febc 	bl	8008470 <HAL_Delay>
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000210 	.word	0x20000210
 8001700:	20000138 	.word	0x20000138

08001704 <ChangeTetrisStartSpeed>:

void ChangeTetrisStartSpeed()
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	if(Application.tetrisDefinition.Startspeed==0)
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <ChangeTetrisStartSpeed+0x30>)
 800170a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800170e:	2b00      	cmp	r3, #0
 8001710:	d104      	bne.n	800171c <ChangeTetrisStartSpeed+0x18>
		Application.tetrisDefinition.Startspeed=3;
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <ChangeTetrisStartSpeed+0x30>)
 8001714:	2203      	movs	r2, #3
 8001716:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	else
		Application.tetrisDefinition.Startspeed--;
}
 800171a:	e007      	b.n	800172c <ChangeTetrisStartSpeed+0x28>
		Application.tetrisDefinition.Startspeed--;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <ChangeTetrisStartSpeed+0x30>)
 800171e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001722:	3b01      	subs	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <ChangeTetrisStartSpeed+0x30>)
 8001728:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000138 	.word	0x20000138

08001738 <EnableDisabTetetrisMelody>:

void EnableDisabTetetrisMelody(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	if(Application.tetrisDefinition.isSoundEnabled == true)
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <EnableDisabTetetrisMelody+0x38>)
 800173e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <EnableDisabTetetrisMelody+0x1c>
	{
		MP3_Stop();
 8001746:	f004 ffff 	bl	8006748 <MP3_Stop>
		Application.tetrisDefinition.isSoundEnabled=false;
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <EnableDisabTetetrisMelody+0x38>)
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	else
	{
		MP3_PlayTrack(TETRIS_OFFSET+Application.tetrisDefinition.Melody);
		Application.tetrisDefinition.isSoundEnabled = true;
	}
}
 8001752:	e00b      	b.n	800176c <EnableDisabTetetrisMelody+0x34>
		MP3_PlayTrack(TETRIS_OFFSET+Application.tetrisDefinition.Melody);
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <EnableDisabTetetrisMelody+0x38>)
 8001756:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800175a:	33b3      	adds	r3, #179	@ 0xb3
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f005 f86e 	bl	8006840 <MP3_PlayTrack>
		Application.tetrisDefinition.isSoundEnabled = true;
 8001764:	4b02      	ldr	r3, [pc, #8]	@ (8001770 <EnableDisabTetetrisMelody+0x38>)
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000138 	.word	0x20000138

08001774 <ChangeTetrisMelodyButton>:

void ChangeTetrisMelodyButton(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	MP3_Stop();
 8001778:	f004 ffe6 	bl	8006748 <MP3_Stop>
	HAL_Delay(500);
 800177c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001780:	f006 fe76 	bl	8008470 <HAL_Delay>
	Application.tetrisDefinition.Melody++;
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <ChangeTetrisMelodyButton+0x48>)
 8001786:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800178a:	3301      	adds	r3, #1
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <ChangeTetrisMelodyButton+0x48>)
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(Application.tetrisDefinition.Melody==TETRIS_MELODY_COUNTER)
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <ChangeTetrisMelodyButton+0x48>)
 8001796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800179a:	2b09      	cmp	r3, #9
 800179c:	d103      	bne.n	80017a6 <ChangeTetrisMelodyButton+0x32>
		Application.tetrisDefinition.Melody=0;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <ChangeTetrisMelodyButton+0x48>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	MP3_PlayTrack(TETRIS_OFFSET+Application.tetrisDefinition.Melody);
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <ChangeTetrisMelodyButton+0x48>)
 80017a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ac:	33b3      	adds	r3, #179	@ 0xb3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 f845 	bl	8006840 <MP3_PlayTrack>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000138 	.word	0x20000138

080017c0 <LightSensorAverage>:
	DrowDigit(6,21,c,CLASSIC,SMALL,ROTATION_90_DEGREES);
	DrowDigit(12,21,d,CLASSIC,SMALL,ROTATION_90_DEGREES);
	}

void LightSensorAverage (void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
uint32_t summ=0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
	if(Light_Sensor.isDataReady==true)
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <LightSensorAverage+0x90>)
 80017cc:	7e1b      	ldrb	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d038      	beq.n	8001844 <LightSensorAverage+0x84>
	{
		for(uint8_t i=0;i<10;i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	e00a      	b.n	80017ee <LightSensorAverage+0x2e>
		{
			summ=summ+Light_Sensor.data[i];
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <LightSensorAverage+0x90>)
 80017dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<10;i++)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	3301      	adds	r3, #1
 80017ec:	70fb      	strb	r3, [r7, #3]
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d9f1      	bls.n	80017d8 <LightSensorAverage+0x18>
		}
		Light_Sensor.value=summ/10;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <LightSensorAverage+0x94>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <LightSensorAverage+0x90>)
 8001802:	829a      	strh	r2, [r3, #20]

		if(Light_Sensor.value<BRIGHTNESS_DARK_LEVEL)
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <LightSensorAverage+0x90>)
 8001806:	8a9b      	ldrh	r3, [r3, #20]
 8001808:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800180c:	d202      	bcs.n	8001814 <LightSensorAverage+0x54>
			Light_Sensor.level=DARK;
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <LightSensorAverage+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	759a      	strb	r2, [r3, #22]

		if((Light_Sensor.value>=BRIGHTNESS_DARK_LEVEL)&&(Light_Sensor.value<=BRIGHTNESS_MAX_LEVEL))
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <LightSensorAverage+0x90>)
 8001816:	8a9b      	ldrh	r3, [r3, #20]
 8001818:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800181c:	d307      	bcc.n	800182e <LightSensorAverage+0x6e>
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <LightSensorAverage+0x90>)
 8001820:	8a9b      	ldrh	r3, [r3, #20]
 8001822:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8001826:	d802      	bhi.n	800182e <LightSensorAverage+0x6e>
			Light_Sensor.level=NORMAL;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <LightSensorAverage+0x90>)
 800182a:	2201      	movs	r2, #1
 800182c:	759a      	strb	r2, [r3, #22]

		if(Light_Sensor.value>BRIGHTNESS_MAX_LEVEL)
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <LightSensorAverage+0x90>)
 8001830:	8a9b      	ldrh	r3, [r3, #20]
 8001832:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8001836:	d902      	bls.n	800183e <LightSensorAverage+0x7e>
			Light_Sensor.level=BRIGHT;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <LightSensorAverage+0x90>)
 800183a:	2202      	movs	r2, #2
 800183c:	759a      	strb	r2, [r3, #22]

		Light_Sensor.isDataReady=false;
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <LightSensorAverage+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	761a      	strb	r2, [r3, #24]
	}
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000220 	.word	0x20000220
 8001854:	cccccccd 	.word	0xcccccccd

08001858 <CreateImage>:

void CreateImage(void)
{
 8001858:	b598      	push	{r3, r4, r7, lr}
 800185a:	af00      	add	r7, sp, #0
	if(!((Application.mode==MP3_PLAYER)||(Application.mode==TETRIS)))
 800185c:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <CreateImage+0xc8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d005      	beq.n	8001870 <CreateImage+0x18>
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <CreateImage+0xc8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d001      	beq.n	8001870 <CreateImage+0x18>
	{
		ClearMax7219();	// для плеера очистку мартцы вызывает функциия анимации
 800186c:	f004 fae0 	bl	8005e30 <ClearMax7219>
	}
	switch(Application.mode)
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <CreateImage+0xc8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	2b05      	cmp	r3, #5
 8001878:	d84d      	bhi.n	8001916 <CreateImage+0xbe>
 800187a:	a201      	add	r2, pc, #4	@ (adr r2, 8001880 <CreateImage+0x28>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	08001899 	.word	0x08001899
 8001884:	080018c5 	.word	0x080018c5
 8001888:	080018db 	.word	0x080018db
 800188c:	08001903 	.word	0x08001903
 8001890:	080018eb 	.word	0x080018eb
 8001894:	080018f7 	.word	0x080018f7
	{
		case CLOCK:
			WriteTime(Application.clockDefinition,Application.rotation);
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <CreateImage+0xc8>)
 800189a:	7918      	ldrb	r0, [r3, #4]
 800189c:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <CreateImage+0xc8>)
 800189e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80018a2:	4614      	mov	r4, r2
 80018a4:	7a5a      	ldrb	r2, [r3, #9]
 80018a6:	7a99      	ldrb	r1, [r3, #10]
 80018a8:	0209      	lsls	r1, r1, #8
 80018aa:	430a      	orrs	r2, r1
 80018ac:	7adb      	ldrb	r3, [r3, #11]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	2300      	movs	r3, #0
 80018b4:	f362 0317 	bfi	r3, r2, #0, #24
 80018b8:	4602      	mov	r2, r0
 80018ba:	4620      	mov	r0, r4
 80018bc:	4619      	mov	r1, r3
 80018be:	f003 f9f5 	bl	8004cac <WriteTime>
		break;
 80018c2:	e029      	b.n	8001918 <CreateImage+0xc0>

		case ROUSER:
			WriteRouser(Application.rouserDefinition,Application.rotation);
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <CreateImage+0xc8>)
 80018c6:	791b      	ldrb	r3, [r3, #4]
 80018c8:	4915      	ldr	r1, [pc, #84]	@ (8001920 <CreateImage+0xc8>)
 80018ca:	461a      	mov	r2, r3
 80018cc:	f101 0318 	add.w	r3, r1, #24
 80018d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d4:	f002 fd08 	bl	80042e8 <WriteRouser>
			//ShowLightSensorData(); // только ROTATION_90_DEGREES
		break;
 80018d8:	e01e      	b.n	8001918 <CreateImage+0xc0>

		case TIMER:
			WriteTimer(Application.timerDefinition,Application.rotation);
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <CreateImage+0xc8>)
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <CreateImage+0xc8>)
 80018e0:	320c      	adds	r2, #12
 80018e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e4:	f002 ff46 	bl	8004774 <WriteTimer>
		break;
 80018e8:	e016      	b.n	8001918 <CreateImage+0xc0>

		case TETRIS:
			WriteTetrisMode(Application.rotation);
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <CreateImage+0xc8>)
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fcc4 	bl	800327c <WriteTetrisMode>
		break;
 80018f4:	e010      	b.n	8001918 <CreateImage+0xc0>

		case AADITIONAL_FUNCTIONS:
			 WriteAdditionalMode(Application.rotation);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <CreateImage+0xc8>)
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 f83c 	bl	8003978 <WriteAdditionalMode>
		break;
 8001900:	e00a      	b.n	8001918 <CreateImage+0xc0>

		case MP3_PLAYER:
			 WriteMP3_PlayerAnimation(Application.mp3_PlayerDefinition.animationVariant,Application.rotation);
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <CreateImage+0xc8>)
 8001904:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001908:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <CreateImage+0xc8>)
 800190a:	7912      	ldrb	r2, [r2, #4]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f9d6 	bl	8002cc0 <WriteMP3_PlayerAnimation>
		break;
 8001914:	e000      	b.n	8001918 <CreateImage+0xc0>

		default:		break;
 8001916:	bf00      	nop
	}
	UpdateMax7219();
 8001918:	f004 fb0c 	bl	8005f34 <UpdateMax7219>
}
 800191c:	bf00      	nop
 800191e:	bd98      	pop	{r3, r4, r7, pc}
 8001920:	20000138 	.word	0x20000138

08001924 <SetOrintation>:

void SetOrintation(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	if((MPU6050.Accel_X_RAW>ACCELERARTION_LIMIT_MAX)&&(abs(MPU6050.Accel_Y_RAW)<ACCELERARTION_LIMIT_MIN)&&(abs(MPU6050.Accel_Z_RAW)<ACCELERARTION_LIMIT_MIN))
 8001928:	4b78      	ldr	r3, [pc, #480]	@ (8001b0c <SetOrintation+0x1e8>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001932:	4293      	cmp	r3, r2
 8001934:	dd19      	ble.n	800196a <SetOrintation+0x46>
 8001936:	4b75      	ldr	r3, [pc, #468]	@ (8001b0c <SetOrintation+0x1e8>)
 8001938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bfb8      	it	lt
 8001940:	425b      	neglt	r3, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001948:	4293      	cmp	r3, r2
 800194a:	d80e      	bhi.n	800196a <SetOrintation+0x46>
 800194c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b0c <SetOrintation+0x1e8>)
 800194e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	bfb8      	it	lt
 8001956:	425b      	neglt	r3, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800195e:	4293      	cmp	r3, r2
 8001960:	d803      	bhi.n	800196a <SetOrintation+0x46>
	{
		MPU6050.orientation=DOWN_SIDE;
 8001962:	4b6a      	ldr	r3, [pc, #424]	@ (8001b0c <SetOrintation+0x1e8>)
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}

	if((MPU6050.Accel_X_RAW<(-1)*ACCELERARTION_LIMIT_MAX)&&(abs(MPU6050.Accel_Y_RAW)<ACCELERARTION_LIMIT_MIN)&&(abs(MPU6050.Accel_Z_RAW)<ACCELERARTION_LIMIT_MIN))
 800196a:	4b68      	ldr	r3, [pc, #416]	@ (8001b0c <SetOrintation+0x1e8>)
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	4a67      	ldr	r2, [pc, #412]	@ (8001b10 <SetOrintation+0x1ec>)
 8001972:	4293      	cmp	r3, r2
 8001974:	da19      	bge.n	80019aa <SetOrintation+0x86>
 8001976:	4b65      	ldr	r3, [pc, #404]	@ (8001b0c <SetOrintation+0x1e8>)
 8001978:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfb8      	it	lt
 8001980:	425b      	neglt	r3, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001988:	4293      	cmp	r3, r2
 800198a:	d80e      	bhi.n	80019aa <SetOrintation+0x86>
 800198c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b0c <SetOrintation+0x1e8>)
 800198e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	bfb8      	it	lt
 8001996:	425b      	neglt	r3, r3
 8001998:	b29b      	uxth	r3, r3
 800199a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800199e:	4293      	cmp	r3, r2
 80019a0:	d803      	bhi.n	80019aa <SetOrintation+0x86>
	{
		MPU6050.orientation=UP_SIDE;
 80019a2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b0c <SetOrintation+0x1e8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}

	if((MPU6050.Accel_Z_RAW>ACCELERARTION_LIMIT_MAX)&&(abs(MPU6050.Accel_Y_RAW)<ACCELERARTION_LIMIT_MIN)&&(abs(MPU6050.Accel_X_RAW)<ACCELERARTION_LIMIT_MIN))
 80019aa:	4b58      	ldr	r3, [pc, #352]	@ (8001b0c <SetOrintation+0x1e8>)
 80019ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019b0:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	dd19      	ble.n	80019ec <SetOrintation+0xc8>
 80019b8:	4b54      	ldr	r3, [pc, #336]	@ (8001b0c <SetOrintation+0x1e8>)
 80019ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfb8      	it	lt
 80019c2:	425b      	neglt	r3, r3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d80e      	bhi.n	80019ec <SetOrintation+0xc8>
 80019ce:	4b4f      	ldr	r3, [pc, #316]	@ (8001b0c <SetOrintation+0x1e8>)
 80019d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfb8      	it	lt
 80019d8:	425b      	neglt	r3, r3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d803      	bhi.n	80019ec <SetOrintation+0xc8>
	{
		MPU6050.orientation=LEFT_SIDE;
 80019e4:	4b49      	ldr	r3, [pc, #292]	@ (8001b0c <SetOrintation+0x1e8>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}

	if((MPU6050.Accel_Z_RAW<(-1)*ACCELERARTION_LIMIT_MAX)&&(abs(MPU6050.Accel_Y_RAW)<ACCELERARTION_LIMIT_MIN)&&(abs(MPU6050.Accel_X_RAW)<ACCELERARTION_LIMIT_MIN))
 80019ec:	4b47      	ldr	r3, [pc, #284]	@ (8001b0c <SetOrintation+0x1e8>)
 80019ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f2:	4a47      	ldr	r2, [pc, #284]	@ (8001b10 <SetOrintation+0x1ec>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	da19      	bge.n	8001a2c <SetOrintation+0x108>
 80019f8:	4b44      	ldr	r3, [pc, #272]	@ (8001b0c <SetOrintation+0x1e8>)
 80019fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bfb8      	it	lt
 8001a02:	425b      	neglt	r3, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d80e      	bhi.n	8001a2c <SetOrintation+0x108>
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bfb8      	it	lt
 8001a18:	425b      	neglt	r3, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d803      	bhi.n	8001a2c <SetOrintation+0x108>
	{
		MPU6050.orientation=RIGHT_SIDE;
 8001a24:	4b39      	ldr	r3, [pc, #228]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a26:	2203      	movs	r2, #3
 8001a28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}

	if((MPU6050.Accel_Y_RAW>ACCELERARTION_LIMIT_MAX)&&(abs(MPU6050.Accel_X_RAW)<ACCELERARTION_LIMIT_MIN)&&(abs(MPU6050.Accel_Z_RAW)<ACCELERARTION_LIMIT_MIN))
 8001a2c:	4b37      	ldr	r3, [pc, #220]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a32:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001a36:	4293      	cmp	r3, r2
 8001a38:	dd19      	ble.n	8001a6e <SetOrintation+0x14a>
 8001a3a:	4b34      	ldr	r3, [pc, #208]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bfb8      	it	lt
 8001a44:	425b      	neglt	r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d80e      	bhi.n	8001a6e <SetOrintation+0x14a>
 8001a50:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bfb8      	it	lt
 8001a5a:	425b      	neglt	r3, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d803      	bhi.n	8001a6e <SetOrintation+0x14a>
	{
		MPU6050.orientation=TOP_SIDE;
 8001a66:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}

	if((MPU6050.Accel_Y_RAW<(-1)*ACCELERARTION_LIMIT_MAX)&&(abs(MPU6050.Accel_X_RAW)<ACCELERARTION_LIMIT_MIN)&&(abs(MPU6050.Accel_Z_RAW)<ACCELERARTION_LIMIT_MIN))
 8001a6e:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a74:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <SetOrintation+0x1ec>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	da19      	bge.n	8001aae <SetOrintation+0x18a>
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bfb8      	it	lt
 8001a84:	425b      	neglt	r3, r3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d80e      	bhi.n	8001aae <SetOrintation+0x18a>
 8001a90:	4b1e      	ldr	r3, [pc, #120]	@ (8001b0c <SetOrintation+0x1e8>)
 8001a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bfb8      	it	lt
 8001a9a:	425b      	neglt	r3, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d803      	bhi.n	8001aae <SetOrintation+0x18a>
	{
		MPU6050.orientation=BOTTOM_SIDE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <SetOrintation+0x1e8>)
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}


	switch (MPU6050.orientation)
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <SetOrintation+0x1e8>)
 8001ab0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d824      	bhi.n	8001b02 <SetOrintation+0x1de>
 8001ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <SetOrintation+0x19c>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001ae1 	.word	0x08001ae1
 8001ac4:	08001ad9 	.word	0x08001ad9
 8001ac8:	08001ae9 	.word	0x08001ae9
 8001acc:	08001af1 	.word	0x08001af1
 8001ad0:	08001af9 	.word	0x08001af9
 8001ad4:	08001af9 	.word	0x08001af9
	{
		case DOWN_SIDE:
			Application.rotation=ROTATION_0_DEGREES;
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <SetOrintation+0x1f0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	711a      	strb	r2, [r3, #4]
		break;
 8001ade:	e011      	b.n	8001b04 <SetOrintation+0x1e0>

		case UP_SIDE:
			Application.rotation=ROTATION_180_DEGREES;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <SetOrintation+0x1f0>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	711a      	strb	r2, [r3, #4]
		break;
 8001ae6:	e00d      	b.n	8001b04 <SetOrintation+0x1e0>

		case LEFT_SIDE:
			Application.rotation=ROTATION_90_DEGREES;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <SetOrintation+0x1f0>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	711a      	strb	r2, [r3, #4]
		break;
 8001aee:	e009      	b.n	8001b04 <SetOrintation+0x1e0>

		case RIGHT_SIDE:
			Application.rotation=ROTATION_270_DEGREES;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <SetOrintation+0x1f0>)
 8001af2:	2203      	movs	r2, #3
 8001af4:	711a      	strb	r2, [r3, #4]
		break;
 8001af6:	e005      	b.n	8001b04 <SetOrintation+0x1e0>

		case TOP_SIDE:
		case BOTTOM_SIDE:
			Application.rotation=Application.rotation;
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <SetOrintation+0x1f0>)
 8001afa:	791a      	ldrb	r2, [r3, #4]
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <SetOrintation+0x1f0>)
 8001afe:	711a      	strb	r2, [r3, #4]
		break;
 8001b00:	e000      	b.n	8001b04 <SetOrintation+0x1e0>

		default:	break;
 8001b02:	bf00      	nop
	}
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	200001b0 	.word	0x200001b0
 8001b10:	ffffd120 	.word	0xffffd120
 8001b14:	20000138 	.word	0x20000138

08001b18 <RouserChangeAlarmTypeButton>:

void RouserChangeAlarmTypeButton (void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	if(Application.rouserDefinition.alarmType==ONCE)
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <RouserChangeAlarmTypeButton+0x28>)
 8001b1e:	7fdb      	ldrb	r3, [r3, #31]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <RouserChangeAlarmTypeButton+0x14>
	{
		Application.rouserDefinition.alarmType=EVERY_DAY;
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <RouserChangeAlarmTypeButton+0x28>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	77da      	strb	r2, [r3, #31]
 8001b2a:	e002      	b.n	8001b32 <RouserChangeAlarmTypeButton+0x1a>
	}
	else
	{
		Application.rouserDefinition.alarmType=ONCE;
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <RouserChangeAlarmTypeButton+0x28>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	77da      	strb	r2, [r3, #31]
	}
	Application.rouserDefinition.isAlarmEnabled=false;
 8001b32:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <RouserChangeAlarmTypeButton+0x28>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	76da      	strb	r2, [r3, #27]
	RouserAlarmOnButton();
 8001b38:	f000 fa9a 	bl	8002070 <RouserAlarmOnButton>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000138 	.word	0x20000138

08001b44 <AlarmTimerDisableButton>:

void AlarmTimerDisableButton(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0


	if(Application.rouserDefinition.isSignalEnabled==true)
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b4a:	7f5b      	ldrb	r3, [r3, #29]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <AlarmTimerDisableButton+0x26>
	{
		if(Application.rouserDefinition.alarmType==ONCE)
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b52:	7fdb      	ldrb	r3, [r3, #31]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <AlarmTimerDisableButton+0x1a>
		{
			Application.rouserDefinition.isAlarmEnabled=false;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	76da      	strb	r2, [r3, #27]
		}

		Application.rouserDefinition.isSignalEnabled=false;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	775a      	strb	r2, [r3, #29]
		Application.rouserDefinition.isAlarmChecked=true;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	771a      	strb	r2, [r3, #28]
	}

	if(Application.timerDefinition.isSignalEnabled==true)
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b6c:	7c1b      	ldrb	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <AlarmTimerDisableButton+0x3a>
	{
		Application.timerDefinition.isSignalEnabled=false;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	741a      	strb	r2, [r3, #16]
		Application.timerDefinition.isTimerEnabled=false;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	73da      	strb	r2, [r3, #15]
	}

	MP3_Stop();
 8001b7e:	f004 fde3 	bl	8006748 <MP3_Stop>
	Application.volume=Application.saved_volume;
 8001b82:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b84:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8001b88:	4b02      	ldr	r3, [pc, #8]	@ (8001b94 <AlarmTimerDisableButton+0x50>)
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000138 	.word	0x20000138

08001b98 <SayTimeButton>:

void SayTimeButton(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	SayTime();
 8001b9c:	f004 fbc2 	bl	8006324 <SayTime>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <SetClockTimeButton>:

void SetClockTimeButton(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if(Application.addtionalFunctions!=SHOWN_SET)
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <SetClockTimeButton+0x48>)
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d01b      	beq.n	8001be8 <SetClockTimeButton+0x44>
	{
		Application.addtionalFunctions=SHOWN_SET;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	709a      	strb	r2, [r3, #2]
		Application.returnMode=Application.mode;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bbc:	705a      	strb	r2, [r3, #1]
		Application.mode=AADITIONAL_FUNCTIONS;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	701a      	strb	r2, [r3, #0]
		Application.additionalFunctionsTimer=3;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		DS3231_SetFullTime(Application.rouserDefinition.hours, Application.rouserDefinition.minutes, 0);
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bce:	7e1b      	ldrb	r3, [r3, #24]
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bd2:	7e51      	ldrb	r1, [r2, #25]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 fbcd 	bl	8007376 <DS3231_SetFullTime>
		Application.rouserDefinition.hours=0;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <SetClockTimeButton+0x48>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	761a      	strb	r2, [r3, #24]
		Application.rouserDefinition.minutes=0;
 8001be2:	4b02      	ldr	r3, [pc, #8]	@ (8001bec <SetClockTimeButton+0x48>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	765a      	strb	r2, [r3, #25]
	}
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000138 	.word	0x20000138

08001bf0 <CountDownButton>:

void CountDownButton(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
uint16_t trackNumber,a;
	if(Application.addtionalFunctions!=COUNT_DOWN)
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <CountDownButton+0x70>)
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d02c      	beq.n	8001c58 <CountDownButton+0x68>
	{
		Application.addtionalFunctions=COUNT_DOWN;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <CountDownButton+0x70>)
 8001c00:	2203      	movs	r2, #3
 8001c02:	709a      	strb	r2, [r3, #2]
		Application.returnMode=Application.mode;
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <CountDownButton+0x70>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <CountDownButton+0x70>)
 8001c0a:	705a      	strb	r2, [r3, #1]
		Application.mode=AADITIONAL_FUNCTIONS;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <CountDownButton+0x70>)
 8001c0e:	2206      	movs	r2, #6
 8001c10:	701a      	strb	r2, [r3, #0]
		a=Random(0, 1);
 8001c12:	2101      	movs	r1, #1
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 fb89 	bl	800232c <Random>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80bb      	strh	r3, [r7, #4]
		MP3_Stop();
 8001c1e:	f004 fd93 	bl	8006748 <MP3_Stop>
		HAL_Delay(500);
 8001c22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c26:	f006 fc23 	bl	8008470 <HAL_Delay>
		if(a==0)
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <CountDownButton+0x46>
			trackNumber=COUNT_DOWN_VARIANT_ONE;
 8001c30:	23a9      	movs	r3, #169	@ 0xa9
 8001c32:	80fb      	strh	r3, [r7, #6]
 8001c34:	e001      	b.n	8001c3a <CountDownButton+0x4a>
		else
		{
			trackNumber=COUNT_DOWN_VARIANT_TWO;
 8001c36:	23ac      	movs	r3, #172	@ 0xac
 8001c38:	80fb      	strh	r3, [r7, #6]
		}
		MP3_PlayTrack(trackNumber);
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fdff 	bl	8006840 <MP3_PlayTrack>
		while(MP3_Player.state!=MP3_IDLE)
 8001c42:	e001      	b.n	8001c48 <CountDownButton+0x58>
		{
			MP3_Task();
 8001c44:	f004 fb7c 	bl	8006340 <MP3_Task>
		while(MP3_Player.state!=MP3_IDLE)
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <CountDownButton+0x74>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <CountDownButton+0x54>
		}
		Application.additionalFunctionsTimer=11;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <CountDownButton+0x70>)
 8001c52:	220b      	movs	r2, #11
 8001c54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000138 	.word	0x20000138
 8001c64:	20000210 	.word	0x20000210

08001c68 <MP3_PlayNextTrack>:
void MP3_PlayNextTrack()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

uint16_t trackNumber;
	MP3_Stop();
 8001c6e:	f004 fd6b 	bl	8006748 <MP3_Stop>
	HAL_Delay(1000);
 8001c72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c76:	f006 fbfb 	bl	8008470 <HAL_Delay>
	Application.mp3_PlayerDefinition.prevTrack=MP3_Player.trackNumber;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <MP3_PlayNextTrack+0x34>)
 8001c7c:	885a      	ldrh	r2, [r3, #2]
 8001c7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <MP3_PlayNextTrack+0x38>)
 8001c80:	859a      	strh	r2, [r3, #44]	@ 0x2c
	trackNumber=GenarateTrack();
 8001c82:	f004 fc89 	bl	8006598 <GenarateTrack>
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	MP3_PlayTrack(trackNumber);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fdd7 	bl	8006840 <MP3_PlayTrack>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000210 	.word	0x20000210
 8001ca0:	20000138 	.word	0x20000138

08001ca4 <MP3_PlayPrevTrack>:

void MP3_PlayPrevTrack()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if(Application.mp3_PlayerDefinition.prevTrack!=0)
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MP3_PlayPrevTrack+0x2c>)
 8001caa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <MP3_PlayPrevTrack+0x28>
	{
		MP3_Stop();
 8001cb0:	f004 fd4a 	bl	8006748 <MP3_Stop>
		HAL_Delay(1000);
 8001cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cb8:	f006 fbda 	bl	8008470 <HAL_Delay>
		MP3_PlayTrack(Application.mp3_PlayerDefinition.prevTrack);
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <MP3_PlayPrevTrack+0x2c>)
 8001cbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fdbd 	bl	8006840 <MP3_PlayTrack>
		Application.mp3_PlayerDefinition.prevTrack=0;
 8001cc6:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <MP3_PlayPrevTrack+0x2c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000138 	.word	0x20000138

08001cd4 <ChangeMP3_PlayerAnimationButton>:

void ChangeMP3_PlayerAnimationButton(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

	if(Application.mp3_PlayerDefinition.animationVariant==CURRENT_TIME)
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <ChangeMP3_PlayerAnimationButton+0x30>)
 8001cda:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d104      	bne.n	8001cec <ChangeMP3_PlayerAnimationButton+0x18>
		Application.mp3_PlayerDefinition.animationVariant=RANDOM_DOTS;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <ChangeMP3_PlayerAnimationButton+0x30>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	else
		Application.mp3_PlayerDefinition.animationVariant++;
}
 8001cea:	e007      	b.n	8001cfc <ChangeMP3_PlayerAnimationButton+0x28>
		Application.mp3_PlayerDefinition.animationVariant++;
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <ChangeMP3_PlayerAnimationButton+0x30>)
 8001cee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <ChangeMP3_PlayerAnimationButton+0x30>)
 8001cf8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000138 	.word	0x20000138

08001d08 <IncreaseBrightness>:

void IncreaseBrightness(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	if(Application.intensivity<15)
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <IncreaseBrightness+0x28>)
 8001d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d12:	2b0e      	cmp	r3, #14
 8001d14:	d807      	bhi.n	8001d26 <IncreaseBrightness+0x1e>
	{
		Application.intensivity++;
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <IncreaseBrightness+0x28>)
 8001d18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <IncreaseBrightness+0x28>)
 8001d22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000138 	.word	0x20000138

08001d34 <DecreaseBrightness>:

void DecreaseBrightness(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	if(Application.intensivity>0)
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <DecreaseBrightness+0x28>)
 8001d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <DecreaseBrightness+0x1e>
	{
		Application.intensivity--;
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <DecreaseBrightness+0x28>)
 8001d44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <DecreaseBrightness+0x28>)
 8001d4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000138 	.word	0x20000138

08001d60 <IncreaseVolume>:

void IncreaseVolume(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
	if(Application.volume<30)
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <IncreaseVolume+0x28>)
 8001d66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d6a:	2b1d      	cmp	r3, #29
 8001d6c:	d807      	bhi.n	8001d7e <IncreaseVolume+0x1e>
	{
		Application.volume++;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <IncreaseVolume+0x28>)
 8001d70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <IncreaseVolume+0x28>)
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000138 	.word	0x20000138

08001d8c <DecreaseVolume>:

void DecreaseVolume(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
	if(Application.volume>0)
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <DecreaseVolume+0x28>)
 8001d92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <DecreaseVolume+0x1e>
	{
		Application.volume--;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <DecreaseVolume+0x28>)
 8001d9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <DecreaseVolume+0x28>)
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000138 	.word	0x20000138

08001db8 <EnterAditionalMode>:

void EnterAditionalMode(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	Application.returnMode=Application.mode;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dc2:	705a      	strb	r2, [r3, #1]
	Application.additionalFunctionsTimer=5;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dc6:	2205      	movs	r2, #5
 8001dc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	Application.mode=AADITIONAL_FUNCTIONS;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dce:	2206      	movs	r2, #6
 8001dd0:	701a      	strb	r2, [r3, #0]

	if((Application.keyCode==DECREASE_BRIGHTNESS_CONTINUOUSLY)||(Application.keyCode==INCREASE_BRIGHTNESS_CONTINUOUSLY))
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	2bcb      	cmp	r3, #203	@ 0xcb
 8001dd8:	d003      	beq.n	8001de2 <EnterAditionalMode+0x2a>
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001ddc:	78db      	ldrb	r3, [r3, #3]
 8001dde:	2bcc      	cmp	r3, #204	@ 0xcc
 8001de0:	d102      	bne.n	8001de8 <EnterAditionalMode+0x30>
	{
		Application.addtionalFunctions=SET_BRIGHTNESS;
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	709a      	strb	r2, [r3, #2]
	}

	if((Application.keyCode==DECREASE_VOLUME_CONTINUOUSLY)||(Application.keyCode==INCREASE_VOLUME_CONTINUOUSLY))
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dea:	78db      	ldrb	r3, [r3, #3]
 8001dec:	2bcd      	cmp	r3, #205	@ 0xcd
 8001dee:	d003      	beq.n	8001df8 <EnterAditionalMode+0x40>
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001df2:	78db      	ldrb	r3, [r3, #3]
 8001df4:	2bce      	cmp	r3, #206	@ 0xce
 8001df6:	d102      	bne.n	8001dfe <EnterAditionalMode+0x46>
	{
		Application.addtionalFunctions=SET_VOLUME;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	709a      	strb	r2, [r3, #2]
	}

	if(Application.keyCode==CHANGE_ALARM_TYPE_BUTTON)
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001e00:	78db      	ldrb	r3, [r3, #3]
 8001e02:	2b14      	cmp	r3, #20
 8001e04:	d102      	bne.n	8001e0c <EnterAditionalMode+0x54>
	{
		Application.addtionalFunctions=SHOWN_ALARM_TYPE;
 8001e06:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <EnterAditionalMode+0x5c>)
 8001e08:	2204      	movs	r2, #4
 8001e0a:	709a      	strb	r2, [r3, #2]
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000138 	.word	0x20000138

08001e18 <ChangeMode>:

void ChangeMode(Mode_t newMode)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
uint16_t seed;

	switch(newMode)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d834      	bhi.n	8001e94 <ChangeMode+0x7c>
 8001e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <ChangeMode+0x18>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e4f 	.word	0x08001e4f
 8001e38:	08001e55 	.word	0x08001e55
 8001e3c:	08001e5b 	.word	0x08001e5b
 8001e40:	08001e83 	.word	0x08001e83
 8001e44:	08001e95 	.word	0x08001e95
	{
		case CLOCK:
			MP3_Stop();
 8001e48:	f004 fc7e 	bl	8006748 <MP3_Stop>
		break;
 8001e4c:	e023      	b.n	8001e96 <ChangeMode+0x7e>

		case ROUSER:
			MP3_Stop();
 8001e4e:	f004 fc7b 	bl	8006748 <MP3_Stop>
		break;
 8001e52:	e020      	b.n	8001e96 <ChangeMode+0x7e>

		case TIMER:
			MP3_Stop();
 8001e54:	f004 fc78 	bl	8006748 <MP3_Stop>
		break;
 8001e58:	e01d      	b.n	8001e96 <ChangeMode+0x7e>

		case MP3_PLAYER:
			seed= getSeed();
 8001e5a:	f005 fb63 	bl	8007524 <getSeed>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	81fb      	strh	r3, [r7, #14]
			srand(seed);
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00a fe05 	bl	800ca74 <srand>
			Application.mp3_PlayerDefinition.prevTrack=0;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <ChangeMode+0x88>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
			MP3_Player.trackNumber=0;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <ChangeMode+0x8c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	805a      	strh	r2, [r3, #2]
			MP3_Player.isPaused=false;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <ChangeMode+0x8c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	71da      	strb	r2, [r3, #7]
			MP3_Stop();
 8001e7c:	f004 fc64 	bl	8006748 <MP3_Stop>
		break;
 8001e80:	e009      	b.n	8001e96 <ChangeMode+0x7e>

		case TETRIS:
		 MP3_Stop();
 8001e82:	f004 fc61 	bl	8006748 <MP3_Stop>
		 HAL_Delay(500);
 8001e86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e8a:	f006 faf1 	bl	8008470 <HAL_Delay>
		 StartGame();
 8001e8e:	f005 faeb 	bl	8007468 <StartGame>
		break;
 8001e92:	e000      	b.n	8001e96 <ChangeMode+0x7e>

		case AADITIONAL_FUNCTIONS:

		break;

		default: 	break;
 8001e94:	bf00      	nop
	}
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000138 	.word	0x20000138
 8001ea4:	20000210 	.word	0x20000210

08001ea8 <TimerOffButton>:

void TimerOffButton(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	if(Application.timerDefinition.isTimerEnabled==true)
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <TimerOffButton+0x1c>)
 8001eae:	7bdb      	ldrb	r3, [r3, #15]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <TimerOffButton+0x16>
	{
		Application.timerDefinition.isTimerEnabled=false;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <TimerOffButton+0x1c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	73da      	strb	r2, [r3, #15]
		AlarmTimerDisableButton();
 8001eba:	f7ff fe43 	bl	8001b44 <AlarmTimerDisableButton>
	}
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000138 	.word	0x20000138

08001ec8 <TimerOnButton>:

void TimerOnButton(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	if(Application.timerDefinition.isTimerEnabled==false)
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <TimerOnButton+0xa8>)
 8001ece:	7bdb      	ldrb	r3, [r3, #15]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d048      	beq.n	8001f6c <TimerOnButton+0xa4>
	{
		if(!((Application.timerDefinition.hours==0)&&(Application.timerDefinition.minutes==0)))
 8001eda:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <TimerOnButton+0xa8>)
 8001edc:	7b1b      	ldrb	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <TimerOnButton+0x22>
 8001ee2:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <TimerOnButton+0xa8>)
 8001ee4:	7b5b      	ldrb	r3, [r3, #13]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d040      	beq.n	8001f6c <TimerOnButton+0xa4>
		{
			MP3_Stop();
 8001eea:	f004 fc2d 	bl	8006748 <MP3_Stop>
			HAL_Delay(500);
 8001eee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ef2:	f006 fabd 	bl	8008470 <HAL_Delay>
			MP3_PlayTrack(TIMER_SET);
 8001ef6:	20af      	movs	r0, #175	@ 0xaf
 8001ef8:	f004 fca2 	bl	8006840 <MP3_PlayTrack>
			MP3_Player.state=MP3_BYSY;
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <TimerOnButton+0xac>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 8001f02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f06:	f006 fab3 	bl	8008470 <HAL_Delay>
			while(MP3_Player.state!=MP3_IDLE)
 8001f0a:	e001      	b.n	8001f10 <TimerOnButton+0x48>
			{
				MP3_Task();
 8001f0c:	f004 fa18 	bl	8006340 <MP3_Task>
			while(MP3_Player.state!=MP3_IDLE)
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <TimerOnButton+0xac>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <TimerOnButton+0x44>
			}
			HAL_Delay(250);
 8001f18:	20fa      	movs	r0, #250	@ 0xfa
 8001f1a:	f006 faa9 	bl	8008470 <HAL_Delay>
			MP3_PlayTrack(Application.timerDefinition.hours+HOURS_OFFSET);
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <TimerOnButton+0xa8>)
 8001f20:	7b1b      	ldrb	r3, [r3, #12]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fc8a 	bl	8006840 <MP3_PlayTrack>
			HAL_Delay(1500);
 8001f2c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001f30:	f006 fa9e 	bl	8008470 <HAL_Delay>
			MP3_PlayTrack(Application.timerDefinition.minutes+MINUTES_OFFSET);
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <TimerOnButton+0xa8>)
 8001f36:	7b5b      	ldrb	r3, [r3, #13]
 8001f38:	3319      	adds	r3, #25
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 fc7f 	bl	8006840 <MP3_PlayTrack>

			Application.timerDefinition.isTimerEnabled=true;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <TimerOnButton+0xa8>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	73da      	strb	r2, [r3, #15]
			Application.timerDefinition.remainder=Get_Timer_1_s()%60;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <TimerOnButton+0xb0>)
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <TimerOnButton+0xb4>)
 8001f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f52:	095a      	lsrs	r2, r3, #5
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	1aca      	subs	r2, r1, r3
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <TimerOnButton+0xa8>)
 8001f62:	74da      	strb	r2, [r3, #19]
			Application.timerDefinition.startTime=Get_Timer_1_s();
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <TimerOnButton+0xb0>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a01      	ldr	r2, [pc, #4]	@ (8001f70 <TimerOnButton+0xa8>)
 8001f6a:	6153      	str	r3, [r2, #20]
		}
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000138 	.word	0x20000138
 8001f74:	20000210 	.word	0x20000210
 8001f78:	2000012c 	.word	0x2000012c
 8001f7c:	88888889 	.word	0x88888889

08001f80 <IncreaseHoursButton>:

void IncreaseHoursButton(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	switch(Application.mode)
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d002      	beq.n	8001f92 <IncreaseHoursButton+0x12>
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d00f      	beq.n	8001fb0 <IncreaseHoursButton+0x30>
					Application.timerDefinition.hours++;
				}
			}
		break;

		default: break;
 8001f90:	e024      	b.n	8001fdc <IncreaseHoursButton+0x5c>
			if(Application.rouserDefinition.hours==23)
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001f94:	7e1b      	ldrb	r3, [r3, #24]
 8001f96:	2b17      	cmp	r3, #23
 8001f98:	d103      	bne.n	8001fa2 <IncreaseHoursButton+0x22>
				Application.rouserDefinition.hours=0;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	761a      	strb	r2, [r3, #24]
		break;
 8001fa0:	e01c      	b.n	8001fdc <IncreaseHoursButton+0x5c>
				Application.rouserDefinition.hours++;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fa4:	7e1b      	ldrb	r3, [r3, #24]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fac:	761a      	strb	r2, [r3, #24]
		break;
 8001fae:	e015      	b.n	8001fdc <IncreaseHoursButton+0x5c>
			if(Application.timerDefinition.isTimerEnabled==false)
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fb2:	7bdb      	ldrb	r3, [r3, #15]
 8001fb4:	f083 0301 	eor.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <IncreaseHoursButton+0x5a>
				if(Application.timerDefinition.hours==23)
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fc0:	7b1b      	ldrb	r3, [r3, #12]
 8001fc2:	2b17      	cmp	r3, #23
 8001fc4:	d103      	bne.n	8001fce <IncreaseHoursButton+0x4e>
					Application.timerDefinition.hours=0;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	731a      	strb	r2, [r3, #12]
		break;
 8001fcc:	e005      	b.n	8001fda <IncreaseHoursButton+0x5a>
					Application.timerDefinition.hours++;
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fd0:	7b1b      	ldrb	r3, [r3, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <IncreaseHoursButton+0x64>)
 8001fd8:	731a      	strb	r2, [r3, #12]
		break;
 8001fda:	bf00      	nop
	}
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000138 	.word	0x20000138

08001fe8 <IncreaseMinutesButton>:

void IncreaseMinutesButton(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	switch(Application.mode)
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <IncreaseMinutesButton+0x64>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d002      	beq.n	8001ffa <IncreaseMinutesButton+0x12>
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d00f      	beq.n	8002018 <IncreaseMinutesButton+0x30>
					Application.timerDefinition.minutes++;
				}
			}
		break;

		default: break;
 8001ff8:	e024      	b.n	8002044 <IncreaseMinutesButton+0x5c>
			if(Application.rouserDefinition.minutes==59)
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <IncreaseMinutesButton+0x64>)
 8001ffc:	7e5b      	ldrb	r3, [r3, #25]
 8001ffe:	2b3b      	cmp	r3, #59	@ 0x3b
 8002000:	d103      	bne.n	800200a <IncreaseMinutesButton+0x22>
				Application.rouserDefinition.minutes=0;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <IncreaseMinutesButton+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	765a      	strb	r2, [r3, #25]
		break;
 8002008:	e01c      	b.n	8002044 <IncreaseMinutesButton+0x5c>
				Application.rouserDefinition.minutes++;
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <IncreaseMinutesButton+0x64>)
 800200c:	7e5b      	ldrb	r3, [r3, #25]
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <IncreaseMinutesButton+0x64>)
 8002014:	765a      	strb	r2, [r3, #25]
		break;
 8002016:	e015      	b.n	8002044 <IncreaseMinutesButton+0x5c>
			if(Application.timerDefinition.isTimerEnabled==false)
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <IncreaseMinutesButton+0x64>)
 800201a:	7bdb      	ldrb	r3, [r3, #15]
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00d      	beq.n	8002042 <IncreaseMinutesButton+0x5a>
				if(Application.timerDefinition.minutes==59)
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <IncreaseMinutesButton+0x64>)
 8002028:	7b5b      	ldrb	r3, [r3, #13]
 800202a:	2b3b      	cmp	r3, #59	@ 0x3b
 800202c:	d103      	bne.n	8002036 <IncreaseMinutesButton+0x4e>
					Application.timerDefinition.minutes=0;
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <IncreaseMinutesButton+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	735a      	strb	r2, [r3, #13]
		break;
 8002034:	e005      	b.n	8002042 <IncreaseMinutesButton+0x5a>
					Application.timerDefinition.minutes++;
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <IncreaseMinutesButton+0x64>)
 8002038:	7b5b      	ldrb	r3, [r3, #13]
 800203a:	3301      	adds	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b03      	ldr	r3, [pc, #12]	@ (800204c <IncreaseMinutesButton+0x64>)
 8002040:	735a      	strb	r2, [r3, #13]
		break;
 8002042:	bf00      	nop
	}
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	20000138 	.word	0x20000138

08002050 <RouserAlarmOffButton>:

void RouserAlarmOffButton(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	if(Application.rouserDefinition.isAlarmEnabled==true)
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <RouserAlarmOffButton+0x1c>)
 8002056:	7edb      	ldrb	r3, [r3, #27]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <RouserAlarmOffButton+0x12>
	{
		Application.rouserDefinition.isAlarmEnabled=false;
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <RouserAlarmOffButton+0x1c>)
 800205e:	2200      	movs	r2, #0
 8002060:	76da      	strb	r2, [r3, #27]
	}
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000138 	.word	0x20000138

08002070 <RouserAlarmOnButton>:

void RouserAlarmOnButton(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	if(Application.rouserDefinition.isAlarmEnabled==false)
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002076:	7edb      	ldrb	r3, [r3, #27]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d04e      	beq.n	8002120 <RouserAlarmOnButton+0xb0>
	{
		Application.rouserDefinition.isAlarmEnabled=true;
 8002082:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002084:	2201      	movs	r2, #1
 8002086:	76da      	strb	r2, [r3, #27]
		MP3_Stop();
 8002088:	f004 fb5e 	bl	8006748 <MP3_Stop>
		HAL_Delay(500);
 800208c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002090:	f006 f9ee 	bl	8008470 <HAL_Delay>
		MP3_PlayTrack(ROUSER_SET);
 8002094:	20ae      	movs	r0, #174	@ 0xae
 8002096:	f004 fbd3 	bl	8006840 <MP3_PlayTrack>
		MP3_Player.state=MP3_BYSY;
 800209a:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <RouserAlarmOnButton+0xb8>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 80020a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020a4:	f006 f9e4 	bl	8008470 <HAL_Delay>
		while(MP3_Player.state!=MP3_IDLE)
 80020a8:	e001      	b.n	80020ae <RouserAlarmOnButton+0x3e>
		{
			MP3_Task();
 80020aa:	f004 f949 	bl	8006340 <MP3_Task>
		while(MP3_Player.state!=MP3_IDLE)
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <RouserAlarmOnButton+0xb8>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <RouserAlarmOnButton+0x3a>
		}
		HAL_Delay(250);
 80020b6:	20fa      	movs	r0, #250	@ 0xfa
 80020b8:	f006 f9da 	bl	8008470 <HAL_Delay>
		MP3_PlayTrack(Application.rouserDefinition.hours+HOURS_OFFSET);
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 80020be:	7e1b      	ldrb	r3, [r3, #24]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 fbbb 	bl	8006840 <MP3_PlayTrack>
		HAL_Delay(1500);
 80020ca:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80020ce:	f006 f9cf 	bl	8008470 <HAL_Delay>
		MP3_PlayTrack(Application.rouserDefinition.minutes+MINUTES_OFFSET);
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 80020d4:	7e5b      	ldrb	r3, [r3, #25]
 80020d6:	3319      	adds	r3, #25
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fbb0 	bl	8006840 <MP3_PlayTrack>
		HAL_Delay(1500);
 80020e0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80020e4:	f006 f9c4 	bl	8008470 <HAL_Delay>
		if(Application.rouserDefinition.alarmType==EVERY_DAY)
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 80020ea:	7fdb      	ldrb	r3, [r3, #31]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d103      	bne.n	80020f8 <RouserAlarmOnButton+0x88>
		{
			MP3_PlayTrack(ROUSER_EVERYDAY);
 80020f0:	20a5      	movs	r0, #165	@ 0xa5
 80020f2:	f004 fba5 	bl	8006840 <MP3_PlayTrack>
 80020f6:	e002      	b.n	80020fe <RouserAlarmOnButton+0x8e>
		}
		else
		{
			MP3_PlayTrack(ROUSER_ONCE);
 80020f8:	20a6      	movs	r0, #166	@ 0xa6
 80020fa:	f004 fba1 	bl	8006840 <MP3_PlayTrack>
		}
		Application.returnMode=Application.mode;
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002104:	705a      	strb	r2, [r3, #1]
		Application.additionalFunctionsTimer=3;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002108:	2203      	movs	r2, #3
 800210a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		Application.mode=AADITIONAL_FUNCTIONS;
 800210e:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002110:	2206      	movs	r2, #6
 8002112:	701a      	strb	r2, [r3, #0]
		Application.addtionalFunctions=SHOWN_ALARM_TYPE;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 8002116:	2204      	movs	r2, #4
 8002118:	709a      	strb	r2, [r3, #2]
		Application.rouserDefinition.isAlarmChecked=false;
 800211a:	4b02      	ldr	r3, [pc, #8]	@ (8002124 <RouserAlarmOnButton+0xb4>)
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
	}
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000138 	.word	0x20000138
 8002128:	20000210 	.word	0x20000210

0800212c <ChangeModeButton>:

void ChangeModeButton(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	if(Application.mode==TETRIS)
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <ChangeModeButton+0x30>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d103      	bne.n	8002140 <ChangeModeButton+0x14>
	{
		Application.mode=CLOCK;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <ChangeModeButton+0x30>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e005      	b.n	800214c <ChangeModeButton+0x20>
	}
	else
	{
		Application.mode++;
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <ChangeModeButton+0x30>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <ChangeModeButton+0x30>)
 800214a:	701a      	strb	r2, [r3, #0]
	}

	ChangeMode(Application.mode);
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <ChangeModeButton+0x30>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fe61 	bl	8001e18 <ChangeMode>
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000138 	.word	0x20000138

08002160 <AnimationButton>:

void AnimationButton(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
	switch(Application.mode)
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <AnimationButton+0x54>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d006      	beq.n	800217a <AnimationButton+0x1a>
 800216c:	2b04      	cmp	r3, #4
 800216e:	dc1c      	bgt.n	80021aa <AnimationButton+0x4a>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d002      	beq.n	800217a <AnimationButton+0x1a>
 8002174:	2b03      	cmp	r3, #3
 8002176:	d00c      	beq.n	8002192 <AnimationButton+0x32>
				Application.timerDefinition.isDotsBlinked=false;
			else
				Application.timerDefinition.isDotsBlinked=true;
		break;

		default: break;
 8002178:	e017      	b.n	80021aa <AnimationButton+0x4a>
			if(Application.clockDefinition.isDotsBlinked==true)
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <AnimationButton+0x54>)
 800217c:	7adb      	ldrb	r3, [r3, #11]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <AnimationButton+0x2a>
				Application.clockDefinition.isDotsBlinked=false;
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <AnimationButton+0x54>)
 8002184:	2200      	movs	r2, #0
 8002186:	72da      	strb	r2, [r3, #11]
		break;
 8002188:	e010      	b.n	80021ac <AnimationButton+0x4c>
				Application.clockDefinition.isDotsBlinked=true;
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <AnimationButton+0x54>)
 800218c:	2201      	movs	r2, #1
 800218e:	72da      	strb	r2, [r3, #11]
		break;
 8002190:	e00c      	b.n	80021ac <AnimationButton+0x4c>
			if(Application.timerDefinition.isDotsBlinked==true)
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <AnimationButton+0x54>)
 8002194:	7c9b      	ldrb	r3, [r3, #18]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <AnimationButton+0x42>
				Application.timerDefinition.isDotsBlinked=false;
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <AnimationButton+0x54>)
 800219c:	2200      	movs	r2, #0
 800219e:	749a      	strb	r2, [r3, #18]
		break;
 80021a0:	e004      	b.n	80021ac <AnimationButton+0x4c>
				Application.timerDefinition.isDotsBlinked=true;
 80021a2:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <AnimationButton+0x54>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	749a      	strb	r2, [r3, #18]
		break;
 80021a8:	e000      	b.n	80021ac <AnimationButton+0x4c>
		default: break;
 80021aa:	bf00      	nop
	}

}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000138 	.word	0x20000138

080021b8 <BorderButton>:

void BorderButton(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	switch(Application.mode)
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <BorderButton+0x78>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d82e      	bhi.n	8002224 <BorderButton+0x6c>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <BorderButton+0x14>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021f5 	.word	0x080021f5
 80021d4:	0800220d 	.word	0x0800220d
 80021d8:	080021dd 	.word	0x080021dd
	{
		case CLOCK:
		case MP3_PLAYER:
			if(Application.clockDefinition.isBorderEnabled==true)
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <BorderButton+0x78>)
 80021de:	7a9b      	ldrb	r3, [r3, #10]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <BorderButton+0x34>
				Application.clockDefinition.isBorderEnabled=false;
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <BorderButton+0x78>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	729a      	strb	r2, [r3, #10]
			else
				Application.clockDefinition.isBorderEnabled=true;
		break;
 80021ea:	e01c      	b.n	8002226 <BorderButton+0x6e>
				Application.clockDefinition.isBorderEnabled=true;
 80021ec:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <BorderButton+0x78>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	729a      	strb	r2, [r3, #10]
		break;
 80021f2:	e018      	b.n	8002226 <BorderButton+0x6e>

		case ROUSER:
			if(Application.rouserDefinition.isBorderEnabled==true)
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <BorderButton+0x78>)
 80021f6:	7f9b      	ldrb	r3, [r3, #30]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <BorderButton+0x4c>
				Application.rouserDefinition.isBorderEnabled=false;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <BorderButton+0x78>)
 80021fe:	2200      	movs	r2, #0
 8002200:	779a      	strb	r2, [r3, #30]
			else
				Application.rouserDefinition.isBorderEnabled=true;
		break;
 8002202:	e010      	b.n	8002226 <BorderButton+0x6e>
				Application.rouserDefinition.isBorderEnabled=true;
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <BorderButton+0x78>)
 8002206:	2201      	movs	r2, #1
 8002208:	779a      	strb	r2, [r3, #30]
		break;
 800220a:	e00c      	b.n	8002226 <BorderButton+0x6e>

		case TIMER:
			if(Application.timerDefinition.isBorderEnabled==true)
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <BorderButton+0x78>)
 800220e:	7c5b      	ldrb	r3, [r3, #17]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <BorderButton+0x64>
				Application.timerDefinition.isBorderEnabled=false;
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <BorderButton+0x78>)
 8002216:	2200      	movs	r2, #0
 8002218:	745a      	strb	r2, [r3, #17]
			else
				Application.timerDefinition.isBorderEnabled=true;
		break;
 800221a:	e004      	b.n	8002226 <BorderButton+0x6e>
				Application.timerDefinition.isBorderEnabled=true;
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <BorderButton+0x78>)
 800221e:	2201      	movs	r2, #1
 8002220:	745a      	strb	r2, [r3, #17]
		break;
 8002222:	e000      	b.n	8002226 <BorderButton+0x6e>

		default: break;
 8002224:	bf00      	nop
	}
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000138 	.word	0x20000138

08002234 <ClockChangeStyleButton>:

void ClockChangeStyleButton(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	Application.clockDefinition.clock_style++;
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <ClockChangeStyleButton+0x28>)
 800223a:	7a1b      	ldrb	r3, [r3, #8]
 800223c:	3301      	adds	r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <ClockChangeStyleButton+0x28>)
 8002242:	721a      	strb	r2, [r3, #8]
	if(Application.clockDefinition.clock_style>=4)
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <ClockChangeStyleButton+0x28>)
 8002246:	7a1b      	ldrb	r3, [r3, #8]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d902      	bls.n	8002252 <ClockChangeStyleButton+0x1e>
	{
		Application.clockDefinition.clock_style=0;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <ClockChangeStyleButton+0x28>)
 800224e:	2200      	movs	r2, #0
 8002250:	721a      	strb	r2, [r3, #8]
	}
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000138 	.word	0x20000138

08002260 <ChangeFontButton>:

void ChangeFontButton(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	switch(Application.mode)
 8002264:	4b24      	ldr	r3, [pc, #144]	@ (80022f8 <ChangeFontButton+0x98>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	2b04      	cmp	r3, #4
 800226c:	d83f      	bhi.n	80022ee <ChangeFontButton+0x8e>
 800226e:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <ChangeFontButton+0x14>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002289 	.word	0x08002289
 8002278:	080022a1 	.word	0x080022a1
 800227c:	080022b9 	.word	0x080022b9
 8002280:	08002289 	.word	0x08002289
 8002284:	080022d1 	.word	0x080022d1
	{
		case CLOCK:
		case MP3_PLAYER:
			if(Application.clockDefinition.font_style==NEOCLASSIC)
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <ChangeFontButton+0x98>)
 800228a:	7a5b      	ldrb	r3, [r3, #9]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d103      	bne.n	8002298 <ChangeFontButton+0x38>
			{
				Application.clockDefinition.font_style=CLASSIC;
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <ChangeFontButton+0x98>)
 8002292:	2200      	movs	r2, #0
 8002294:	725a      	strb	r2, [r3, #9]
			}
			else
			{
				Application.clockDefinition.font_style=NEOCLASSIC;
			}
		break;
 8002296:	e02b      	b.n	80022f0 <ChangeFontButton+0x90>
				Application.clockDefinition.font_style=NEOCLASSIC;
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <ChangeFontButton+0x98>)
 800229a:	2201      	movs	r2, #1
 800229c:	725a      	strb	r2, [r3, #9]
		break;
 800229e:	e027      	b.n	80022f0 <ChangeFontButton+0x90>

		case ROUSER:
			if(Application.rouserDefinition.font_style==NEOCLASSIC)
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <ChangeFontButton+0x98>)
 80022a2:	7e9b      	ldrb	r3, [r3, #26]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d103      	bne.n	80022b0 <ChangeFontButton+0x50>
			{
				Application.rouserDefinition.font_style=CLASSIC;
 80022a8:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <ChangeFontButton+0x98>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	769a      	strb	r2, [r3, #26]
			}
			else
			{
				Application.rouserDefinition.font_style=NEOCLASSIC;
			}
		break;
 80022ae:	e01f      	b.n	80022f0 <ChangeFontButton+0x90>
				Application.rouserDefinition.font_style=NEOCLASSIC;
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <ChangeFontButton+0x98>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	769a      	strb	r2, [r3, #26]
		break;
 80022b6:	e01b      	b.n	80022f0 <ChangeFontButton+0x90>

		case TIMER:
			if(Application.timerDefinition.font_style==NEOCLASSIC)
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <ChangeFontButton+0x98>)
 80022ba:	7b9b      	ldrb	r3, [r3, #14]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d103      	bne.n	80022c8 <ChangeFontButton+0x68>
			{
				Application.timerDefinition.font_style=CLASSIC;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <ChangeFontButton+0x98>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	739a      	strb	r2, [r3, #14]
			}
			else
			{
				Application.timerDefinition.font_style=NEOCLASSIC;
			}
		break;
 80022c6:	e013      	b.n	80022f0 <ChangeFontButton+0x90>
				Application.timerDefinition.font_style=NEOCLASSIC;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <ChangeFontButton+0x98>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	739a      	strb	r2, [r3, #14]
		break;
 80022ce:	e00f      	b.n	80022f0 <ChangeFontButton+0x90>

		case TETRIS:
			if(Application.tetrisDefinition.font_style==NEOCLASSIC)
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <ChangeFontButton+0x98>)
 80022d2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d104      	bne.n	80022e4 <ChangeFontButton+0x84>
			{
				Application.tetrisDefinition.font_style=CLASSIC;
 80022da:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <ChangeFontButton+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			}
			else
			{
				Application.tetrisDefinition.font_style=NEOCLASSIC;
			}
		break;
 80022e2:	e005      	b.n	80022f0 <ChangeFontButton+0x90>
				Application.tetrisDefinition.font_style=NEOCLASSIC;
 80022e4:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <ChangeFontButton+0x98>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		break;
 80022ec:	e000      	b.n	80022f0 <ChangeFontButton+0x90>

		default: break;
 80022ee:	bf00      	nop
	}
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000138 	.word	0x20000138

080022fc <UpdateTime>:


void UpdateTime(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	DS3231_Collect_data(&RTC_data);
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <UpdateTime+0x28>)
 8002302:	f004 fe6e 	bl	8006fe2 <DS3231_Collect_data>
	Application.clockDefinition.hours=RTC_data.Hours;
 8002306:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <UpdateTime+0x28>)
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <UpdateTime+0x2c>)
 800230c:	715a      	strb	r2, [r3, #5]
	Application.clockDefinition.minutes=RTC_data.Minutes;
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <UpdateTime+0x28>)
 8002310:	785a      	ldrb	r2, [r3, #1]
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <UpdateTime+0x2c>)
 8002314:	719a      	strb	r2, [r3, #6]
	Application.clockDefinition.seconds=RTC_data.Secounds;
 8002316:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <UpdateTime+0x28>)
 8002318:	789a      	ldrb	r2, [r3, #2]
 800231a:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <UpdateTime+0x2c>)
 800231c:	71da      	strb	r2, [r3, #7]
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200001a0 	.word	0x200001a0
 8002328:	20000138 	.word	0x20000138

0800232c <Random>:


uint16_t Random(uint16_t minValue, uint16_t maxValue)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	460a      	mov	r2, r1
 8002336:	80fb      	strh	r3, [r7, #6]
 8002338:	4613      	mov	r3, r2
 800233a:	80bb      	strh	r3, [r7, #4]
int16_t result;
int16_t buf;

	buf=maxValue-minValue+1;
 800233c:	88ba      	ldrh	r2, [r7, #4]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	b29b      	uxth	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	81fb      	strh	r3, [r7, #14]
	result=rand();
 800234a:	f00a fbc1 	bl	800cad0 <rand>
 800234e:	4603      	mov	r3, r0
 8002350:	81bb      	strh	r3, [r7, #12]
	result=abs(result);
 8002352:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	425b      	neglt	r3, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	81bb      	strh	r3, [r7, #12]
	result=(result%buf)+minValue;
 8002360:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002364:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002368:	fb93 f1f2 	sdiv	r1, r3, r2
 800236c:	fb01 f202 	mul.w	r2, r1, r2
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	b29a      	uxth	r2, r3
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4413      	add	r3, r2
 8002378:	b29b      	uxth	r3, r3
 800237a:	81bb      	strh	r3, [r7, #12]

	return (uint16_t)result;
 800237c:	89bb      	ldrh	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <ButtonsTask>:
 */
#include "Buttons.h"
#include "../App/Application.h"

void ButtonsTask(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
uint8_t i=0, pressedButtons=0;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	2300      	movs	r3, #0
 8002394:	71bb      	strb	r3, [r7, #6]
	ReadButtons();
 8002396:	f000 fb27 	bl	80029e8 <ReadButtons>
	for(i=0;i<BTN_COUNT;i++)
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	e0a5      	b.n	80024ec <ButtonsTask+0x164>
	{
		if(Buttons.level[i]==LOW)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <ButtonsTask+0x17c>)
 80023a4:	4413      	add	r3, r2
 80023a6:	7e1b      	ldrb	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d14d      	bne.n	8002448 <ButtonsTask+0xc0>
		{
			pressedButtons++;
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	3301      	adds	r3, #1
 80023b0:	71bb      	strb	r3, [r7, #6]
			switch(Buttons.state[i])
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	4a53      	ldr	r2, [pc, #332]	@ (8002504 <ButtonsTask+0x17c>)
 80023b6:	4413      	add	r3, r2
 80023b8:	7f9b      	ldrb	r3, [r3, #30]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d026      	beq.n	800240c <ButtonsTask+0x84>
 80023be:	2b02      	cmp	r3, #2
 80023c0:	f300 8086 	bgt.w	80024d0 <ButtonsTask+0x148>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <ButtonsTask+0x46>
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d00c      	beq.n	80023e6 <ButtonsTask+0x5e>
						Buttons.action[i]=NO_ACTION;
						Buttons.clickCounter[i]++;
					}
				break;

				default: break;
 80023cc:	e080      	b.n	80024d0 <ButtonsTask+0x148>
					if(Buttons.BtnPressCounter[i]>DEBOUNCE_TIMEOUT)
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <ButtonsTask+0x17c>)
 80023d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d97c      	bls.n	80024d4 <ButtonsTask+0x14c>
						Buttons.state[i]=DOWN;
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4a49      	ldr	r2, [pc, #292]	@ (8002504 <ButtonsTask+0x17c>)
 80023de:	4413      	add	r3, r2
 80023e0:	2201      	movs	r2, #1
 80023e2:	779a      	strb	r2, [r3, #30]
				break;
 80023e4:	e076      	b.n	80024d4 <ButtonsTask+0x14c>
					if(Buttons.BtnPressCounter[i]>PRESS_TIMEOUT_3S)
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	4a46      	ldr	r2, [pc, #280]	@ (8002504 <ButtonsTask+0x17c>)
 80023ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ee:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80023f2:	d971      	bls.n	80024d8 <ButtonsTask+0x150>
						Buttons.state[i]=PRESS;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	4a43      	ldr	r2, [pc, #268]	@ (8002504 <ButtonsTask+0x17c>)
 80023f8:	4413      	add	r3, r2
 80023fa:	2204      	movs	r2, #4
 80023fc:	779a      	strb	r2, [r3, #30]
						Buttons.action[i]=LONG;
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4a40      	ldr	r2, [pc, #256]	@ (8002504 <ButtonsTask+0x17c>)
 8002402:	4413      	add	r3, r2
 8002404:	2202      	movs	r2, #2
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				break;
 800240a:	e065      	b.n	80024d8 <ButtonsTask+0x150>
					if(Buttons.BtnPressCounter[i]>DEBOUNCE_TIMEOUT)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	4a3d      	ldr	r2, [pc, #244]	@ (8002504 <ButtonsTask+0x17c>)
 8002410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d961      	bls.n	80024dc <ButtonsTask+0x154>
						Buttons.state[i]=COUNT;
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4a3a      	ldr	r2, [pc, #232]	@ (8002504 <ButtonsTask+0x17c>)
 800241c:	4413      	add	r3, r2
 800241e:	2203      	movs	r2, #3
 8002420:	779a      	strb	r2, [r3, #30]
						Buttons.action[i]=NO_ACTION;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4a37      	ldr	r2, [pc, #220]	@ (8002504 <ButtonsTask+0x17c>)
 8002426:	4413      	add	r3, r2
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
						Buttons.clickCounter[i]++;
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4a34      	ldr	r2, [pc, #208]	@ (8002504 <ButtonsTask+0x17c>)
 8002432:	441a      	add	r2, r3
 8002434:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8002438:	3201      	adds	r2, #1
 800243a:	b2d1      	uxtb	r1, r2
 800243c:	4a31      	ldr	r2, [pc, #196]	@ (8002504 <ButtonsTask+0x17c>)
 800243e:	4413      	add	r3, r2
 8002440:	460a      	mov	r2, r1
 8002442:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				break;
 8002446:	e049      	b.n	80024dc <ButtonsTask+0x154>
			}
		}
		else
		{
			switch(Buttons.state[i])
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4a2e      	ldr	r2, [pc, #184]	@ (8002504 <ButtonsTask+0x17c>)
 800244c:	4413      	add	r3, r2
 800244e:	7f9b      	ldrb	r3, [r3, #30]
 8002450:	3b01      	subs	r3, #1
 8002452:	2b03      	cmp	r3, #3
 8002454:	d844      	bhi.n	80024e0 <ButtonsTask+0x158>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <ButtonsTask+0xd4>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002479 	.word	0x08002479
 8002464:	080024a1 	.word	0x080024a1
 8002468:	080024b9 	.word	0x080024b9
			{
				case DOWN:
						Buttons.state[i]=UP;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <ButtonsTask+0x17c>)
 8002470:	4413      	add	r3, r2
 8002472:	2202      	movs	r2, #2
 8002474:	779a      	strb	r2, [r3, #30]
				break;
 8002476:	e036      	b.n	80024e6 <ButtonsTask+0x15e>

				case UP:
					if(Buttons.BtnIdleCounter[i]>CLICK_TIMEOUT)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <ButtonsTask+0x17c>)
 800247c:	3304      	adds	r3, #4
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	2b23      	cmp	r3, #35	@ 0x23
 8002486:	d92d      	bls.n	80024e4 <ButtonsTask+0x15c>
					{
						Buttons.state[i]=INIT;
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <ButtonsTask+0x17c>)
 800248c:	4413      	add	r3, r2
 800248e:	2200      	movs	r2, #0
 8002490:	779a      	strb	r2, [r3, #30]
						Buttons.action[i]=CLICK;
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <ButtonsTask+0x17c>)
 8002496:	4413      	add	r3, r2
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					}
				break;
 800249e:	e021      	b.n	80024e4 <ButtonsTask+0x15c>

				case COUNT:
					Buttons.state[i]=UP;
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <ButtonsTask+0x17c>)
 80024a4:	4413      	add	r3, r2
 80024a6:	2202      	movs	r2, #2
 80024a8:	779a      	strb	r2, [r3, #30]
					Buttons.action[i]=NO_ACTION;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <ButtonsTask+0x17c>)
 80024ae:	4413      	add	r3, r2
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				break;
 80024b6:	e016      	b.n	80024e6 <ButtonsTask+0x15e>

				case PRESS:
					Buttons.state[i]=INIT;
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <ButtonsTask+0x17c>)
 80024bc:	4413      	add	r3, r2
 80024be:	2200      	movs	r2, #0
 80024c0:	779a      	strb	r2, [r3, #30]
					Buttons.action[i]=NO_ACTION;
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <ButtonsTask+0x17c>)
 80024c6:	4413      	add	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				break;
 80024ce:	e00a      	b.n	80024e6 <ButtonsTask+0x15e>
				default: break;
 80024d0:	bf00      	nop
 80024d2:	e008      	b.n	80024e6 <ButtonsTask+0x15e>
				break;
 80024d4:	bf00      	nop
 80024d6:	e006      	b.n	80024e6 <ButtonsTask+0x15e>
				break;
 80024d8:	bf00      	nop
 80024da:	e004      	b.n	80024e6 <ButtonsTask+0x15e>
				break;
 80024dc:	bf00      	nop
 80024de:	e002      	b.n	80024e6 <ButtonsTask+0x15e>

				default: break;
 80024e0:	bf00      	nop
 80024e2:	e000      	b.n	80024e6 <ButtonsTask+0x15e>
				break;
 80024e4:	bf00      	nop
	for(i=0;i<BTN_COUNT;i++)
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	3301      	adds	r3, #1
 80024ea:	71fb      	strb	r3, [r7, #7]
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	f67f af56 	bls.w	80023a0 <ButtonsTask+0x18>
			}

		}
	}
	ProcessButtons(pressedButtons);
 80024f4:	79bb      	ldrb	r3, [r7, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f806 	bl	8002508 <ProcessButtons>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000170 	.word	0x20000170

08002508 <ProcessButtons>:

void ProcessButtons(uint8_t count)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
Key_Code_t result=NONE_BUTTON;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
uint8_t i;
bool isManyClicks=false;
 8002516:	2300      	movs	r3, #0
 8002518:	737b      	strb	r3, [r7, #13]

	if(count==0)
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 81cc 	bne.w	80028ba <ProcessButtons+0x3b2>
	{
		for(i=0;i<BTN_COUNT;i++)
 8002522:	2300      	movs	r3, #0
 8002524:	73bb      	strb	r3, [r7, #14]
 8002526:	e00c      	b.n	8002542 <ProcessButtons+0x3a>
		{
			if(Buttons.clickCounter[i]!=0)
 8002528:	7bbb      	ldrb	r3, [r7, #14]
 800252a:	4ab8      	ldr	r2, [pc, #736]	@ (800280c <ProcessButtons+0x304>)
 800252c:	4413      	add	r3, r2
 800252e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <ProcessButtons+0x34>
			{
				isManyClicks=true;
 8002536:	2301      	movs	r3, #1
 8002538:	737b      	strb	r3, [r7, #13]
				break;
 800253a:	e005      	b.n	8002548 <ProcessButtons+0x40>
		for(i=0;i<BTN_COUNT;i++)
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	3301      	adds	r3, #1
 8002540:	73bb      	strb	r3, [r7, #14]
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d9ef      	bls.n	8002528 <ProcessButtons+0x20>
			}
		}

		if(isManyClicks==false)		//одиночный клик
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80e8 	beq.w	8002726 <ProcessButtons+0x21e>
		{
			if(Buttons.action[LEFT_BUTTON]==CLICK)
 8002556:	4bad      	ldr	r3, [pc, #692]	@ (800280c <ProcessButtons+0x304>)
 8002558:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800255c:	2b01      	cmp	r3, #1
 800255e:	d12a      	bne.n	80025b6 <ProcessButtons+0xae>
			{
				switch(Application.mode)
 8002560:	4bab      	ldr	r3, [pc, #684]	@ (8002810 <ProcessButtons+0x308>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	2b05      	cmp	r3, #5
 8002568:	d820      	bhi.n	80025ac <ProcessButtons+0xa4>
 800256a:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <ProcessButtons+0x68>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002589 	.word	0x08002589
 8002574:	0800258f 	.word	0x0800258f
 8002578:	08002595 	.word	0x08002595
 800257c:	0800259b 	.word	0x0800259b
 8002580:	080025a1 	.word	0x080025a1
 8002584:	080025a7 	.word	0x080025a7
				{
					case CLOCK:			result=CLOCK_CHANGE_FONT_BUTTON;				break;
 8002588:	2302      	movs	r3, #2
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e013      	b.n	80025b6 <ProcessButtons+0xae>
					case ROUSER:		result=ROUSER_INCREASE_HOURS_BUTTON;			break;
 800258e:	230e      	movs	r3, #14
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e010      	b.n	80025b6 <ProcessButtons+0xae>
					case TIMER: 		result=TIMER_INCREASE_HOURS_BUTTON;				break;
 8002594:	2317      	movs	r3, #23
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e00d      	b.n	80025b6 <ProcessButtons+0xae>
					case MP3_PLAYER: 	result=CHANGE_MP3_PLAYER_ANIMATION_BUTTON;		break;
 800259a:	231f      	movs	r3, #31
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e00a      	b.n	80025b6 <ProcessButtons+0xae>
					case TETRIS: 		result=CHANGE_START_SPEED_BUTTON;				break;
 80025a0:	2328      	movs	r3, #40	@ 0x28
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e007      	b.n	80025b6 <ProcessButtons+0xae>
					case AADITIONAL_FUNCTIONS:result=DECREASE_BRIGHTNESS_BUTTON;		break;
 80025a6:	230a      	movs	r3, #10
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e004      	b.n	80025b6 <ProcessButtons+0xae>
					default:			result=NONE_BUTTON;	KeysReset();				break;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	f000 fb66 	bl	8002c80 <KeysReset>
 80025b4:	bf00      	nop
				}
			}

			if(Buttons.action[RIGHT_BUTTON]==CLICK)
 80025b6:	4b95      	ldr	r3, [pc, #596]	@ (800280c <ProcessButtons+0x304>)
 80025b8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d127      	bne.n	8002610 <ProcessButtons+0x108>
			{
				switch(Application.mode)
 80025c0:	4b93      	ldr	r3, [pc, #588]	@ (8002810 <ProcessButtons+0x308>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d81d      	bhi.n	8002606 <ProcessButtons+0xfe>
 80025ca:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <ProcessButtons+0xc8>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025ef 	.word	0x080025ef
 80025d8:	080025f5 	.word	0x080025f5
 80025dc:	080025fb 	.word	0x080025fb
 80025e0:	08002607 	.word	0x08002607
 80025e4:	08002601 	.word	0x08002601
				{
					case CLOCK:	result=CLOCK_CHANGE_STYLE_BUTTON;		break;
 80025e8:	2303      	movs	r3, #3
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e010      	b.n	8002610 <ProcessButtons+0x108>
					case ROUSER:result=ROUSER_INCREASE_MINUTES_BUTTON;	break;
 80025ee:	230f      	movs	r3, #15
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e00d      	b.n	8002610 <ProcessButtons+0x108>
					case TIMER: result=TIMER_INCREASE_MINUTES_BUTTON;	break;
 80025f4:	2318      	movs	r3, #24
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	e00a      	b.n	8002610 <ProcessButtons+0x108>
					case MP3_PLAYER: result=CLOCK_CHANGE_STYLE_BUTTON;	break;
 80025fa:	2303      	movs	r3, #3
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e007      	b.n	8002610 <ProcessButtons+0x108>
					case AADITIONAL_FUNCTIONS:result=INCREASE_BRIGHTNESS_BUTTON;break;
 8002600:	230b      	movs	r3, #11
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e004      	b.n	8002610 <ProcessButtons+0x108>
					default:	result=NONE_BUTTON;	KeysReset();		break;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	f000 fb39 	bl	8002c80 <KeysReset>
 800260e:	bf00      	nop
				}

			}

			if(Buttons.action[UP_BUTTON]==CLICK)
 8002610:	4b7e      	ldr	r3, [pc, #504]	@ (800280c <ProcessButtons+0x304>)
 8002612:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002616:	2b01      	cmp	r3, #1
 8002618:	d128      	bne.n	800266c <ProcessButtons+0x164>
			{
				switch(Application.mode)
 800261a:	4b7d      	ldr	r3, [pc, #500]	@ (8002810 <ProcessButtons+0x308>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	2b05      	cmp	r3, #5
 8002622:	d81e      	bhi.n	8002662 <ProcessButtons+0x15a>
 8002624:	a201      	add	r2, pc, #4	@ (adr r2, 800262c <ProcessButtons+0x124>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	08002645 	.word	0x08002645
 8002630:	0800264b 	.word	0x0800264b
 8002634:	08002651 	.word	0x08002651
 8002638:	08002657 	.word	0x08002657
 800263c:	08002663 	.word	0x08002663
 8002640:	0800265d 	.word	0x0800265d
				{
					case CLOCK:			result=SAY_TIME_BUTTON;			break;
 8002644:	2304      	movs	r3, #4
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e010      	b.n	800266c <ProcessButtons+0x164>
					case ROUSER:		result=ALARM_ON_BUTTON;			break;
 800264a:	2313      	movs	r3, #19
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e00d      	b.n	800266c <ProcessButtons+0x164>
					case TIMER: 		result=TIMER_ON_BUTTON;			break;
 8002650:	231d      	movs	r3, #29
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e00a      	b.n	800266c <ProcessButtons+0x164>
					case MP3_PLAYER: 	result=NEXT_TRECK_BUTTON;		break;
 8002656:	2320      	movs	r3, #32
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e007      	b.n	800266c <ProcessButtons+0x164>
					case AADITIONAL_FUNCTIONS:result=INCREASE_VOLUME_BUTTON;break;
 800265c:	230d      	movs	r3, #13
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e004      	b.n	800266c <ProcessButtons+0x164>
					default:	result=NONE_BUTTON;	KeysReset();		break;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	f000 fb0b 	bl	8002c80 <KeysReset>
 800266a:	bf00      	nop
				}
			}

			if(Buttons.action[DOWN_BUTTON]==CLICK)
 800266c:	4b67      	ldr	r3, [pc, #412]	@ (800280c <ProcessButtons+0x304>)
 800266e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002672:	2b01      	cmp	r3, #1
 8002674:	d128      	bne.n	80026c8 <ProcessButtons+0x1c0>
			{
				switch(Application.mode)
 8002676:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <ProcessButtons+0x308>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	2b05      	cmp	r3, #5
 800267e:	d81e      	bhi.n	80026be <ProcessButtons+0x1b6>
 8002680:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <ProcessButtons+0x180>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026a7 	.word	0x080026a7
 8002690:	080026ad 	.word	0x080026ad
 8002694:	080026b3 	.word	0x080026b3
 8002698:	080026bf 	.word	0x080026bf
 800269c:	080026b9 	.word	0x080026b9
				{
					case CLOCK:			result=CLOCK_SAY_DATE_BUTTON;		break;
 80026a0:	232a      	movs	r3, #42	@ 0x2a
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e010      	b.n	80026c8 <ProcessButtons+0x1c0>
					case ROUSER:		result=ALARM_OFF_BUTTON;			break;
 80026a6:	2312      	movs	r3, #18
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e00d      	b.n	80026c8 <ProcessButtons+0x1c0>
					case TIMER: 		result=TIMER_OFF_BUTTON;			break;
 80026ac:	231c      	movs	r3, #28
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e00a      	b.n	80026c8 <ProcessButtons+0x1c0>
					case MP3_PLAYER: 	result=PREV_TRECK_BUTTON;			break;
 80026b2:	2321      	movs	r3, #33	@ 0x21
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e007      	b.n	80026c8 <ProcessButtons+0x1c0>
					case AADITIONAL_FUNCTIONS:result=DECREASE_VOLUME_BUTTON;break;
 80026b8:	230c      	movs	r3, #12
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e004      	b.n	80026c8 <ProcessButtons+0x1c0>
					default:			result=NONE_BUTTON;	KeysReset();	break;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	f000 fadd 	bl	8002c80 <KeysReset>
 80026c6:	bf00      	nop
				}
			}

			if(Buttons.action[MENU_BUTTON]==CLICK)
 80026c8:	4b50      	ldr	r3, [pc, #320]	@ (800280c <ProcessButtons+0x304>)
 80026ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10c      	bne.n	80026ec <ProcessButtons+0x1e4>
			{
				switch(Application.mode)
 80026d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002810 <ProcessButtons+0x308>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d802      	bhi.n	80026e2 <ProcessButtons+0x1da>
					case CLOCK:
					case ROUSER:
					case TIMER:
					case MP3_PLAYER:
					case TETRIS:
						result=CHANGE_MODE_BUTTON;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
					break;
 80026e0:	e004      	b.n	80026ec <ProcessButtons+0x1e4>
					default:			result=NONE_BUTTON;	KeysReset();	break;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	f000 facb 	bl	8002c80 <KeysReset>
 80026ea:	bf00      	nop
				}
			}

			if(Buttons.action[JOESTICK_BUTTON]==CLICK)
 80026ec:	4b47      	ldr	r3, [pc, #284]	@ (800280c <ProcessButtons+0x304>)
 80026ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 80e1 	bne.w	80028ba <ProcessButtons+0x3b2>
			{
				switch(Application.mode)
 80026f8:	4b45      	ldr	r3, [pc, #276]	@ (8002810 <ProcessButtons+0x308>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	dc02      	bgt.n	8002706 <ProcessButtons+0x1fe>
 8002700:	2b00      	cmp	r3, #0
 8002702:	dc03      	bgt.n	800270c <ProcessButtons+0x204>
 8002704:	e00a      	b.n	800271c <ProcessButtons+0x214>
 8002706:	2b05      	cmp	r3, #5
 8002708:	d005      	beq.n	8002716 <ProcessButtons+0x20e>
 800270a:	e007      	b.n	800271c <ProcessButtons+0x214>
				{
					case CLOCK:
					case ROUSER:
					case TIMER:
					case MP3_PLAYER:
						result=NONE_BUTTON;	KeysReset();
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	f000 fab6 	bl	8002c80 <KeysReset>
					break;
 8002714:	e0d1      	b.n	80028ba <ProcessButtons+0x3b2>

					case TETRIS:
						result=FAST_FALL_BUTTON;
 8002716:	2326      	movs	r3, #38	@ 0x26
 8002718:	73fb      	strb	r3, [r7, #15]
					break;
 800271a:	e0ce      	b.n	80028ba <ProcessButtons+0x3b2>

					default:			result=NONE_BUTTON;	KeysReset();	break;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	f000 faae 	bl	8002c80 <KeysReset>
 8002724:	e0c9      	b.n	80028ba <ProcessButtons+0x3b2>
			}

		}
		else	//двойной клик
		{
			if(Buttons.action[UP_BUTTON]==CLICK)
 8002726:	4b39      	ldr	r3, [pc, #228]	@ (800280c <ProcessButtons+0x304>)
 8002728:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800272c:	2b01      	cmp	r3, #1
 800272e:	d120      	bne.n	8002772 <ProcessButtons+0x26a>
			{
				switch(Application.mode)
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <ProcessButtons+0x308>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	2b03      	cmp	r3, #3
 8002738:	d816      	bhi.n	8002768 <ProcessButtons+0x260>
 800273a:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <ProcessButtons+0x238>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002757 	.word	0x08002757
 8002748:	0800275d 	.word	0x0800275d
 800274c:	08002763 	.word	0x08002763
				{
					case CLOCK:		 result=CLOCK_ANIMATION_BUTTON;			break;
 8002750:	2307      	movs	r3, #7
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e00d      	b.n	8002772 <ProcessButtons+0x26a>
					case ROUSER:	 result=CHANGE_ALARM_TYPE_BUTTON; 		break;
 8002756:	2314      	movs	r3, #20
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e00a      	b.n	8002772 <ProcessButtons+0x26a>
					case TIMER: 	 result=TIMER_ANIMATION_BUTTON;			break;
 800275c:	231a      	movs	r3, #26
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e007      	b.n	8002772 <ProcessButtons+0x26a>
					case MP3_PLAYER: result=CLOCK_ANIMATION_BUTTON;		break;
 8002762:	2307      	movs	r3, #7
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e004      	b.n	8002772 <ProcessButtons+0x26a>
					default:		 result=NONE_BUTTON; KeysReset();		break;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	f000 fa88 	bl	8002c80 <KeysReset>
 8002770:	bf00      	nop
				}
			}

			if(Buttons.action[DOWN_BUTTON]==CLICK)
 8002772:	4b26      	ldr	r3, [pc, #152]	@ (800280c <ProcessButtons+0x304>)
 8002774:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002778:	2b01      	cmp	r3, #1
 800277a:	d120      	bne.n	80027be <ProcessButtons+0x2b6>
			{
				switch(Application.mode)
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <ProcessButtons+0x308>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	2b03      	cmp	r3, #3
 8002784:	d816      	bhi.n	80027b4 <ProcessButtons+0x2ac>
 8002786:	a201      	add	r2, pc, #4	@ (adr r2, 800278c <ProcessButtons+0x284>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	0800279d 	.word	0x0800279d
 8002790:	080027a3 	.word	0x080027a3
 8002794:	080027a9 	.word	0x080027a9
 8002798:	080027af 	.word	0x080027af
				{
					case CLOCK:	result=CLOCK_BORDER_BUTTON;				break;
 800279c:	2308      	movs	r3, #8
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e00d      	b.n	80027be <ProcessButtons+0x2b6>
					case ROUSER:result=ROUSER_BORDER_BUTTON;			break;
 80027a2:	2311      	movs	r3, #17
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e00a      	b.n	80027be <ProcessButtons+0x2b6>
					case TIMER: result=TIMER_BORDER_BUTTON;				break;
 80027a8:	231b      	movs	r3, #27
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e007      	b.n	80027be <ProcessButtons+0x2b6>
					case MP3_PLAYER: result=CLOCK_BORDER_BUTTON;		break;
 80027ae:	2308      	movs	r3, #8
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e004      	b.n	80027be <ProcessButtons+0x2b6>
					default:	result=NONE_BUTTON;	 KeysReset();		break;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	f000 fa62 	bl	8002c80 <KeysReset>
 80027bc:	bf00      	nop
				}
			}

			if(Buttons.action[LEFT_BUTTON]==CLICK)
 80027be:	4b13      	ldr	r3, [pc, #76]	@ (800280c <ProcessButtons+0x304>)
 80027c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d12a      	bne.n	800281e <ProcessButtons+0x316>
			{
				switch(Application.mode)
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <ProcessButtons+0x308>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d820      	bhi.n	8002814 <ProcessButtons+0x30c>
 80027d2:	a201      	add	r2, pc, #4	@ (adr r2, 80027d8 <ProcessButtons+0x2d0>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027ed 	.word	0x080027ed
 80027dc:	080027f3 	.word	0x080027f3
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	080027ff 	.word	0x080027ff
 80027e8:	08002805 	.word	0x08002805
				{
					case CLOCK:		 result=COUNT_DOWN_BUTTON;				break;
 80027ec:	2305      	movs	r3, #5
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e015      	b.n	800281e <ProcessButtons+0x316>
					case ROUSER:	 result=ROUSER_CHANGE_FONT_BUTTON;		break;
 80027f2:	2310      	movs	r3, #16
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e012      	b.n	800281e <ProcessButtons+0x316>
					case TIMER: 	 result=TIMER_CHANGE_FONT_BUTTON;		break;
 80027f8:	2319      	movs	r3, #25
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e00f      	b.n	800281e <ProcessButtons+0x316>
					case MP3_PLAYER: result=CLOCK_CHANGE_FONT_BUTTON;		break;
 80027fe:	2302      	movs	r3, #2
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e00c      	b.n	800281e <ProcessButtons+0x316>
					case TETRIS: 	 result=TETRIS_CHANGE_FONT_BUTTON;		break;
 8002804:	2325      	movs	r3, #37	@ 0x25
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	e009      	b.n	800281e <ProcessButtons+0x316>
 800280a:	bf00      	nop
 800280c:	20000170 	.word	0x20000170
 8002810:	20000138 	.word	0x20000138
					default:	result=NONE_BUTTON;	KeysReset();			break;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	f000 fa32 	bl	8002c80 <KeysReset>
 800281c:	bf00      	nop
				}
			}

			if(Buttons.action[RIGHT_BUTTON]==CLICK)
 800281e:	4b70      	ldr	r3, [pc, #448]	@ (80029e0 <ProcessButtons+0x4d8>)
 8002820:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10b      	bne.n	8002840 <ProcessButtons+0x338>
			{
				switch(Application.mode)
 8002828:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <ProcessButtons+0x4dc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d102      	bne.n	8002836 <ProcessButtons+0x32e>
				{
					case CLOCK:	result=CLOCK_SWOWN_DATE_BUTTON;				break;
 8002830:	2329      	movs	r3, #41	@ 0x29
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e004      	b.n	8002840 <ProcessButtons+0x338>
					default:	result=NONE_BUTTON;		KeysReset();		break;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	f000 fa21 	bl	8002c80 <KeysReset>
 800283e:	bf00      	nop
				}
			}

			if(Buttons.action[MENU_BUTTON]==CLICK)
 8002840:	4b67      	ldr	r3, [pc, #412]	@ (80029e0 <ProcessButtons+0x4d8>)
 8002842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002846:	2b01      	cmp	r3, #1
 8002848:	d126      	bne.n	8002898 <ProcessButtons+0x390>
			{
				switch(Application.mode)
 800284a:	4b66      	ldr	r3, [pc, #408]	@ (80029e4 <ProcessButtons+0x4dc>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	2b04      	cmp	r3, #4
 8002852:	d81c      	bhi.n	800288e <ProcessButtons+0x386>
 8002854:	a201      	add	r2, pc, #4	@ (adr r2, 800285c <ProcessButtons+0x354>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002871 	.word	0x08002871
 8002860:	08002877 	.word	0x08002877
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002883 	.word	0x08002883
 800286c:	08002889 	.word	0x08002889
				{
					case CLOCK:			result=AUTO_BRIGHTNESS_BUTTON;			break;
 8002870:	2306      	movs	r3, #6
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e010      	b.n	8002898 <ProcessButtons+0x390>
					case ROUSER:		result=RETURN_TO_CLOCK_MODE_BUTTON;		break;
 8002876:	2315      	movs	r3, #21
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e00d      	b.n	8002898 <ProcessButtons+0x390>
					case TIMER: 		result=RETURN_TO_CLOCK_MODE_BUTTON;		break;
 800287c:	2315      	movs	r3, #21
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e00a      	b.n	8002898 <ProcessButtons+0x390>
					case MP3_PLAYER:	result=PAUSE_PLAY_BUTTON;				break;
 8002882:	2322      	movs	r3, #34	@ 0x22
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e007      	b.n	8002898 <ProcessButtons+0x390>
					case TETRIS:		result=CHANGE_TETRIS_MELODY_BUTTON;		break;
 8002888:	2323      	movs	r3, #35	@ 0x23
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e004      	b.n	8002898 <ProcessButtons+0x390>
					default:	result=NONE_BUTTON;		KeysReset();	break;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	f000 f9f5 	bl	8002c80 <KeysReset>
 8002896:	bf00      	nop
				}
			}

			if(Buttons.action[JOESTICK_BUTTON]==CLICK)
 8002898:	4b51      	ldr	r3, [pc, #324]	@ (80029e0 <ProcessButtons+0x4d8>)
 800289a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d10b      	bne.n	80028ba <ProcessButtons+0x3b2>
			{
				switch(Application.mode)
 80028a2:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <ProcessButtons+0x4dc>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d102      	bne.n	80028b0 <ProcessButtons+0x3a8>
				{
					case TETRIS:		result=RESTART_GAME_BUTTON;		break;
 80028aa:	2327      	movs	r3, #39	@ 0x27
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e004      	b.n	80028ba <ProcessButtons+0x3b2>
					default:	result=NONE_BUTTON;		KeysReset();	break;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	f000 f9e4 	bl	8002c80 <KeysReset>
 80028b8:	bf00      	nop

		}
	}


	if(count==1)
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d177      	bne.n	80029b0 <ProcessButtons+0x4a8>
	{
		if(Buttons.action[MENU_BUTTON]==LONG)
 80028c0:	4b47      	ldr	r3, [pc, #284]	@ (80029e0 <ProcessButtons+0x4d8>)
 80028c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d126      	bne.n	8002918 <ProcessButtons+0x410>
		{
			switch(Application.mode)
 80028ca:	4b46      	ldr	r3, [pc, #280]	@ (80029e4 <ProcessButtons+0x4dc>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d81c      	bhi.n	800290e <ProcessButtons+0x406>
 80028d4:	a201      	add	r2, pc, #4	@ (adr r2, 80028dc <ProcessButtons+0x3d4>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	080028f1 	.word	0x080028f1
 80028e0:	080028f7 	.word	0x080028f7
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002903 	.word	0x08002903
 80028ec:	08002909 	.word	0x08002909
			{
				case CLOCK:			result=ALARM_TIMER_DISABLE_BUTTON;				break;
 80028f0:	2309      	movs	r3, #9
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e010      	b.n	8002918 <ProcessButtons+0x410>
				case ROUSER:		result=SET_CLOCK_TIME_BUTTON;					break;
 80028f6:	2316      	movs	r3, #22
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e00d      	b.n	8002918 <ProcessButtons+0x410>
				case TIMER: 		result=TIMER_ALARM_OFF_BUTTON;					break;
 80028fc:	231e      	movs	r3, #30
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e00a      	b.n	8002918 <ProcessButtons+0x410>
				case MP3_PLAYER:	result=RETURN_TO_CLOCK_MODE_BUTTON;				break;
 8002902:	2315      	movs	r3, #21
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e007      	b.n	8002918 <ProcessButtons+0x410>
				case TETRIS:		result=ENABLE_DISABLE_TETRIS_MELODY_BUTTON;		break;
 8002908:	2324      	movs	r3, #36	@ 0x24
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e004      	b.n	8002918 <ProcessButtons+0x410>
				default:			result=NONE_BUTTON; KeysReset();				break;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	f000 f9b5 	bl	8002c80 <KeysReset>
 8002916:	bf00      	nop
			}
		}

		if(Buttons.action[DOWN_BUTTON]==LONG)
 8002918:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <ProcessButtons+0x4d8>)
 800291a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800291e:	2b02      	cmp	r3, #2
 8002920:	d102      	bne.n	8002928 <ProcessButtons+0x420>
		{
			switch(Application.mode)
			{
				default:	result=DECREASE_VOLUME_CONTINUOUSLY;	 	break;
 8002922:	23cd      	movs	r3, #205	@ 0xcd
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	bf00      	nop
			}
		}

		if(Buttons.action[LEFT_BUTTON]==LONG)
 8002928:	4b2d      	ldr	r3, [pc, #180]	@ (80029e0 <ProcessButtons+0x4d8>)
 800292a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800292e:	2b02      	cmp	r3, #2
 8002930:	d118      	bne.n	8002964 <ProcessButtons+0x45c>
		{
			switch(Application.mode)
 8002932:	4b2c      	ldr	r3, [pc, #176]	@ (80029e4 <ProcessButtons+0x4dc>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b06      	cmp	r3, #6
 8002938:	dc0f      	bgt.n	800295a <ProcessButtons+0x452>
 800293a:	2b04      	cmp	r3, #4
 800293c:	da07      	bge.n	800294e <ProcessButtons+0x446>
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <ProcessButtons+0x446>
 8002942:	2b00      	cmp	r3, #0
 8002944:	dd09      	ble.n	800295a <ProcessButtons+0x452>
 8002946:	3b02      	subs	r3, #2
 8002948:	2b01      	cmp	r3, #1
 800294a:	d806      	bhi.n	800295a <ProcessButtons+0x452>
 800294c:	e002      	b.n	8002954 <ProcessButtons+0x44c>
			{
				case CLOCK:
				case MP3_PLAYER:
				case TETRIS:
				case AADITIONAL_FUNCTIONS:
					result=DECREASE_BRIGHTNESS_CONTINUOUSLY;
 800294e:	23cb      	movs	r3, #203	@ 0xcb
 8002950:	73fb      	strb	r3, [r7, #15]
				break;
 8002952:	e007      	b.n	8002964 <ProcessButtons+0x45c>

				case ROUSER:
				case TIMER:
					result=INCREASE_HOURS_CONTINUOUSLY;
 8002954:	23c9      	movs	r3, #201	@ 0xc9
 8002956:	73fb      	strb	r3, [r7, #15]
				break;
 8002958:	e004      	b.n	8002964 <ProcessButtons+0x45c>

				default:	result=NONE_BUTTON;	KeysReset();		break;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	f000 f98f 	bl	8002c80 <KeysReset>
 8002962:	bf00      	nop
			}
		}

		if(Buttons.action[RIGHT_BUTTON]==LONG)
 8002964:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <ProcessButtons+0x4d8>)
 8002966:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800296a:	2b02      	cmp	r3, #2
 800296c:	d118      	bne.n	80029a0 <ProcessButtons+0x498>
		{
			switch(Application.mode)
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <ProcessButtons+0x4dc>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b06      	cmp	r3, #6
 8002974:	dc0f      	bgt.n	8002996 <ProcessButtons+0x48e>
 8002976:	2b04      	cmp	r3, #4
 8002978:	da07      	bge.n	800298a <ProcessButtons+0x482>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <ProcessButtons+0x482>
 800297e:	2b00      	cmp	r3, #0
 8002980:	dd09      	ble.n	8002996 <ProcessButtons+0x48e>
 8002982:	3b02      	subs	r3, #2
 8002984:	2b01      	cmp	r3, #1
 8002986:	d806      	bhi.n	8002996 <ProcessButtons+0x48e>
 8002988:	e002      	b.n	8002990 <ProcessButtons+0x488>
			{
				case CLOCK:
				case MP3_PLAYER:
				case TETRIS:
				case AADITIONAL_FUNCTIONS:
					result=INCREASE_BRIGHTNESS_CONTINUOUSLY;
 800298a:	23cc      	movs	r3, #204	@ 0xcc
 800298c:	73fb      	strb	r3, [r7, #15]
				break;
 800298e:	e007      	b.n	80029a0 <ProcessButtons+0x498>

				case ROUSER:
				case TIMER:
					result=INCREASE_MINUTES_CONTINUOUSLY;
 8002990:	23ca      	movs	r3, #202	@ 0xca
 8002992:	73fb      	strb	r3, [r7, #15]
				break;
 8002994:	e004      	b.n	80029a0 <ProcessButtons+0x498>
				default:	result=NONE_BUTTON;	KeysReset();		break;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	f000 f971 	bl	8002c80 <KeysReset>
 800299e:	bf00      	nop
			}
		}

		if(Buttons.action[UP_BUTTON]==LONG)
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <ProcessButtons+0x4d8>)
 80029a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d102      	bne.n	80029b0 <ProcessButtons+0x4a8>
		{
			switch(Application.mode)
			{
				default:	result=INCREASE_VOLUME_CONTINUOUSLY;		break;
 80029aa:	23ce      	movs	r3, #206	@ 0xce
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	bf00      	nop
			}
		}
	}

	if(count==0)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d108      	bne.n	80029c8 <ProcessButtons+0x4c0>
	{
		switch(Application.keyCode)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <ProcessButtons+0x4dc>)
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	3bc9      	subs	r3, #201	@ 0xc9
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d802      	bhi.n	80029c6 <ProcessButtons+0x4be>
			case DECREASE_BRIGHTNESS_CONTINUOUSLY:
			case DECREASE_VOLUME_CONTINUOUSLY:	
			case INCREASE_VOLUME_CONTINUOUSLY:	
			case INCREASE_HOURS_CONTINUOUSLY:		
			case INCREASE_MINUTES_CONTINUOUSLY:	
				Application.keyCode=NONE_BUTTON;
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <ProcessButtons+0x4dc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	70da      	strb	r2, [r3, #3]
			default: break;
 80029c6:	bf00      	nop
		}
	}

	if(result!=NONE_BUTTON)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <ProcessButtons+0x4d0>
	{
		Application.keyCode=result;
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <ProcessButtons+0x4dc>)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	70d3      	strb	r3, [r2, #3]
		KeysReset();
 80029d4:	f000 f954 	bl	8002c80 <KeysReset>
	}

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000170 	.word	0x20000170
 80029e4:	20000138 	.word	0x20000138

080029e8 <ReadButtons>:

void ReadButtons(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0)
 80029ec:	2120      	movs	r1, #32
 80029ee:	4885      	ldr	r0, [pc, #532]	@ (8002c04 <ReadButtons+0x21c>)
 80029f0:	f006 fcae 	bl	8009350 <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d112      	bne.n	8002a20 <ReadButtons+0x38>
	{
		if(Buttons.BtnPressCounter[LEFT_BUTTON]<COUNTER_LIMIT)
 80029fa:	4b83      	ldr	r3, [pc, #524]	@ (8002c08 <ReadButtons+0x220>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d805      	bhi.n	8002a12 <ReadButtons+0x2a>
			Buttons.BtnPressCounter[LEFT_BUTTON]++;
 8002a06:	4b80      	ldr	r3, [pc, #512]	@ (8002c08 <ReadButtons+0x220>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c08 <ReadButtons+0x220>)
 8002a10:	801a      	strh	r2, [r3, #0]
		Buttons.level[LEFT_BUTTON]=LOW;
 8002a12:	4b7d      	ldr	r3, [pc, #500]	@ (8002c08 <ReadButtons+0x220>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	761a      	strb	r2, [r3, #24]
		Buttons.BtnIdleCounter[LEFT_BUTTON]=0;
 8002a18:	4b7b      	ldr	r3, [pc, #492]	@ (8002c08 <ReadButtons+0x220>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	819a      	strh	r2, [r3, #12]
 8002a1e:	e011      	b.n	8002a44 <ReadButtons+0x5c>
	}
	else
	{
		if(Buttons.BtnIdleCounter[LEFT_BUTTON]<COUNTER_LIMIT)
 8002a20:	4b79      	ldr	r3, [pc, #484]	@ (8002c08 <ReadButtons+0x220>)
 8002a22:	899b      	ldrh	r3, [r3, #12]
 8002a24:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d805      	bhi.n	8002a38 <ReadButtons+0x50>
			Buttons.BtnIdleCounter[LEFT_BUTTON]++;
 8002a2c:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <ReadButtons+0x220>)
 8002a2e:	899b      	ldrh	r3, [r3, #12]
 8002a30:	3301      	adds	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	4b74      	ldr	r3, [pc, #464]	@ (8002c08 <ReadButtons+0x220>)
 8002a36:	819a      	strh	r2, [r3, #12]
		Buttons.level[LEFT_BUTTON]=HIGHT;
 8002a38:	4b73      	ldr	r3, [pc, #460]	@ (8002c08 <ReadButtons+0x220>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	761a      	strb	r2, [r3, #24]
		Buttons.BtnPressCounter[LEFT_BUTTON]=0;
 8002a3e:	4b72      	ldr	r3, [pc, #456]	@ (8002c08 <ReadButtons+0x220>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	801a      	strh	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==0)
 8002a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a48:	4870      	ldr	r0, [pc, #448]	@ (8002c0c <ReadButtons+0x224>)
 8002a4a:	f006 fc81 	bl	8009350 <HAL_GPIO_ReadPin>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d112      	bne.n	8002a7a <ReadButtons+0x92>
	{
		if(Buttons.BtnPressCounter[UP_BUTTON]<COUNTER_LIMIT)
 8002a54:	4b6c      	ldr	r3, [pc, #432]	@ (8002c08 <ReadButtons+0x220>)
 8002a56:	885b      	ldrh	r3, [r3, #2]
 8002a58:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d805      	bhi.n	8002a6c <ReadButtons+0x84>
			Buttons.BtnPressCounter[UP_BUTTON]++;
 8002a60:	4b69      	ldr	r3, [pc, #420]	@ (8002c08 <ReadButtons+0x220>)
 8002a62:	885b      	ldrh	r3, [r3, #2]
 8002a64:	3301      	adds	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b67      	ldr	r3, [pc, #412]	@ (8002c08 <ReadButtons+0x220>)
 8002a6a:	805a      	strh	r2, [r3, #2]
		Buttons.level[UP_BUTTON]=LOW;
 8002a6c:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <ReadButtons+0x220>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	765a      	strb	r2, [r3, #25]
		Buttons.BtnIdleCounter[UP_BUTTON]=0;
 8002a72:	4b65      	ldr	r3, [pc, #404]	@ (8002c08 <ReadButtons+0x220>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	81da      	strh	r2, [r3, #14]
 8002a78:	e011      	b.n	8002a9e <ReadButtons+0xb6>
	}
	else
	{
		if(Buttons.BtnIdleCounter[UP_BUTTON]<COUNTER_LIMIT)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	@ (8002c08 <ReadButtons+0x220>)
 8002a7c:	89db      	ldrh	r3, [r3, #14]
 8002a7e:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d805      	bhi.n	8002a92 <ReadButtons+0xaa>
			Buttons.BtnIdleCounter[UP_BUTTON]++;
 8002a86:	4b60      	ldr	r3, [pc, #384]	@ (8002c08 <ReadButtons+0x220>)
 8002a88:	89db      	ldrh	r3, [r3, #14]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002c08 <ReadButtons+0x220>)
 8002a90:	81da      	strh	r2, [r3, #14]
		Buttons.level[UP_BUTTON]=HIGHT;
 8002a92:	4b5d      	ldr	r3, [pc, #372]	@ (8002c08 <ReadButtons+0x220>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	765a      	strb	r2, [r3, #25]
		Buttons.BtnPressCounter[UP_BUTTON]=0;
 8002a98:	4b5b      	ldr	r3, [pc, #364]	@ (8002c08 <ReadButtons+0x220>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	805a      	strh	r2, [r3, #2]
	}

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==0)
 8002a9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aa2:	485a      	ldr	r0, [pc, #360]	@ (8002c0c <ReadButtons+0x224>)
 8002aa4:	f006 fc54 	bl	8009350 <HAL_GPIO_ReadPin>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d112      	bne.n	8002ad4 <ReadButtons+0xec>
	{
		if(Buttons.BtnPressCounter[RIGHT_BUTTON]<COUNTER_LIMIT)
 8002aae:	4b56      	ldr	r3, [pc, #344]	@ (8002c08 <ReadButtons+0x220>)
 8002ab0:	889b      	ldrh	r3, [r3, #4]
 8002ab2:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d805      	bhi.n	8002ac6 <ReadButtons+0xde>
			Buttons.BtnPressCounter[RIGHT_BUTTON]++;
 8002aba:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <ReadButtons+0x220>)
 8002abc:	889b      	ldrh	r3, [r3, #4]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b51      	ldr	r3, [pc, #324]	@ (8002c08 <ReadButtons+0x220>)
 8002ac4:	809a      	strh	r2, [r3, #4]
		Buttons.level[RIGHT_BUTTON]=LOW;
 8002ac6:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <ReadButtons+0x220>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	769a      	strb	r2, [r3, #26]
		Buttons.BtnIdleCounter[RIGHT_BUTTON]=0;
 8002acc:	4b4e      	ldr	r3, [pc, #312]	@ (8002c08 <ReadButtons+0x220>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	821a      	strh	r2, [r3, #16]
 8002ad2:	e011      	b.n	8002af8 <ReadButtons+0x110>
	}
	else
	{
		if(Buttons.BtnIdleCounter[RIGHT_BUTTON]<COUNTER_LIMIT)
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c08 <ReadButtons+0x220>)
 8002ad6:	8a1b      	ldrh	r3, [r3, #16]
 8002ad8:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d805      	bhi.n	8002aec <ReadButtons+0x104>
			Buttons.BtnIdleCounter[RIGHT_BUTTON]++;
 8002ae0:	4b49      	ldr	r3, [pc, #292]	@ (8002c08 <ReadButtons+0x220>)
 8002ae2:	8a1b      	ldrh	r3, [r3, #16]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <ReadButtons+0x220>)
 8002aea:	821a      	strh	r2, [r3, #16]
		Buttons.level[RIGHT_BUTTON]=HIGHT;
 8002aec:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <ReadButtons+0x220>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	769a      	strb	r2, [r3, #26]
		Buttons.BtnPressCounter[RIGHT_BUTTON]=0;
 8002af2:	4b45      	ldr	r3, [pc, #276]	@ (8002c08 <ReadButtons+0x220>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	809a      	strh	r2, [r3, #4]
	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)
 8002af8:	2108      	movs	r1, #8
 8002afa:	4842      	ldr	r0, [pc, #264]	@ (8002c04 <ReadButtons+0x21c>)
 8002afc:	f006 fc28 	bl	8009350 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d112      	bne.n	8002b2c <ReadButtons+0x144>
	{
		if(Buttons.BtnPressCounter[DOWN_BUTTON]<COUNTER_LIMIT)
 8002b06:	4b40      	ldr	r3, [pc, #256]	@ (8002c08 <ReadButtons+0x220>)
 8002b08:	88db      	ldrh	r3, [r3, #6]
 8002b0a:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d805      	bhi.n	8002b1e <ReadButtons+0x136>
			Buttons.BtnPressCounter[DOWN_BUTTON]++;
 8002b12:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <ReadButtons+0x220>)
 8002b14:	88db      	ldrh	r3, [r3, #6]
 8002b16:	3301      	adds	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <ReadButtons+0x220>)
 8002b1c:	80da      	strh	r2, [r3, #6]
		Buttons.level[DOWN_BUTTON]=LOW;
 8002b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c08 <ReadButtons+0x220>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	76da      	strb	r2, [r3, #27]
		Buttons.BtnIdleCounter[DOWN_BUTTON]=0;
 8002b24:	4b38      	ldr	r3, [pc, #224]	@ (8002c08 <ReadButtons+0x220>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	825a      	strh	r2, [r3, #18]
 8002b2a:	e011      	b.n	8002b50 <ReadButtons+0x168>
	}
	else
	{
		if(Buttons.BtnIdleCounter[DOWN_BUTTON]<COUNTER_LIMIT)
 8002b2c:	4b36      	ldr	r3, [pc, #216]	@ (8002c08 <ReadButtons+0x220>)
 8002b2e:	8a5b      	ldrh	r3, [r3, #18]
 8002b30:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d805      	bhi.n	8002b44 <ReadButtons+0x15c>
			Buttons.BtnIdleCounter[DOWN_BUTTON]++;
 8002b38:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <ReadButtons+0x220>)
 8002b3a:	8a5b      	ldrh	r3, [r3, #18]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	4b31      	ldr	r3, [pc, #196]	@ (8002c08 <ReadButtons+0x220>)
 8002b42:	825a      	strh	r2, [r3, #18]
		Buttons.level[DOWN_BUTTON]=HIGHT;
 8002b44:	4b30      	ldr	r3, [pc, #192]	@ (8002c08 <ReadButtons+0x220>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	76da      	strb	r2, [r3, #27]
		Buttons.BtnPressCounter[DOWN_BUTTON]=0;
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <ReadButtons+0x220>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	80da      	strh	r2, [r3, #6]
	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)
 8002b50:	2110      	movs	r1, #16
 8002b52:	482c      	ldr	r0, [pc, #176]	@ (8002c04 <ReadButtons+0x21c>)
 8002b54:	f006 fbfc 	bl	8009350 <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d112      	bne.n	8002b84 <ReadButtons+0x19c>
	{
		if(Buttons.BtnPressCounter[MENU_BUTTON]<COUNTER_LIMIT)
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <ReadButtons+0x220>)
 8002b60:	891b      	ldrh	r3, [r3, #8]
 8002b62:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d805      	bhi.n	8002b76 <ReadButtons+0x18e>
			Buttons.BtnPressCounter[MENU_BUTTON]++;
 8002b6a:	4b27      	ldr	r3, [pc, #156]	@ (8002c08 <ReadButtons+0x220>)
 8002b6c:	891b      	ldrh	r3, [r3, #8]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <ReadButtons+0x220>)
 8002b74:	811a      	strh	r2, [r3, #8]
		Buttons.level[MENU_BUTTON]=LOW;
 8002b76:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <ReadButtons+0x220>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
		Buttons.BtnIdleCounter[MENU_BUTTON]=0;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <ReadButtons+0x220>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	829a      	strh	r2, [r3, #20]
 8002b82:	e011      	b.n	8002ba8 <ReadButtons+0x1c0>
	}
	else
	{
		if(Buttons.BtnIdleCounter[MENU_BUTTON]<COUNTER_LIMIT)
 8002b84:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <ReadButtons+0x220>)
 8002b86:	8a9b      	ldrh	r3, [r3, #20]
 8002b88:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d805      	bhi.n	8002b9c <ReadButtons+0x1b4>
			Buttons.BtnIdleCounter[MENU_BUTTON]++;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <ReadButtons+0x220>)
 8002b92:	8a9b      	ldrh	r3, [r3, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <ReadButtons+0x220>)
 8002b9a:	829a      	strh	r2, [r3, #20]
		Buttons.level[MENU_BUTTON]=HIGHT;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <ReadButtons+0x220>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	771a      	strb	r2, [r3, #28]
		Buttons.BtnPressCounter[MENU_BUTTON]=0;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <ReadButtons+0x220>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	811a      	strh	r2, [r3, #8]
	}

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)==0)
 8002ba8:	2108      	movs	r1, #8
 8002baa:	4818      	ldr	r0, [pc, #96]	@ (8002c0c <ReadButtons+0x224>)
 8002bac:	f006 fbd0 	bl	8009350 <HAL_GPIO_ReadPin>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d112      	bne.n	8002bdc <ReadButtons+0x1f4>
	{
		if(Buttons.BtnPressCounter[JOESTICK_BUTTON]<COUNTER_LIMIT)
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <ReadButtons+0x220>)
 8002bb8:	895b      	ldrh	r3, [r3, #10]
 8002bba:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d805      	bhi.n	8002bce <ReadButtons+0x1e6>
			Buttons.BtnPressCounter[JOESTICK_BUTTON]++;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <ReadButtons+0x220>)
 8002bc4:	895b      	ldrh	r3, [r3, #10]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <ReadButtons+0x220>)
 8002bcc:	815a      	strh	r2, [r3, #10]
		Buttons.level[JOESTICK_BUTTON]=LOW;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <ReadButtons+0x220>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	775a      	strb	r2, [r3, #29]
		Buttons.BtnIdleCounter[JOESTICK_BUTTON]=0;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <ReadButtons+0x220>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	82da      	strh	r2, [r3, #22]
		if(Buttons.BtnIdleCounter[JOESTICK_BUTTON]<COUNTER_LIMIT)
			Buttons.BtnIdleCounter[JOESTICK_BUTTON]++;
		Buttons.level[JOESTICK_BUTTON]=HIGHT;
		Buttons.BtnPressCounter[JOESTICK_BUTTON]=0;
	}
}
 8002bda:	e011      	b.n	8002c00 <ReadButtons+0x218>
		if(Buttons.BtnIdleCounter[JOESTICK_BUTTON]<COUNTER_LIMIT)
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <ReadButtons+0x220>)
 8002bde:	8adb      	ldrh	r3, [r3, #22]
 8002be0:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d805      	bhi.n	8002bf4 <ReadButtons+0x20c>
			Buttons.BtnIdleCounter[JOESTICK_BUTTON]++;
 8002be8:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <ReadButtons+0x220>)
 8002bea:	8adb      	ldrh	r3, [r3, #22]
 8002bec:	3301      	adds	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <ReadButtons+0x220>)
 8002bf2:	82da      	strh	r2, [r3, #22]
		Buttons.level[JOESTICK_BUTTON]=HIGHT;
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <ReadButtons+0x220>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	775a      	strb	r2, [r3, #29]
		Buttons.BtnPressCounter[JOESTICK_BUTTON]=0;
 8002bfa:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <ReadButtons+0x220>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	815a      	strh	r2, [r3, #10]
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40010c00 	.word	0x40010c00
 8002c08:	20000170 	.word	0x20000170
 8002c0c:	40010800 	.word	0x40010800

08002c10 <ProcessJoestick>:

void ProcessJoestick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
joestick_command_t result=NONE_ACTION;
 8002c16:	2300      	movs	r3, #0
 8002c18:	71fb      	strb	r3, [r7, #7]

	if((Joestick.ADC_Data_X>=0)&&(Joestick.ADC_Data_X<150))
 8002c1a:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	2b95      	cmp	r3, #149	@ 0x95
 8002c20:	d801      	bhi.n	8002c26 <ProcessJoestick+0x16>
		result=LEFT_ACTION;
 8002c22:	2303      	movs	r3, #3
 8002c24:	71fb      	strb	r3, [r7, #7]
	if((Joestick.ADC_Data_X>3900)&&(Joestick.ADC_Data_X<4095))
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d907      	bls.n	8002c42 <ProcessJoestick+0x32>
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d801      	bhi.n	8002c42 <ProcessJoestick+0x32>
		result=RIGHT_ACTION;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	71fb      	strb	r3, [r7, #7]
	if((Joestick.ADC_Data_Y>=0)&&(Joestick.ADC_Data_Y<150))
 8002c42:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c44:	885b      	ldrh	r3, [r3, #2]
 8002c46:	2b95      	cmp	r3, #149	@ 0x95
 8002c48:	d801      	bhi.n	8002c4e <ProcessJoestick+0x3e>
		result=UP_ACTION;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	71fb      	strb	r3, [r7, #7]
	if((Joestick.ADC_Data_Y>3900)&&(Joestick.ADC_Data_Y<4095))
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c50:	885b      	ldrh	r3, [r3, #2]
 8002c52:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d907      	bls.n	8002c6a <ProcessJoestick+0x5a>
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c5c:	885b      	ldrh	r3, [r3, #2]
 8002c5e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d801      	bhi.n	8002c6a <ProcessJoestick+0x5a>
		result=DOWN_ACTION;
 8002c66:	2302      	movs	r3, #2
 8002c68:	71fb      	strb	r3, [r7, #7]
		}
	}
	*/

	//if(!((result==NONE_ACTION)&&(Joestick.command!=NONE_ACTION)))
		Joestick.command=result;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <ProcessJoestick+0x6c>)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	7113      	strb	r3, [r2, #4]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000218 	.word	0x20000218

08002c80 <KeysReset>:


void KeysReset(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<BTN_COUNT;i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e00e      	b.n	8002caa <KeysReset+0x2a>
	{
		Buttons.action[i]=NO_ACTION;
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002cbc <KeysReset+0x3c>)
 8002c90:	4413      	add	r3, r2
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Buttons.clickCounter[i]=0;
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <KeysReset+0x3c>)
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	for(uint8_t i=0;i<BTN_COUNT;i++)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d9ed      	bls.n	8002c8c <KeysReset+0xc>
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000170 	.word	0x20000170

08002cc0 <WriteMP3_PlayerAnimation>:
#else
	uint16_t fixedFigures[23] = {0};
#endif

void WriteMP3_PlayerAnimation(t_animationType animationType,t_rotation rotation)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460a      	mov	r2, r1
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71bb      	strb	r3, [r7, #6]
bool buf;

static uint8_t delay;
static uint8_t currentDelay=0;

	if(delay!=currentDelay)
 8002cd0:	4bac      	ldr	r3, [pc, #688]	@ (8002f84 <WriteMP3_PlayerAnimation+0x2c4>)
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	4bac      	ldr	r3, [pc, #688]	@ (8002f88 <WriteMP3_PlayerAnimation+0x2c8>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d006      	beq.n	8002cea <WriteMP3_PlayerAnimation+0x2a>
	{
		delay++;
 8002cdc:	4ba9      	ldr	r3, [pc, #676]	@ (8002f84 <WriteMP3_PlayerAnimation+0x2c4>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4ba7      	ldr	r3, [pc, #668]	@ (8002f84 <WriteMP3_PlayerAnimation+0x2c4>)
 8002ce6:	701a      	strb	r2, [r3, #0]
		return;
 8002ce8:	e1bf      	b.n	800306a <WriteMP3_PlayerAnimation+0x3aa>
	}

	delay=0;
 8002cea:	4ba6      	ldr	r3, [pc, #664]	@ (8002f84 <WriteMP3_PlayerAnimation+0x2c4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]

	switch(animationType)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	f200 81b5 	bhi.w	8003064 <WriteMP3_PlayerAnimation+0x3a4>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <WriteMP3_PlayerAnimation+0x40>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d79 	.word	0x08002d79
 8002d08:	08003037 	.word	0x08003037
 8002d0c:	08003065 	.word	0x08003065
	{
		case RANDOM_DOTS:
			randLimitMax=100;
 8002d10:	2364      	movs	r3, #100	@ 0x64
 8002d12:	737b      	strb	r3, [r7, #13]
			randLimitMin=10;
 8002d14:	230a      	movs	r3, #10
 8002d16:	733b      	strb	r3, [r7, #12]
			dotsCount=(uint8_t)Random((uint16_t)randLimitMin,(uint16_t)randLimitMax);
 8002d18:	7b3b      	ldrb	r3, [r7, #12]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	7b7a      	ldrb	r2, [r7, #13]
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fb02 	bl	800232c <Random>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	72fb      	strb	r3, [r7, #11]
			currentDelay=5;
 8002d2c:	4b96      	ldr	r3, [pc, #600]	@ (8002f88 <WriteMP3_PlayerAnimation+0x2c8>)
 8002d2e:	2205      	movs	r2, #5
 8002d30:	701a      	strb	r2, [r3, #0]
			ClearMax7219();
 8002d32:	f003 f87d 	bl	8005e30 <ClearMax7219>
			for(i=0;i<dotsCount;i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e017      	b.n	8002d6c <WriteMP3_PlayerAnimation+0xac>
			{
				x=(uint8_t)Random(0,15);
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7ff faf4 	bl	800232c <Random>
 8002d44:	4603      	mov	r3, r0
 8002d46:	723b      	strb	r3, [r7, #8]
				y=(uint8_t)Random(0,31);
 8002d48:	211f      	movs	r1, #31
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff faee 	bl	800232c <Random>
 8002d50:	4603      	mov	r3, r0
 8002d52:	72bb      	strb	r3, [r7, #10]
				SetPixel(x, y, true);
 8002d54:	7ab9      	ldrb	r1, [r7, #10]
 8002d56:	7a3b      	ldrb	r3, [r7, #8]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 f882 	bl	8005e64 <SetPixel>
			for(i=0;i<dotsCount;i++)
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	dbe2      	blt.n	8002d3c <WriteMP3_PlayerAnimation+0x7c>
			}
		break;
 8002d76:	e178      	b.n	800306a <WriteMP3_PlayerAnimation+0x3aa>

		case FALLING_DOTS:
			if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES))
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <WriteMP3_PlayerAnimation+0xc6>
 8002d7e:	79bb      	ldrb	r3, [r7, #6]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f040 80c3 	bne.w	8002f0c <WriteMP3_PlayerAnimation+0x24c>
			{
				randLimitMax=4;
 8002d86:	2304      	movs	r3, #4
 8002d88:	737b      	strb	r3, [r7, #13]
				randLimitMin=0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	733b      	strb	r3, [r7, #12]
				dotsCount=(uint8_t)Random((uint16_t)randLimitMin,(uint16_t)randLimitMax);
 8002d8e:	7b3b      	ldrb	r3, [r7, #12]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	7b7a      	ldrb	r2, [r7, #13]
 8002d94:	b292      	uxth	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fac7 	bl	800232c <Random>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	72fb      	strb	r3, [r7, #11]
				currentDelay=2;
 8002da2:	4b79      	ldr	r3, [pc, #484]	@ (8002f88 <WriteMP3_PlayerAnimation+0x2c8>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]

				if(rotation==ROTATION_0_DEGREES)
 8002da8:	79bb      	ldrb	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d155      	bne.n	8002e5a <WriteMP3_PlayerAnimation+0x19a>
				{
					for(i=14;i>=0;i--)
 8002dae:	230e      	movs	r3, #14
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e034      	b.n	8002e1e <WriteMP3_PlayerAnimation+0x15e>
					{
						for(j=0;j<32;j++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73bb      	strb	r3, [r7, #14]
 8002db8:	e027      	b.n	8002e0a <WriteMP3_PlayerAnimation+0x14a>
						{
							buf=GetPixel(i,j);
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	7bba      	ldrb	r2, [r7, #14]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 f893 	bl	8005eec <GetPixel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	727b      	strb	r3, [r7, #9]
							if(buf==true)
 8002dca:	7a7b      	ldrb	r3, [r7, #9]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <WriteMP3_PlayerAnimation+0x122>
							{
								SetPixel(i+1, j, true);
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	7bb9      	ldrb	r1, [r7, #14]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 f842 	bl	8005e64 <SetPixel>
 8002de0:	e007      	b.n	8002df2 <WriteMP3_PlayerAnimation+0x132>
							}
							else
							{
								SetPixel(i+1, j, false);
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	7bb9      	ldrb	r1, [r7, #14]
 8002dea:	2200      	movs	r2, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 f839 	bl	8005e64 <SetPixel>
							}
							SetPixel(i, j, false);
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	7bb9      	ldrb	r1, [r7, #14]
 8002df6:	2200      	movs	r2, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 f833 	bl	8005e64 <SetPixel>
						for(j=0;j<32;j++)
 8002dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	73bb      	strb	r3, [r7, #14]
 8002e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e0e:	2b1f      	cmp	r3, #31
 8002e10:	ddd3      	ble.n	8002dba <WriteMP3_PlayerAnimation+0xfa>
					for(i=14;i>=0;i--)
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dac6      	bge.n	8002db4 <WriteMP3_PlayerAnimation+0xf4>
						}
					}

					for(i=0;i<dotsCount;i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e011      	b.n	8002e50 <WriteMP3_PlayerAnimation+0x190>
					{
						y=(uint8_t)Random(0,31);
 8002e2c:	211f      	movs	r1, #31
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7ff fa7c 	bl	800232c <Random>
 8002e34:	4603      	mov	r3, r0
 8002e36:	72bb      	strb	r3, [r7, #10]
						SetPixel(0, y, true);
 8002e38:	7abb      	ldrb	r3, [r7, #10]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f003 f810 	bl	8005e64 <SetPixel>
					for(i=0;i<dotsCount;i++)
 8002e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	dbe8      	blt.n	8002e2c <WriteMP3_PlayerAnimation+0x16c>
					}
				}


				if(rotation==ROTATION_180_DEGREES)
 8002e5a:	79bb      	ldrb	r3, [r7, #6]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d155      	bne.n	8002f0c <WriteMP3_PlayerAnimation+0x24c>
				{
					for(i=1;i<16;i++)
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e034      	b.n	8002ed0 <WriteMP3_PlayerAnimation+0x210>
					{
						for(j=0;j<32;j++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	73bb      	strb	r3, [r7, #14]
 8002e6a:	e027      	b.n	8002ebc <WriteMP3_PlayerAnimation+0x1fc>
						{
							buf=GetPixel(i,j);
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	7bba      	ldrb	r2, [r7, #14]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 f83a 	bl	8005eec <GetPixel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	727b      	strb	r3, [r7, #9]
							if(buf==true)
 8002e7c:	7a7b      	ldrb	r3, [r7, #9]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <WriteMP3_PlayerAnimation+0x1d4>
							{
								SetPixel(i-1, j, true);
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	7bb9      	ldrb	r1, [r7, #14]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 ffe9 	bl	8005e64 <SetPixel>
 8002e92:	e007      	b.n	8002ea4 <WriteMP3_PlayerAnimation+0x1e4>
							}
							else
							{
								SetPixel(i-1, j, false);
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	7bb9      	ldrb	r1, [r7, #14]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 ffe0 	bl	8005e64 <SetPixel>
							}
							SetPixel(i, j, false);
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	7bb9      	ldrb	r1, [r7, #14]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 ffda 	bl	8005e64 <SetPixel>
						for(j=0;j<32;j++)
 8002eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	73bb      	strb	r3, [r7, #14]
 8002ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec0:	2b1f      	cmp	r3, #31
 8002ec2:	ddd3      	ble.n	8002e6c <WriteMP3_PlayerAnimation+0x1ac>
					for(i=1;i<16;i++)
 8002ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	ddc6      	ble.n	8002e66 <WriteMP3_PlayerAnimation+0x1a6>
						}
					}

					for(i=0;i<dotsCount;i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e011      	b.n	8002f02 <WriteMP3_PlayerAnimation+0x242>
					{
						y=(uint8_t)Random(0,31);
 8002ede:	211f      	movs	r1, #31
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7ff fa23 	bl	800232c <Random>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	72bb      	strb	r3, [r7, #10]
						SetPixel(15, y, true);
 8002eea:	7abb      	ldrb	r3, [r7, #10]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4619      	mov	r1, r3
 8002ef0:	200f      	movs	r0, #15
 8002ef2:	f002 ffb7 	bl	8005e64 <SetPixel>
					for(i=0;i<dotsCount;i++)
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbe8      	blt.n	8002ede <WriteMP3_PlayerAnimation+0x21e>
				}


			}

			if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 8002f0c:	79bb      	ldrb	r3, [r7, #6]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d003      	beq.n	8002f1a <WriteMP3_PlayerAnimation+0x25a>
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	f040 80a7 	bne.w	8003068 <WriteMP3_PlayerAnimation+0x3a8>
			{
				randLimitMax=3;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	737b      	strb	r3, [r7, #13]
				randLimitMin=0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	733b      	strb	r3, [r7, #12]
				dotsCount=(uint8_t)Random((uint16_t)randLimitMin,(uint16_t)randLimitMax);
 8002f22:	7b3b      	ldrb	r3, [r7, #12]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	7b7a      	ldrb	r2, [r7, #13]
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f9fd 	bl	800232c <Random>
 8002f32:	4603      	mov	r3, r0
 8002f34:	72fb      	strb	r3, [r7, #11]
				currentDelay=2;
 8002f36:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <WriteMP3_PlayerAnimation+0x2c8>)
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]

				if(rotation==ROTATION_270_DEGREES)
 8002f3c:	79bb      	ldrb	r3, [r7, #6]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d13d      	bne.n	8002fbe <WriteMP3_PlayerAnimation+0x2fe>
				{
					for(i=1;i<32;i++)
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e016      	b.n	8002f76 <WriteMP3_PlayerAnimation+0x2b6>
					{
						Matrix.data[i-1]=Matrix.data[i];
 8002f48:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	490e      	ldr	r1, [pc, #56]	@ (8002f8c <WriteMP3_PlayerAnimation+0x2cc>)
 8002f54:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002f58:	4a0c      	ldr	r2, [pc, #48]	@ (8002f8c <WriteMP3_PlayerAnimation+0x2cc>)
 8002f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						Matrix.data[i]=0;
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <WriteMP3_PlayerAnimation+0x2cc>)
 8002f64:	2100      	movs	r1, #0
 8002f66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(i=1;i<32;i++)
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	2b1f      	cmp	r3, #31
 8002f7c:	dde4      	ble.n	8002f48 <WriteMP3_PlayerAnimation+0x288>
					}

					for(i=0;i<dotsCount;i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e017      	b.n	8002fb4 <WriteMP3_PlayerAnimation+0x2f4>
 8002f84:	20000276 	.word	0x20000276
 8002f88:	20000277 	.word	0x20000277
 8002f8c:	2000027c 	.word	0x2000027c
					{
						y=(uint8_t)Random(0,15);
 8002f90:	210f      	movs	r1, #15
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7ff f9ca 	bl	800232c <Random>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	72bb      	strb	r3, [r7, #10]
						SetPixel(y, 31, true);
 8002f9c:	7abb      	ldrb	r3, [r7, #10]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	211f      	movs	r1, #31
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 ff5e 	bl	8005e64 <SetPixel>
					for(i=0;i<dotsCount;i++)
 8002fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002fb8:	7afb      	ldrb	r3, [r7, #11]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dbe8      	blt.n	8002f90 <WriteMP3_PlayerAnimation+0x2d0>
					}
				}

				if(rotation==ROTATION_90_DEGREES)
 8002fbe:	79bb      	ldrb	r3, [r7, #6]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d151      	bne.n	8003068 <WriteMP3_PlayerAnimation+0x3a8>
				{
					for(i=30;i>=0;i--)
 8002fc4:	231e      	movs	r3, #30
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e016      	b.n	8002ff8 <WriteMP3_PlayerAnimation+0x338>
					{
						Matrix.data[i+1]=Matrix.data[i];
 8002fca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4926      	ldr	r1, [pc, #152]	@ (8003070 <WriteMP3_PlayerAnimation+0x3b0>)
 8002fd6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002fda:	4a25      	ldr	r2, [pc, #148]	@ (8003070 <WriteMP3_PlayerAnimation+0x3b0>)
 8002fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						Matrix.data[i]=0;
 8002fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <WriteMP3_PlayerAnimation+0x3b0>)
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(i=30;i>=0;i--)
 8002fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	dae4      	bge.n	8002fca <WriteMP3_PlayerAnimation+0x30a>
					}

					for(i=0;i<dotsCount;i++)
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e011      	b.n	800302a <WriteMP3_PlayerAnimation+0x36a>
					{
						y=(uint8_t)Random(0,15);
 8003006:	210f      	movs	r1, #15
 8003008:	2000      	movs	r0, #0
 800300a:	f7ff f98f 	bl	800232c <Random>
 800300e:	4603      	mov	r3, r0
 8003010:	72bb      	strb	r3, [r7, #10]
						SetPixel(y, 0, true);
 8003012:	7abb      	ldrb	r3, [r7, #10]
 8003014:	2201      	movs	r2, #1
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f002 ff23 	bl	8005e64 <SetPixel>
					for(i=0;i<dotsCount;i++)
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800302e:	7afb      	ldrb	r3, [r7, #11]
 8003030:	429a      	cmp	r2, r3
 8003032:	dbe8      	blt.n	8003006 <WriteMP3_PlayerAnimation+0x346>
					}
				}
			}
		break;
 8003034:	e018      	b.n	8003068 <WriteMP3_PlayerAnimation+0x3a8>

		case CURRENT_TIME:
			ClearMax7219();
 8003036:	f002 fefb 	bl	8005e30 <ClearMax7219>
			WriteTime(Application.clockDefinition,rotation);
 800303a:	79b8      	ldrb	r0, [r7, #6]
 800303c:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <WriteMP3_PlayerAnimation+0x3b4>)
 800303e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003042:	4614      	mov	r4, r2
 8003044:	7a5a      	ldrb	r2, [r3, #9]
 8003046:	7a99      	ldrb	r1, [r3, #10]
 8003048:	0209      	lsls	r1, r1, #8
 800304a:	430a      	orrs	r2, r1
 800304c:	7adb      	ldrb	r3, [r3, #11]
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	2300      	movs	r3, #0
 8003054:	f362 0317 	bfi	r3, r2, #0, #24
 8003058:	4602      	mov	r2, r0
 800305a:	4620      	mov	r0, r4
 800305c:	4619      	mov	r1, r3
 800305e:	f001 fe25 	bl	8004cac <WriteTime>
		break;
 8003062:	e002      	b.n	800306a <WriteMP3_PlayerAnimation+0x3aa>
		case MOVEING_DOTS:

		break;

		default:
		break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <WriteMP3_PlayerAnimation+0x3aa>
		break;
 8003068:	bf00      	nop
	}
}
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}
 8003070:	2000027c 	.word	0x2000027c
 8003074:	20000138 	.word	0x20000138

08003078 <FixFigures>:

void FixFigures(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
uint8_t i,j;
bool buf;
	for(i=0;i<10;i++)
 800307e:	2300      	movs	r3, #0
 8003080:	71fb      	strb	r3, [r7, #7]
 8003082:	e01c      	b.n	80030be <FixFigures+0x46>
	{
		for(j=31;j>=9;j--)
 8003084:	231f      	movs	r3, #31
 8003086:	71bb      	strb	r3, [r7, #6]
 8003088:	e013      	b.n	80030b2 <FixFigures+0x3a>
		{
			buf=GetPixel(i, j);
 800308a:	79ba      	ldrb	r2, [r7, #6]
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f002 ff2b 	bl	8005eec <GetPixel>
 8003096:	4603      	mov	r3, r0
 8003098:	717b      	strb	r3, [r7, #5]
			FixPixel(i,31-j,buf);
 800309a:	79bb      	ldrb	r3, [r7, #6]
 800309c:	f1c3 031f 	rsb	r3, r3, #31
 80030a0:	b2d9      	uxtb	r1, r3
 80030a2:	797a      	ldrb	r2, [r7, #5]
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f812 	bl	80030d0 <FixPixel>
		for(j=31;j>=9;j--)
 80030ac:	79bb      	ldrb	r3, [r7, #6]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	71bb      	strb	r3, [r7, #6]
 80030b2:	79bb      	ldrb	r3, [r7, #6]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d8e8      	bhi.n	800308a <FixFigures+0x12>
	for(i=0;i<10;i++)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	3301      	adds	r3, #1
 80030bc:	71fb      	strb	r3, [r7, #7]
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b09      	cmp	r3, #9
 80030c2:	d9df      	bls.n	8003084 <FixFigures+0xc>
		}
	}
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <FixPixel>:

void FixPixel(uint8_t i, uint8_t j, bool state)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	460b      	mov	r3, r1
 80030dc:	71bb      	strb	r3, [r7, #6]
 80030de:	4613      	mov	r3, r2
 80030e0:	717b      	strb	r3, [r7, #5]
	if(state==true)
 80030e2:	797b      	ldrb	r3, [r7, #5]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <FixPixel+0x40>
	{
		fixedFigures[j]=fixedFigures[j]|(1<<(15-i));
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <FixPixel+0x74>)
 80030ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f1c3 030f 	rsb	r3, r3, #15
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	b21b      	sxth	r3, r3
 8003100:	4313      	orrs	r3, r2
 8003102:	b21a      	sxth	r2, r3
 8003104:	79bb      	ldrb	r3, [r7, #6]
 8003106:	b291      	uxth	r1, r2
 8003108:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <FixPixel+0x74>)
 800310a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else
	{
		fixedFigures[j]=fixedFigures[j]&(~(1<<(15-i)));
	}
}
 800310e:	e014      	b.n	800313a <FixPixel+0x6a>
		fixedFigures[j]=fixedFigures[j]&(~(1<<(15-i)));
 8003110:	79bb      	ldrb	r3, [r7, #6]
 8003112:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <FixPixel+0x74>)
 8003114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003118:	b21a      	sxth	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f1c3 030f 	rsb	r3, r3, #15
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	b21b      	sxth	r3, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	b21b      	sxth	r3, r3
 800312c:	4013      	ands	r3, r2
 800312e:	b21a      	sxth	r2, r3
 8003130:	79bb      	ldrb	r3, [r7, #6]
 8003132:	b291      	uxth	r1, r2
 8003134:	4a03      	ldr	r2, [pc, #12]	@ (8003144 <FixPixel+0x74>)
 8003136:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20000248 	.word	0x20000248

08003148 <GetFixedPixel>:

bool GetFixedPixel(uint8_t i, uint8_t j)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	460a      	mov	r2, r1
 8003152:	71fb      	strb	r3, [r7, #7]
 8003154:	4613      	mov	r3, r2
 8003156:	71bb      	strb	r3, [r7, #6]
bool result;

	if(fixedFigures[i]&(1<<(15-j)))
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4a0c      	ldr	r2, [pc, #48]	@ (800318c <GetFixedPixel+0x44>)
 800315c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003160:	461a      	mov	r2, r3
 8003162:	79bb      	ldrb	r3, [r7, #6]
 8003164:	f1c3 030f 	rsb	r3, r3, #15
 8003168:	fa42 f303 	asr.w	r3, r2, r3
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <GetFixedPixel+0x32>
	{
		result=true;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e001      	b.n	800317e <GetFixedPixel+0x36>
	}
	else
	{
		result=false;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000248 	.word	0x20000248

08003190 <WriteFixedFigures>:

void WriteFixedFigures(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
uint8_t i,j;
bool buf;

	for(i=0;i<22;i++)
 8003196:	2300      	movs	r3, #0
 8003198:	71fb      	strb	r3, [r7, #7]
 800319a:	e01c      	b.n	80031d6 <WriteFixedFigures+0x46>
	{
		for(j=0;j<10;j++)
 800319c:	2300      	movs	r3, #0
 800319e:	71bb      	strb	r3, [r7, #6]
 80031a0:	e013      	b.n	80031ca <WriteFixedFigures+0x3a>
		{
			buf=GetFixedPixel(i, j);
 80031a2:	79ba      	ldrb	r2, [r7, #6]
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ffcd 	bl	8003148 <GetFixedPixel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	717b      	strb	r3, [r7, #5]
			SetPixel(j,31-i,buf);
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f1c3 031f 	rsb	r3, r3, #31
 80031b8:	b2d9      	uxtb	r1, r3
 80031ba:	797a      	ldrb	r2, [r7, #5]
 80031bc:	79bb      	ldrb	r3, [r7, #6]
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fe50 	bl	8005e64 <SetPixel>
		for(j=0;j<10;j++)
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	3301      	adds	r3, #1
 80031c8:	71bb      	strb	r3, [r7, #6]
 80031ca:	79bb      	ldrb	r3, [r7, #6]
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d9e8      	bls.n	80031a2 <WriteFixedFigures+0x12>
	for(i=0;i<22;i++)
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	3301      	adds	r3, #1
 80031d4:	71fb      	strb	r3, [r7, #7]
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b15      	cmp	r3, #21
 80031da:	d9df      	bls.n	800319c <WriteFixedFigures+0xc>
		}
	}
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <RestartRound>:

void RestartRound(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
uint8_t i;

	previusPosition.x=4;
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <RestartRound+0x88>)
 80031f0:	2204      	movs	r2, #4
 80031f2:	701a      	strb	r2, [r3, #0]
	previusPosition.y=8;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <RestartRound+0x88>)
 80031f6:	2208      	movs	r2, #8
 80031f8:	705a      	strb	r2, [r3, #1]

	for(i=0;i<3;i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	71fb      	strb	r3, [r7, #7]
 80031fe:	e017      	b.n	8003230 <RestartRound+0x48>
	{
		queue[i].figure=queue[i+1].figure;
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	491b      	ldr	r1, [pc, #108]	@ (8003274 <RestartRound+0x8c>)
 8003208:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800320c:	4a19      	ldr	r2, [pc, #100]	@ (8003274 <RestartRound+0x8c>)
 800320e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		queue[i].angle=queue[i+1].angle;
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	3301      	adds	r3, #1
 8003216:	79fa      	ldrb	r2, [r7, #7]
 8003218:	4916      	ldr	r1, [pc, #88]	@ (8003274 <RestartRound+0x8c>)
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	7858      	ldrb	r0, [r3, #1]
 8003220:	4914      	ldr	r1, [pc, #80]	@ (8003274 <RestartRound+0x8c>)
 8003222:	0053      	lsls	r3, r2, #1
 8003224:	440b      	add	r3, r1
 8003226:	4602      	mov	r2, r0
 8003228:	705a      	strb	r2, [r3, #1]
	for(i=0;i<3;i++)
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	3301      	adds	r3, #1
 800322e:	71fb      	strb	r3, [r7, #7]
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d9e4      	bls.n	8003200 <RestartRound+0x18>
	}

	queue[3].figure=Random(0, 6);
 8003236:	2106      	movs	r1, #6
 8003238:	2000      	movs	r0, #0
 800323a:	f7ff f877 	bl	800232c <Random>
 800323e:	4603      	mov	r3, r0
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <RestartRound+0x8c>)
 8003244:	719a      	strb	r2, [r3, #6]
	queue[3].angle=0;
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <RestartRound+0x8c>)
 8003248:	2200      	movs	r2, #0
 800324a:	71da      	strb	r2, [r3, #7]

	Application.tetrisDefinition.figure=queue[0].figure;
 800324c:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <RestartRound+0x8c>)
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <RestartRound+0x90>)
 8003252:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	Application.tetrisDefinition.angle=Random(0,3);
 8003256:	2103      	movs	r1, #3
 8003258:	2000      	movs	r0, #0
 800325a:	f7ff f867 	bl	800232c <Random>
 800325e:	4603      	mov	r3, r0
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <RestartRound+0x90>)
 8003264:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000000 	.word	0x20000000
 8003274:	20000240 	.word	0x20000240
 8003278:	20000138 	.word	0x20000138

0800327c <WriteTetrisMode>:

void WriteTetrisMode(t_rotation rotation)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b087      	sub	sp, #28
 8003280:	af02      	add	r7, sp, #8
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
uint8_t i,j,currentSpeed;
bool result=false;
 8003286:	2300      	movs	r3, #0
 8003288:	733b      	strb	r3, [r7, #12]
static uint8_t delay,steps=0;
static bool	 fastFall=false;

if(fastFall==true)
 800328a:	4bae      	ldr	r3, [pc, #696]	@ (8003544 <WriteTetrisMode+0x2c8>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <WriteTetrisMode+0x1c>
{
	currentSpeed=0;
 8003292:	2300      	movs	r3, #0
 8003294:	737b      	strb	r3, [r7, #13]
 8003296:	e003      	b.n	80032a0 <WriteTetrisMode+0x24>
}
else
{
	currentSpeed=Application.tetrisDefinition.speed;
 8003298:	4bab      	ldr	r3, [pc, #684]	@ (8003548 <WriteTetrisMode+0x2cc>)
 800329a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800329e:	737b      	strb	r3, [r7, #13]
}

if(delay!=currentSpeed)
 80032a0:	4baa      	ldr	r3, [pc, #680]	@ (800354c <WriteTetrisMode+0x2d0>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	7b7a      	ldrb	r2, [r7, #13]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d015      	beq.n	80032d6 <WriteTetrisMode+0x5a>
{
	delay++;
 80032aa:	4ba8      	ldr	r3, [pc, #672]	@ (800354c <WriteTetrisMode+0x2d0>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4ba6      	ldr	r3, [pc, #664]	@ (800354c <WriteTetrisMode+0x2d0>)
 80032b4:	701a      	strb	r2, [r3, #0]
	if(delay>10)	//защита от изменения скорости программатором
 80032b6:	4ba5      	ldr	r3, [pc, #660]	@ (800354c <WriteTetrisMode+0x2d0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b0a      	cmp	r3, #10
 80032bc:	d902      	bls.n	80032c4 <WriteTetrisMode+0x48>
		delay=0;
 80032be:	4ba3      	ldr	r3, [pc, #652]	@ (800354c <WriteTetrisMode+0x2d0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]

	if(Application.forceUpdate==false)	//если ускоренное обновление, то не выходим из функции
 80032c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80032c6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80032ca:	f083 0301 	eor.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 81d6 	bne.w	8003682 <WriteTetrisMode+0x406>
		return;

}

	delay=0;
 80032d6:	4b9d      	ldr	r3, [pc, #628]	@ (800354c <WriteTetrisMode+0x2d0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
	ClearMax7219();
 80032dc:	f002 fda8 	bl	8005e30 <ClearMax7219>

	switch(rotation)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	f200 81ce 	bhi.w	8003684 <WriteTetrisMode+0x408>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <WriteTetrisMode+0x74>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003301 	.word	0x08003301
 80032f4:	08003367 	.word	0x08003367
 80032f8:	08003577 	.word	0x08003577
 80032fc:	080035dd 	.word	0x080035dd
	{
		case ROTATION_0_DEGREES:
			DrowDigit(4,26,E_LETTER,CLASSIC,LETTER,rotation);
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	2204      	movs	r2, #4
 800330c:	211a      	movs	r1, #26
 800330e:	2004      	movs	r0, #4
 8003310:	f002 fec2 	bl	8006098 <DrowDigit>
			DrowDigit(4,20,R_LETTER,CLASSIC,LETTER,rotation);
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2302      	movs	r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	2206      	movs	r2, #6
 8003320:	2114      	movs	r1, #20
 8003322:	2004      	movs	r0, #4
 8003324:	f002 feb8 	bl	8006098 <DrowDigit>
			DrowDigit(4,14,R_LETTER,CLASSIC,LETTER,rotation);
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	2302      	movs	r3, #2
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	2206      	movs	r2, #6
 8003334:	210e      	movs	r1, #14
 8003336:	2004      	movs	r0, #4
 8003338:	f002 feae 	bl	8006098 <DrowDigit>
			DrowDigit(4,8,O_LETTER,CLASSIC,LETTER,rotation);
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2302      	movs	r3, #2
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	2205      	movs	r2, #5
 8003348:	2108      	movs	r1, #8
 800334a:	2004      	movs	r0, #4
 800334c:	f002 fea4 	bl	8006098 <DrowDigit>
			DrowDigit(4,2,R_LETTER,CLASSIC,LETTER,rotation);
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	2302      	movs	r3, #2
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	2206      	movs	r2, #6
 800335c:	2102      	movs	r1, #2
 800335e:	2004      	movs	r0, #4
 8003360:	f002 fe9a 	bl	8006098 <DrowDigit>
		break;
 8003364:	e18e      	b.n	8003684 <WriteTetrisMode+0x408>

		case ROTATION_90_DEGREES:
			Application.tetrisDefinition.HEIGHT=10;
 8003366:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <WriteTetrisMode+0x2cc>)
 8003368:	220a      	movs	r2, #10
 800336a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			Application.tetrisDefinition.WIDTH=24;
 800336e:	4b76      	ldr	r3, [pc, #472]	@ (8003548 <WriteTetrisMode+0x2cc>)
 8003370:	2218      	movs	r2, #24
 8003372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			for(i=0;i<=10;i++)
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e008      	b.n	800338e <WriteTetrisMode+0x112>
			{
				SetPixel(i, 8, true);
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2201      	movs	r2, #1
 8003380:	2108      	movs	r1, #8
 8003382:	4618      	mov	r0, r3
 8003384:	f002 fd6e 	bl	8005e64 <SetPixel>
			for(i=0;i<=10;i++)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	3301      	adds	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b0a      	cmp	r3, #10
 8003392:	d9f3      	bls.n	800337c <WriteTetrisMode+0x100>
			}

			for(j=8;j<=31;j++)
 8003394:	2308      	movs	r3, #8
 8003396:	73bb      	strb	r3, [r7, #14]
 8003398:	e008      	b.n	80033ac <WriteTetrisMode+0x130>
			{
				SetPixel(10, j, true);
 800339a:	7bbb      	ldrb	r3, [r7, #14]
 800339c:	2201      	movs	r2, #1
 800339e:	4619      	mov	r1, r3
 80033a0:	200a      	movs	r0, #10
 80033a2:	f002 fd5f 	bl	8005e64 <SetPixel>
			for(j=8;j<=31;j++)
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	3301      	adds	r3, #1
 80033aa:	73bb      	strb	r3, [r7, #14]
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2b1f      	cmp	r3, #31
 80033b0:	d9f3      	bls.n	800339a <WriteTetrisMode+0x11e>
			}

			DrowDigit(15,25,(4-Application.tetrisDefinition.speed),Application.tetrisDefinition.font_style,SMALL,rotation);
 80033b2:	4b65      	ldr	r3, [pc, #404]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80033b4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80033b8:	f1c3 0304 	rsb	r3, r3, #4
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b62      	ldr	r3, [pc, #392]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80033c0:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	460b      	mov	r3, r1
 80033ce:	2119      	movs	r1, #25
 80033d0:	200f      	movs	r0, #15
 80033d2:	f002 fe61 	bl	8006098 <DrowDigit>
			WriteScore(Application.tetrisDefinition.score,rotation,false);
 80033d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80033d8:	8c1b      	ldrh	r3, [r3, #32]
 80033da:	79f9      	ldrb	r1, [r7, #7]
 80033dc:	2200      	movs	r2, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f98c 	bl	80036fc <WriteScore>
			WriteFixedFigures();
 80033e4:	f7ff fed4 	bl	8003190 <WriteFixedFigures>
			WriteQueue();
 80033e8:	f000 f956 	bl	8003698 <WriteQueue>
			if(Joestick.command==LEFT_ACTION)
 80033ec:	4b58      	ldr	r3, [pc, #352]	@ (8003550 <WriteTetrisMode+0x2d4>)
 80033ee:	791b      	ldrb	r3, [r3, #4]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d113      	bne.n	800341c <WriteTetrisMode+0x1a0>
			{
				if(checkArea(previusPosition.x,previusPosition.y,LEFT_AND_FIGURES)==false)
 80033f4:	4b57      	ldr	r3, [pc, #348]	@ (8003554 <WriteTetrisMode+0x2d8>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4a56      	ldr	r2, [pc, #344]	@ (8003554 <WriteTetrisMode+0x2d8>)
 80033fa:	7851      	ldrb	r1, [r2, #1]
 80033fc:	2202      	movs	r2, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fa48 	bl	8007894 <checkArea>
 8003404:	4603      	mov	r3, r0
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <WriteTetrisMode+0x1a0>
					previusPosition.x--;
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <WriteTetrisMode+0x2d8>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	3b01      	subs	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b4e      	ldr	r3, [pc, #312]	@ (8003554 <WriteTetrisMode+0x2d8>)
 800341a:	701a      	strb	r2, [r3, #0]
			}

			if(Joestick.command==RIGHT_ACTION)
 800341c:	4b4c      	ldr	r3, [pc, #304]	@ (8003550 <WriteTetrisMode+0x2d4>)
 800341e:	791b      	ldrb	r3, [r3, #4]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d113      	bne.n	800344c <WriteTetrisMode+0x1d0>
			{
				if(checkArea(previusPosition.x,previusPosition.y,RIGHT_AND_FIGURES)==false)
 8003424:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <WriteTetrisMode+0x2d8>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4a4a      	ldr	r2, [pc, #296]	@ (8003554 <WriteTetrisMode+0x2d8>)
 800342a:	7851      	ldrb	r1, [r2, #1]
 800342c:	2203      	movs	r2, #3
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fa30 	bl	8007894 <checkArea>
 8003434:	4603      	mov	r3, r0
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <WriteTetrisMode+0x1d0>
					previusPosition.x++;
 8003440:	4b44      	ldr	r3, [pc, #272]	@ (8003554 <WriteTetrisMode+0x2d8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4b42      	ldr	r3, [pc, #264]	@ (8003554 <WriteTetrisMode+0x2d8>)
 800344a:	701a      	strb	r2, [r3, #0]
			}


			if(Joestick.command==UP_ACTION)
 800344c:	4b40      	ldr	r3, [pc, #256]	@ (8003550 <WriteTetrisMode+0x2d4>)
 800344e:	791b      	ldrb	r3, [r3, #4]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11e      	bne.n	8003492 <WriteTetrisMode+0x216>
			{
				if(checkArea(previusPosition.x,previusPosition.y,ROTATION)==false)
 8003454:	4b3f      	ldr	r3, [pc, #252]	@ (8003554 <WriteTetrisMode+0x2d8>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4a3e      	ldr	r2, [pc, #248]	@ (8003554 <WriteTetrisMode+0x2d8>)
 800345a:	7851      	ldrb	r1, [r2, #1]
 800345c:	2204      	movs	r2, #4
 800345e:	4618      	mov	r0, r3
 8003460:	f004 fa18 	bl	8007894 <checkArea>
 8003464:	4603      	mov	r3, r0
 8003466:	f083 0301 	eor.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <WriteTetrisMode+0x216>
				{
					Application.tetrisDefinition.angle++;
 8003470:	4b35      	ldr	r3, [pc, #212]	@ (8003548 <WriteTetrisMode+0x2cc>)
 8003472:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003476:	3301      	adds	r3, #1
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4b33      	ldr	r3, [pc, #204]	@ (8003548 <WriteTetrisMode+0x2cc>)
 800347c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
					if (Application.tetrisDefinition.angle == 4)
 8003480:	4b31      	ldr	r3, [pc, #196]	@ (8003548 <WriteTetrisMode+0x2cc>)
 8003482:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003486:	2b04      	cmp	r3, #4
 8003488:	d103      	bne.n	8003492 <WriteTetrisMode+0x216>
						Application.tetrisDefinition.angle = 0;
 800348a:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <WriteTetrisMode+0x2cc>)
 800348c:	2200      	movs	r2, #0
 800348e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				}
			}

			if(Application.keyCode==FAST_FALL_BUTTON)
 8003492:	4b2d      	ldr	r3, [pc, #180]	@ (8003548 <WriteTetrisMode+0x2cc>)
 8003494:	78db      	ldrb	r3, [r3, #3]
 8003496:	2b26      	cmp	r3, #38	@ 0x26
 8003498:	d107      	bne.n	80034aa <WriteTetrisMode+0x22e>
			{
				Application.keyCode=NONE_BUTTON;
 800349a:	4b2b      	ldr	r3, [pc, #172]	@ (8003548 <WriteTetrisMode+0x2cc>)
 800349c:	2200      	movs	r2, #0
 800349e:	70da      	strb	r2, [r3, #3]
				KeysReset();
 80034a0:	f7ff fbee 	bl	8002c80 <KeysReset>
				fastFall=true;
 80034a4:	4b27      	ldr	r3, [pc, #156]	@ (8003544 <WriteTetrisMode+0x2c8>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
			}

			if(Joestick.command==DOWN_ACTION)
 80034aa:	4b29      	ldr	r3, [pc, #164]	@ (8003550 <WriteTetrisMode+0x2d4>)
 80034ac:	791b      	ldrb	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d105      	bne.n	80034be <WriteTetrisMode+0x242>
			{
				previusPosition.x=4;
 80034b2:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <WriteTetrisMode+0x2d8>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	701a      	strb	r2, [r3, #0]
				previusPosition.y=8;
 80034b8:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <WriteTetrisMode+0x2d8>)
 80034ba:	2208      	movs	r2, #8
 80034bc:	705a      	strb	r2, [r3, #1]
			}

			Joestick.command=NONE_ACTION;
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <WriteTetrisMode+0x2d4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	711a      	strb	r2, [r3, #4]

			if(Application.forceUpdate==false)
 80034c4:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80034c6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80034ca:	f083 0301 	eor.w	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d014      	beq.n	80034fe <WriteTetrisMode+0x282>
			{
				drawFigure(Application.tetrisDefinition.figure,Application.tetrisDefinition.angle,previusPosition.x,previusPosition.y,true,rotation);
 80034d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80034d6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80034da:	b258      	sxtb	r0, r3
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <WriteTetrisMode+0x2cc>)
 80034de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80034e2:	b259      	sxtb	r1, r3
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <WriteTetrisMode+0x2d8>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b25a      	sxtb	r2, r3
 80034ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003554 <WriteTetrisMode+0x2d8>)
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	b25c      	sxtb	r4, r3
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	2301      	movs	r3, #1
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4623      	mov	r3, r4
 80034fa:	f004 f959 	bl	80077b0 <drawFigure>
			}
			result=checkArea(previusPosition.x,previusPosition.y,FLOOR_AND_FIGURES);
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <WriteTetrisMode+0x2d8>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <WriteTetrisMode+0x2d8>)
 8003504:	7851      	ldrb	r1, [r2, #1]
 8003506:	2201      	movs	r2, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f004 f9c3 	bl	8007894 <checkArea>
 800350e:	4603      	mov	r3, r0
 8003510:	733b      	strb	r3, [r7, #12]

			if(result)
 8003512:	7b3b      	ldrb	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <WriteTetrisMode+0x2e0>
			{
				if(steps==0)
 8003518:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <WriteTetrisMode+0x2dc>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <WriteTetrisMode+0x2ae>
				{
					RestartGame();
 8003520:	f003 ff7c 	bl	800741c <RestartGame>
					RestartRound();
 8003524:	f7ff fe60 	bl	80031e8 <RestartRound>
					return;
 8003528:	e0ac      	b.n	8003684 <WriteTetrisMode+0x408>
				}

				FixFigures();
 800352a:	f7ff fda5 	bl	8003078 <FixFigures>
				ClearLines();
 800352e:	f004 f81d 	bl	800756c <ClearLines>
				RestartRound();
 8003532:	f7ff fe59 	bl	80031e8 <RestartRound>
				fastFall=false;
 8003536:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <WriteTetrisMode+0x2c8>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
				steps=0;
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <WriteTetrisMode+0x2dc>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
				return;
 8003542:	e09f      	b.n	8003684 <WriteTetrisMode+0x408>
 8003544:	20000278 	.word	0x20000278
 8003548:	20000138 	.word	0x20000138
 800354c:	20000279 	.word	0x20000279
 8003550:	20000218 	.word	0x20000218
 8003554:	20000000 	.word	0x20000000
 8003558:	2000027a 	.word	0x2000027a
			}
			else
			{
				previusPosition.y++;
 800355c:	4b4b      	ldr	r3, [pc, #300]	@ (800368c <WriteTetrisMode+0x410>)
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	3301      	adds	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b49      	ldr	r3, [pc, #292]	@ (800368c <WriteTetrisMode+0x410>)
 8003566:	705a      	strb	r2, [r3, #1]
				steps++;
 8003568:	4b49      	ldr	r3, [pc, #292]	@ (8003690 <WriteTetrisMode+0x414>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b47      	ldr	r3, [pc, #284]	@ (8003690 <WriteTetrisMode+0x414>)
 8003572:	701a      	strb	r2, [r3, #0]
			}

		break;
 8003574:	e086      	b.n	8003684 <WriteTetrisMode+0x408>

		case ROTATION_180_DEGREES:
			DrowDigit(11,5,E_LETTER,CLASSIC,LETTER,rotation);
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2302      	movs	r3, #2
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	2204      	movs	r2, #4
 8003582:	2105      	movs	r1, #5
 8003584:	200b      	movs	r0, #11
 8003586:	f002 fd87 	bl	8006098 <DrowDigit>
			DrowDigit(11,11,R_LETTER,CLASSIC,LETTER,rotation);
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2302      	movs	r3, #2
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	2206      	movs	r2, #6
 8003596:	210b      	movs	r1, #11
 8003598:	200b      	movs	r0, #11
 800359a:	f002 fd7d 	bl	8006098 <DrowDigit>
			DrowDigit(11,17,R_LETTER,CLASSIC,LETTER,rotation);
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2302      	movs	r3, #2
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	2206      	movs	r2, #6
 80035aa:	2111      	movs	r1, #17
 80035ac:	200b      	movs	r0, #11
 80035ae:	f002 fd73 	bl	8006098 <DrowDigit>
			DrowDigit(11,23,O_LETTER,CLASSIC,LETTER,rotation);
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	2205      	movs	r2, #5
 80035be:	2117      	movs	r1, #23
 80035c0:	200b      	movs	r0, #11
 80035c2:	f002 fd69 	bl	8006098 <DrowDigit>
			DrowDigit(11,29,R_LETTER,CLASSIC,LETTER,rotation);
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	2302      	movs	r3, #2
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2300      	movs	r3, #0
 80035d0:	2206      	movs	r2, #6
 80035d2:	211d      	movs	r1, #29
 80035d4:	200b      	movs	r0, #11
 80035d6:	f002 fd5f 	bl	8006098 <DrowDigit>
		break;
 80035da:	e053      	b.n	8003684 <WriteTetrisMode+0x408>

		case ROTATION_270_DEGREES:

			DrowDigit(6,27,E_LETTER,CLASSIC,LETTER,rotation);
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	2302      	movs	r3, #2
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	2204      	movs	r2, #4
 80035e8:	211b      	movs	r1, #27
 80035ea:	2006      	movs	r0, #6
 80035ec:	f002 fd54 	bl	8006098 <DrowDigit>
			DrowDigit(6,19,R_LETTER,CLASSIC,LETTER,rotation);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	2302      	movs	r3, #2
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2300      	movs	r3, #0
 80035fa:	2206      	movs	r2, #6
 80035fc:	2113      	movs	r1, #19
 80035fe:	2006      	movs	r0, #6
 8003600:	f002 fd4a 	bl	8006098 <DrowDigit>
			DrowDigit(6,11,R_LETTER,CLASSIC,LETTER,rotation);
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	2302      	movs	r3, #2
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	2206      	movs	r2, #6
 8003610:	210b      	movs	r1, #11
 8003612:	2006      	movs	r0, #6
 8003614:	f002 fd40 	bl	8006098 <DrowDigit>


			 //рисование рамки для тетриса
			for(i=5;i<=15;i++)
 8003618:	2305      	movs	r3, #5
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e008      	b.n	8003630 <WriteTetrisMode+0x3b4>
			{
				SetPixel(i, 23, true);
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2201      	movs	r2, #1
 8003622:	2117      	movs	r1, #23
 8003624:	4618      	mov	r0, r3
 8003626:	f002 fc1d 	bl	8005e64 <SetPixel>
			for(i=5;i<=15;i++)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	3301      	adds	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d9f3      	bls.n	800361e <WriteTetrisMode+0x3a2>
			}

			for(j=0;j<=23;j++)
 8003636:	2300      	movs	r3, #0
 8003638:	73bb      	strb	r3, [r7, #14]
 800363a:	e008      	b.n	800364e <WriteTetrisMode+0x3d2>
			{
				SetPixel(5, j, true);
 800363c:	7bbb      	ldrb	r3, [r7, #14]
 800363e:	2201      	movs	r2, #1
 8003640:	4619      	mov	r1, r3
 8003642:	2005      	movs	r0, #5
 8003644:	f002 fc0e 	bl	8005e64 <SetPixel>
			for(j=0;j<=23;j++)
 8003648:	7bbb      	ldrb	r3, [r7, #14]
 800364a:	3301      	adds	r3, #1
 800364c:	73bb      	strb	r3, [r7, #14]
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	2b17      	cmp	r3, #23
 8003652:	d9f3      	bls.n	800363c <WriteTetrisMode+0x3c0>
			}

			DrowDigit(0,6,Application.tetrisDefinition.speed,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003654:	4b0f      	ldr	r3, [pc, #60]	@ (8003694 <WriteTetrisMode+0x418>)
 8003656:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800365a:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <WriteTetrisMode+0x418>)
 800365c:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	460b      	mov	r3, r1
 800366a:	2106      	movs	r1, #6
 800366c:	2000      	movs	r0, #0
 800366e:	f002 fd13 	bl	8006098 <DrowDigit>
			WriteScore(Application.tetrisDefinition.score,rotation,false);
 8003672:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <WriteTetrisMode+0x418>)
 8003674:	8c1b      	ldrh	r3, [r3, #32]
 8003676:	79f9      	ldrb	r1, [r7, #7]
 8003678:	2200      	movs	r2, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f83e 	bl	80036fc <WriteScore>
		break;
 8003680:	e000      	b.n	8003684 <WriteTetrisMode+0x408>
		return;
 8003682:	bf00      	nop
	}
}
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000
 8003690:	2000027a 	.word	0x2000027a
 8003694:	20000138 	.word	0x20000138

08003698 <WriteQueue>:

void WriteQueue(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af02      	add	r7, sp, #8
	drawFigure(queue[1].figure,queue[1].angle,13 ,10 ,true,ROTATION_90_DEGREES);
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <WriteQueue+0x60>)
 80036a0:	789b      	ldrb	r3, [r3, #2]
 80036a2:	b258      	sxtb	r0, r3
 80036a4:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <WriteQueue+0x60>)
 80036a6:	78db      	ldrb	r3, [r3, #3]
 80036a8:	b259      	sxtb	r1, r3
 80036aa:	2301      	movs	r3, #1
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	2301      	movs	r3, #1
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	230a      	movs	r3, #10
 80036b4:	220d      	movs	r2, #13
 80036b6:	f004 f87b 	bl	80077b0 <drawFigure>
	drawFigure(queue[2].figure,queue[2].angle,13 ,15 ,true,ROTATION_90_DEGREES);
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <WriteQueue+0x60>)
 80036bc:	791b      	ldrb	r3, [r3, #4]
 80036be:	b258      	sxtb	r0, r3
 80036c0:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <WriteQueue+0x60>)
 80036c2:	795b      	ldrb	r3, [r3, #5]
 80036c4:	b259      	sxtb	r1, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2301      	movs	r3, #1
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	230f      	movs	r3, #15
 80036d0:	220d      	movs	r2, #13
 80036d2:	f004 f86d 	bl	80077b0 <drawFigure>
	drawFigure(queue[3].figure,queue[3].angle,13 ,20 ,true,ROTATION_90_DEGREES);
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <WriteQueue+0x60>)
 80036d8:	799b      	ldrb	r3, [r3, #6]
 80036da:	b258      	sxtb	r0, r3
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <WriteQueue+0x60>)
 80036de:	79db      	ldrb	r3, [r3, #7]
 80036e0:	b259      	sxtb	r1, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2301      	movs	r3, #1
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2314      	movs	r3, #20
 80036ec:	220d      	movs	r2, #13
 80036ee:	f004 f85f 	bl	80077b0 <drawFigure>
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000240 	.word	0x20000240

080036fc <WriteScore>:

void WriteScore(uint16_t score, t_rotation rotation,bool endGame)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af02      	add	r7, sp, #8
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
 8003706:	460b      	mov	r3, r1
 8003708:	717b      	strb	r3, [r7, #5]
 800370a:	4613      	mov	r3, r2
 800370c:	713b      	strb	r3, [r7, #4]
uint8_t a,b,c,counter=1;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]

a=score/100;
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	4a95      	ldr	r2, [pc, #596]	@ (800396c <WriteScore+0x270>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	b29b      	uxth	r3, r3
 800371e:	73bb      	strb	r3, [r7, #14]
b=(score-a*100)/10;
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	7bbb      	ldrb	r3, [r7, #14]
 8003724:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	4a90      	ldr	r2, [pc, #576]	@ (8003970 <WriteScore+0x274>)
 8003730:	fb82 1203 	smull	r1, r2, r2, r3
 8003734:	1092      	asrs	r2, r2, #2
 8003736:	17db      	asrs	r3, r3, #31
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	737b      	strb	r3, [r7, #13]
c=score-a*100-b*10;
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	7b7b      	ldrb	r3, [r7, #13]
 8003742:	4619      	mov	r1, r3
 8003744:	0149      	lsls	r1, r1, #5
 8003746:	1ac9      	subs	r1, r1, r3
 8003748:	0089      	lsls	r1, r1, #2
 800374a:	1acb      	subs	r3, r1, r3
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	b2d9      	uxtb	r1, r3
 8003750:	7bbb      	ldrb	r3, [r7, #14]
 8003752:	4618      	mov	r0, r3
 8003754:	0080      	lsls	r0, r0, #2
 8003756:	4418      	add	r0, r3
 8003758:	00c0      	lsls	r0, r0, #3
 800375a:	1ac3      	subs	r3, r0, r3
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	440b      	add	r3, r1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4413      	add	r3, r2
 8003766:	733b      	strb	r3, [r7, #12]

if(a!=0)
 8003768:	7bbb      	ldrb	r3, [r7, #14]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <WriteScore+0x76>
{
	counter=3;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
}

if((b!=0)&&(a==0))
 8003772:	7b7b      	ldrb	r3, [r7, #13]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <WriteScore+0x88>
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <WriteScore+0x88>
{
	counter++;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	3301      	adds	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
}

	switch(rotation)
 8003784:	797b      	ldrb	r3, [r7, #5]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d003      	beq.n	8003792 <WriteScore+0x96>
 800378a:	2b03      	cmp	r3, #3
 800378c:	f000 808c 	beq.w	80038a8 <WriteScore+0x1ac>
			}
		break;

		default:

		break;
 8003790:	e0e7      	b.n	8003962 <WriteScore+0x266>
			if(endGame==false)
 8003792:	793b      	ldrb	r3, [r7, #4]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d05a      	beq.n	8003854 <WriteScore+0x158>
				switch(counter)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d02f      	beq.n	8003804 <WriteScore+0x108>
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	dc7d      	bgt.n	80038a4 <WriteScore+0x1a8>
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <WriteScore+0xb6>
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d00e      	beq.n	80037ce <WriteScore+0xd2>
					break;
 80037b0:	e078      	b.n	80038a4 <WriteScore+0x1a8>
						DrowDigit(9,0,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 80037b2:	4b70      	ldr	r3, [pc, #448]	@ (8003974 <WriteScore+0x278>)
 80037b4:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80037b8:	7b3a      	ldrb	r2, [r7, #12]
 80037ba:	797b      	ldrb	r3, [r7, #5]
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	460b      	mov	r3, r1
 80037c4:	2100      	movs	r1, #0
 80037c6:	2009      	movs	r0, #9
 80037c8:	f002 fc66 	bl	8006098 <DrowDigit>
					break;
 80037cc:	e06b      	b.n	80038a6 <WriteScore+0x1aa>
						DrowDigit(6,0,b,Application.tetrisDefinition.font_style,SMALL,rotation);
 80037ce:	4b69      	ldr	r3, [pc, #420]	@ (8003974 <WriteScore+0x278>)
 80037d0:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80037d4:	7b7a      	ldrb	r2, [r7, #13]
 80037d6:	797b      	ldrb	r3, [r7, #5]
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	460b      	mov	r3, r1
 80037e0:	2100      	movs	r1, #0
 80037e2:	2006      	movs	r0, #6
 80037e4:	f002 fc58 	bl	8006098 <DrowDigit>
						DrowDigit(12,0,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 80037e8:	4b62      	ldr	r3, [pc, #392]	@ (8003974 <WriteScore+0x278>)
 80037ea:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80037ee:	7b3a      	ldrb	r2, [r7, #12]
 80037f0:	797b      	ldrb	r3, [r7, #5]
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	460b      	mov	r3, r1
 80037fa:	2100      	movs	r1, #0
 80037fc:	200c      	movs	r0, #12
 80037fe:	f002 fc4b 	bl	8006098 <DrowDigit>
					break;
 8003802:	e050      	b.n	80038a6 <WriteScore+0x1aa>
						DrowDigit(4,0,a,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003804:	4b5b      	ldr	r3, [pc, #364]	@ (8003974 <WriteScore+0x278>)
 8003806:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 800380a:	7bba      	ldrb	r2, [r7, #14]
 800380c:	797b      	ldrb	r3, [r7, #5]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	2300      	movs	r3, #0
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	460b      	mov	r3, r1
 8003816:	2100      	movs	r1, #0
 8003818:	2004      	movs	r0, #4
 800381a:	f002 fc3d 	bl	8006098 <DrowDigit>
						DrowDigit(9,0,b,Application.tetrisDefinition.font_style,SMALL,rotation);
 800381e:	4b55      	ldr	r3, [pc, #340]	@ (8003974 <WriteScore+0x278>)
 8003820:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8003824:	7b7a      	ldrb	r2, [r7, #13]
 8003826:	797b      	ldrb	r3, [r7, #5]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	2300      	movs	r3, #0
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	460b      	mov	r3, r1
 8003830:	2100      	movs	r1, #0
 8003832:	2009      	movs	r0, #9
 8003834:	f002 fc30 	bl	8006098 <DrowDigit>
						DrowDigit(14,0,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003838:	4b4e      	ldr	r3, [pc, #312]	@ (8003974 <WriteScore+0x278>)
 800383a:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 800383e:	7b3a      	ldrb	r2, [r7, #12]
 8003840:	797b      	ldrb	r3, [r7, #5]
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	460b      	mov	r3, r1
 800384a:	2100      	movs	r1, #0
 800384c:	200e      	movs	r0, #14
 800384e:	f002 fc23 	bl	8006098 <DrowDigit>
					break;
 8003852:	e028      	b.n	80038a6 <WriteScore+0x1aa>
				DrowDigit(4,8,a,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003854:	4b47      	ldr	r3, [pc, #284]	@ (8003974 <WriteScore+0x278>)
 8003856:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 800385a:	7bba      	ldrb	r2, [r7, #14]
 800385c:	797b      	ldrb	r3, [r7, #5]
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2300      	movs	r3, #0
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	460b      	mov	r3, r1
 8003866:	2108      	movs	r1, #8
 8003868:	2004      	movs	r0, #4
 800386a:	f002 fc15 	bl	8006098 <DrowDigit>
				DrowDigit(9,8,b,Application.tetrisDefinition.font_style,SMALL,rotation);
 800386e:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <WriteScore+0x278>)
 8003870:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8003874:	7b7a      	ldrb	r2, [r7, #13]
 8003876:	797b      	ldrb	r3, [r7, #5]
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	460b      	mov	r3, r1
 8003880:	2108      	movs	r1, #8
 8003882:	2009      	movs	r0, #9
 8003884:	f002 fc08 	bl	8006098 <DrowDigit>
				DrowDigit(14,8,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003888:	4b3a      	ldr	r3, [pc, #232]	@ (8003974 <WriteScore+0x278>)
 800388a:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 800388e:	7b3a      	ldrb	r2, [r7, #12]
 8003890:	797b      	ldrb	r3, [r7, #5]
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2300      	movs	r3, #0
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	460b      	mov	r3, r1
 800389a:	2108      	movs	r1, #8
 800389c:	200e      	movs	r0, #14
 800389e:	f002 fbfb 	bl	8006098 <DrowDigit>
		break;
 80038a2:	e05e      	b.n	8003962 <WriteScore+0x266>
					break;
 80038a4:	bf00      	nop
		break;
 80038a6:	e05c      	b.n	8003962 <WriteScore+0x266>
			switch(counter)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d02f      	beq.n	800390e <WriteScore+0x212>
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	dc55      	bgt.n	800395e <WriteScore+0x262>
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d002      	beq.n	80038bc <WriteScore+0x1c0>
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d00e      	beq.n	80038d8 <WriteScore+0x1dc>
				break;
 80038ba:	e050      	b.n	800395e <WriteScore+0x262>
					DrowDigit(6,31,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 80038bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <WriteScore+0x278>)
 80038be:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	797b      	ldrb	r3, [r7, #5]
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	460b      	mov	r3, r1
 80038ce:	211f      	movs	r1, #31
 80038d0:	2006      	movs	r0, #6
 80038d2:	f002 fbe1 	bl	8006098 <DrowDigit>
				break;
 80038d6:	e043      	b.n	8003960 <WriteScore+0x264>
					DrowDigit(9,31,b,Application.tetrisDefinition.font_style,SMALL,rotation);
 80038d8:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <WriteScore+0x278>)
 80038da:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80038de:	7b7a      	ldrb	r2, [r7, #13]
 80038e0:	797b      	ldrb	r3, [r7, #5]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	460b      	mov	r3, r1
 80038ea:	211f      	movs	r1, #31
 80038ec:	2009      	movs	r0, #9
 80038ee:	f002 fbd3 	bl	8006098 <DrowDigit>
					DrowDigit(3,31,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 80038f2:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <WriteScore+0x278>)
 80038f4:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80038f8:	7b3a      	ldrb	r2, [r7, #12]
 80038fa:	797b      	ldrb	r3, [r7, #5]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	460b      	mov	r3, r1
 8003904:	211f      	movs	r1, #31
 8003906:	2003      	movs	r0, #3
 8003908:	f002 fbc6 	bl	8006098 <DrowDigit>
				break;
 800390c:	e028      	b.n	8003960 <WriteScore+0x264>
					DrowDigit(11,31,a,Application.tetrisDefinition.font_style,SMALL,rotation);
 800390e:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <WriteScore+0x278>)
 8003910:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8003914:	7bba      	ldrb	r2, [r7, #14]
 8003916:	797b      	ldrb	r3, [r7, #5]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	2300      	movs	r3, #0
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	460b      	mov	r3, r1
 8003920:	211f      	movs	r1, #31
 8003922:	200b      	movs	r0, #11
 8003924:	f002 fbb8 	bl	8006098 <DrowDigit>
					DrowDigit(6,31,b,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003928:	4b12      	ldr	r3, [pc, #72]	@ (8003974 <WriteScore+0x278>)
 800392a:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 800392e:	7b7a      	ldrb	r2, [r7, #13]
 8003930:	797b      	ldrb	r3, [r7, #5]
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	211f      	movs	r1, #31
 800393c:	2006      	movs	r0, #6
 800393e:	f002 fbab 	bl	8006098 <DrowDigit>
					DrowDigit(1,31,c,Application.tetrisDefinition.font_style,SMALL,rotation);
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <WriteScore+0x278>)
 8003944:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8003948:	7b3a      	ldrb	r2, [r7, #12]
 800394a:	797b      	ldrb	r3, [r7, #5]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	2300      	movs	r3, #0
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	460b      	mov	r3, r1
 8003954:	211f      	movs	r1, #31
 8003956:	2001      	movs	r0, #1
 8003958:	f002 fb9e 	bl	8006098 <DrowDigit>
				break;
 800395c:	e000      	b.n	8003960 <WriteScore+0x264>
				break;
 800395e:	bf00      	nop
		break;
 8003960:	bf00      	nop
	}
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	51eb851f 	.word	0x51eb851f
 8003970:	66666667 	.word	0x66666667
 8003974:	20000138 	.word	0x20000138

08003978 <WriteAdditionalMode>:

void WriteAdditionalMode(t_rotation rotation)
{
 8003978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af04      	add	r7, sp, #16
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
uint8_t value,letter,v,vv,j,i;
t_font_style style;
bool isNeedBorder=false;
 8003982:	2300      	movs	r3, #0
 8003984:	727b      	strb	r3, [r7, #9]

	if(Application.addtionalFunctions==SHOWN_DATE)
 8003986:	4bb3      	ldr	r3, [pc, #716]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 8003988:	789b      	ldrb	r3, [r3, #2]
 800398a:	2b05      	cmp	r3, #5
 800398c:	d11d      	bne.n	80039ca <WriteAdditionalMode+0x52>
	{
		WriteTimeSmallSixDigits(RTC_data.Day, RTC_data.Mounth, (RTC_data.Year%100), Application.rotation, Application.clockDefinition.clock_style, Application.clockDefinition.isBorderEnabled, false);
 800398e:	4bb2      	ldr	r3, [pc, #712]	@ (8003c58 <WriteAdditionalMode+0x2e0>)
 8003990:	78d8      	ldrb	r0, [r3, #3]
 8003992:	4bb1      	ldr	r3, [pc, #708]	@ (8003c58 <WriteAdditionalMode+0x2e0>)
 8003994:	7919      	ldrb	r1, [r3, #4]
 8003996:	4bb0      	ldr	r3, [pc, #704]	@ (8003c58 <WriteAdditionalMode+0x2e0>)
 8003998:	88db      	ldrh	r3, [r3, #6]
 800399a:	4ab0      	ldr	r2, [pc, #704]	@ (8003c5c <WriteAdditionalMode+0x2e4>)
 800399c:	fba2 4203 	umull	r4, r2, r2, r3
 80039a0:	0952      	lsrs	r2, r2, #5
 80039a2:	2464      	movs	r4, #100	@ 0x64
 80039a4:	fb04 f202 	mul.w	r2, r4, r2
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b2dc      	uxtb	r4, r3
 80039ae:	4ba9      	ldr	r3, [pc, #676]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 80039b0:	791d      	ldrb	r5, [r3, #4]
 80039b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 80039b4:	7a1b      	ldrb	r3, [r3, #8]
 80039b6:	4aa7      	ldr	r2, [pc, #668]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 80039b8:	7a92      	ldrb	r2, [r2, #10]
 80039ba:	2600      	movs	r6, #0
 80039bc:	9602      	str	r6, [sp, #8]
 80039be:	9201      	str	r2, [sp, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	462b      	mov	r3, r5
 80039c4:	4622      	mov	r2, r4
 80039c6:	f001 ffab 	bl	8005920 <WriteTimeSmallSixDigits>
	}

	if(Application.addtionalFunctions==SHOWN_AUTO_BRIGHTNESS)
 80039ca:	4ba2      	ldr	r3, [pc, #648]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 80039cc:	789b      	ldrb	r3, [r3, #2]
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	f040 80c2 	bne.w	8003b58 <WriteAdditionalMode+0x1e0>
	{
		style=Application.clockDefinition.font_style;
 80039d4:	4b9f      	ldr	r3, [pc, #636]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 80039d6:	7a5b      	ldrb	r3, [r3, #9]
 80039d8:	72bb      	strb	r3, [r7, #10]
		if(Application.isAutoBrightnessEnabled == true)
 80039da:	4b9e      	ldr	r3, [pc, #632]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 80039dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <WriteAdditionalMode+0x72>
			v=1;
 80039e4:	2301      	movs	r3, #1
 80039e6:	737b      	strb	r3, [r7, #13]
 80039e8:	e001      	b.n	80039ee <WriteAdditionalMode+0x76>
		else
			v=0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	737b      	strb	r3, [r7, #13]

		switch(rotation)
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	f200 80b1 	bhi.w	8003b58 <WriteAdditionalMode+0x1e0>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <WriteAdditionalMode+0x84>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a6f 	.word	0x08003a6f
 8003a04:	08003ab3 	.word	0x08003ab3
 8003a08:	08003b15 	.word	0x08003b15
		{
			case ROTATION_0_DEGREES:
				DrowDigit(4,22,A_LETTER,style,LETTER,rotation);
 8003a0c:	7aba      	ldrb	r2, [r7, #10]
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2302      	movs	r3, #2
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2116      	movs	r1, #22
 8003a1c:	2004      	movs	r0, #4
 8003a1e:	f002 fb3b 	bl	8006098 <DrowDigit>
				DrowDigit(4,16,B_LETTER,style,LETTER,rotation);
 8003a22:	7aba      	ldrb	r2, [r7, #10]
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	2302      	movs	r3, #2
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2110      	movs	r1, #16
 8003a32:	2004      	movs	r0, #4
 8003a34:	f002 fb30 	bl	8006098 <DrowDigit>
				for(i=10;i<15;i++)
 8003a38:	230a      	movs	r3, #10
 8003a3a:	72fb      	strb	r3, [r7, #11]
 8003a3c:	e008      	b.n	8003a50 <WriteAdditionalMode+0xd8>
				{
					SetPixel(7,i,true);
 8003a3e:	7afb      	ldrb	r3, [r7, #11]
 8003a40:	2201      	movs	r2, #1
 8003a42:	4619      	mov	r1, r3
 8003a44:	2007      	movs	r0, #7
 8003a46:	f002 fa0d 	bl	8005e64 <SetPixel>
				for(i=10;i<15;i++)
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	72fb      	strb	r3, [r7, #11]
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	2b0e      	cmp	r3, #14
 8003a54:	d9f3      	bls.n	8003a3e <WriteAdditionalMode+0xc6>
				}
				DrowDigit(4,5,v,style,SMALL,rotation);
 8003a56:	7ab9      	ldrb	r1, [r7, #10]
 8003a58:	7b7a      	ldrb	r2, [r7, #13]
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	460b      	mov	r3, r1
 8003a64:	2105      	movs	r1, #5
 8003a66:	2004      	movs	r0, #4
 8003a68:	f002 fb16 	bl	8006098 <DrowDigit>
			break;
 8003a6c:	e074      	b.n	8003b58 <WriteAdditionalMode+0x1e0>

			case ROTATION_90_DEGREES:
				DrowDigit(6,8,A_LETTER,style,LETTER,rotation);
 8003a6e:	7aba      	ldrb	r2, [r7, #10]
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2302      	movs	r3, #2
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2108      	movs	r1, #8
 8003a7e:	2006      	movs	r0, #6
 8003a80:	f002 fb0a 	bl	8006098 <DrowDigit>
				DrowDigit(13,8,B_LETTER,style,LETTER,rotation);
 8003a84:	7aba      	ldrb	r2, [r7, #10]
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	2201      	movs	r2, #1
 8003a92:	2108      	movs	r1, #8
 8003a94:	200d      	movs	r0, #13
 8003a96:	f002 faff 	bl	8006098 <DrowDigit>
				DrowDigit(9,17,v,style,SMALL,rotation);
 8003a9a:	7ab9      	ldrb	r1, [r7, #10]
 8003a9c:	7b7a      	ldrb	r2, [r7, #13]
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	2111      	movs	r1, #17
 8003aaa:	2009      	movs	r0, #9
 8003aac:	f002 faf4 	bl	8006098 <DrowDigit>
			break;
 8003ab0:	e052      	b.n	8003b58 <WriteAdditionalMode+0x1e0>

			case ROTATION_180_DEGREES:
				DrowDigit(11,9,A_LETTER,style,LETTER,rotation);
 8003ab2:	7aba      	ldrb	r2, [r7, #10]
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2302      	movs	r3, #2
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2109      	movs	r1, #9
 8003ac2:	200b      	movs	r0, #11
 8003ac4:	f002 fae8 	bl	8006098 <DrowDigit>
				DrowDigit(11,15,B_LETTER,style,LETTER,rotation);
 8003ac8:	7aba      	ldrb	r2, [r7, #10]
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2302      	movs	r3, #2
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	200b      	movs	r0, #11
 8003ada:	f002 fadd 	bl	8006098 <DrowDigit>
				for(i=17;i<22;i++)
 8003ade:	2311      	movs	r3, #17
 8003ae0:	72fb      	strb	r3, [r7, #11]
 8003ae2:	e008      	b.n	8003af6 <WriteAdditionalMode+0x17e>
				{
					SetPixel(8,i,true);
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4619      	mov	r1, r3
 8003aea:	2008      	movs	r0, #8
 8003aec:	f002 f9ba 	bl	8005e64 <SetPixel>
				for(i=17;i<22;i++)
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	3301      	adds	r3, #1
 8003af4:	72fb      	strb	r3, [r7, #11]
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	2b15      	cmp	r3, #21
 8003afa:	d9f3      	bls.n	8003ae4 <WriteAdditionalMode+0x16c>
				}
				DrowDigit(11,26,v,style,SMALL,rotation);
 8003afc:	7ab9      	ldrb	r1, [r7, #10]
 8003afe:	7b7a      	ldrb	r2, [r7, #13]
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	211a      	movs	r1, #26
 8003b0c:	200b      	movs	r0, #11
 8003b0e:	f002 fac3 	bl	8006098 <DrowDigit>
			break;
 8003b12:	e021      	b.n	8003b58 <WriteAdditionalMode+0x1e0>

			case ROTATION_270_DEGREES:
				DrowDigit(9,23,A_LETTER,style,LETTER,rotation);
 8003b14:	7aba      	ldrb	r2, [r7, #10]
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	2200      	movs	r2, #0
 8003b22:	2117      	movs	r1, #23
 8003b24:	2009      	movs	r0, #9
 8003b26:	f002 fab7 	bl	8006098 <DrowDigit>
				DrowDigit(2,23,B_LETTER,style,LETTER,rotation);
 8003b2a:	7aba      	ldrb	r2, [r7, #10]
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	2302      	movs	r3, #2
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	2201      	movs	r2, #1
 8003b38:	2117      	movs	r1, #23
 8003b3a:	2002      	movs	r0, #2
 8003b3c:	f002 faac 	bl	8006098 <DrowDigit>
				DrowDigit(6,14,v,style,SMALL,rotation);
 8003b40:	7ab9      	ldrb	r1, [r7, #10]
 8003b42:	7b7a      	ldrb	r2, [r7, #13]
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	210e      	movs	r1, #14
 8003b50:	2006      	movs	r0, #6
 8003b52:	f002 faa1 	bl	8006098 <DrowDigit>
			break;
 8003b56:	bf00      	nop
		}
	}

	if(Application.addtionalFunctions==SHOWN_SET)
 8003b58:	4b3e      	ldr	r3, [pc, #248]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 8003b5a:	789b      	ldrb	r3, [r3, #2]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	f040 80a1 	bne.w	8003ca4 <WriteAdditionalMode+0x32c>
	{
		style=Application.clockDefinition.font_style;
 8003b62:	4b3c      	ldr	r3, [pc, #240]	@ (8003c54 <WriteAdditionalMode+0x2dc>)
 8003b64:	7a5b      	ldrb	r3, [r3, #9]
 8003b66:	72bb      	strb	r3, [r7, #10]
		switch(rotation)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	f200 809a 	bhi.w	8003ca4 <WriteAdditionalMode+0x32c>
 8003b70:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <WriteAdditionalMode+0x200>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003c11 	.word	0x08003c11
 8003b84:	08003c61 	.word	0x08003c61
		{
			case ROTATION_0_DEGREES:
				DrowDigit(4,20,S_LETTER,style,LETTER,rotation);
 8003b88:	7aba      	ldrb	r2, [r7, #10]
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	2302      	movs	r3, #2
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	2207      	movs	r2, #7
 8003b96:	2114      	movs	r1, #20
 8003b98:	2004      	movs	r0, #4
 8003b9a:	f002 fa7d 	bl	8006098 <DrowDigit>
				DrowDigit(4,14,E_LETTER,style,LETTER,rotation);
 8003b9e:	7aba      	ldrb	r2, [r7, #10]
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	2204      	movs	r2, #4
 8003bac:	210e      	movs	r1, #14
 8003bae:	2004      	movs	r0, #4
 8003bb0:	f002 fa72 	bl	8006098 <DrowDigit>
				DrowDigit(4,8,T_LETTER,style,LETTER,rotation);
 8003bb4:	7aba      	ldrb	r2, [r7, #10]
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2302      	movs	r3, #2
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	2004      	movs	r0, #4
 8003bc6:	f002 fa67 	bl	8006098 <DrowDigit>
			break;
 8003bca:	e06b      	b.n	8003ca4 <WriteAdditionalMode+0x32c>

			case ROTATION_90_DEGREES:
				DrowDigit(9,5,S_LETTER,style,LETTER,rotation);
 8003bcc:	7aba      	ldrb	r2, [r7, #10]
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	2207      	movs	r2, #7
 8003bda:	2105      	movs	r1, #5
 8003bdc:	2009      	movs	r0, #9
 8003bde:	f002 fa5b 	bl	8006098 <DrowDigit>
				DrowDigit(9,13,E_LETTER,style,LETTER,rotation);
 8003be2:	7aba      	ldrb	r2, [r7, #10]
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	2204      	movs	r2, #4
 8003bf0:	210d      	movs	r1, #13
 8003bf2:	2009      	movs	r0, #9
 8003bf4:	f002 fa50 	bl	8006098 <DrowDigit>
				DrowDigit(9,21,T_LETTER,style,LETTER,rotation);
 8003bf8:	7aba      	ldrb	r2, [r7, #10]
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2302      	movs	r3, #2
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	2202      	movs	r2, #2
 8003c06:	2115      	movs	r1, #21
 8003c08:	2009      	movs	r0, #9
 8003c0a:	f002 fa45 	bl	8006098 <DrowDigit>
			break;
 8003c0e:	e049      	b.n	8003ca4 <WriteAdditionalMode+0x32c>

			case ROTATION_180_DEGREES:
				DrowDigit(11,11,S_LETTER,style,LETTER,rotation);
 8003c10:	7aba      	ldrb	r2, [r7, #10]
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	2302      	movs	r3, #2
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	210b      	movs	r1, #11
 8003c20:	200b      	movs	r0, #11
 8003c22:	f002 fa39 	bl	8006098 <DrowDigit>
				DrowDigit(11,17,E_LETTER,style,LETTER,rotation);
 8003c26:	7aba      	ldrb	r2, [r7, #10]
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	2204      	movs	r2, #4
 8003c34:	2111      	movs	r1, #17
 8003c36:	200b      	movs	r0, #11
 8003c38:	f002 fa2e 	bl	8006098 <DrowDigit>
				DrowDigit(11,23,T_LETTER,style,LETTER,rotation);
 8003c3c:	7aba      	ldrb	r2, [r7, #10]
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2302      	movs	r3, #2
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	2202      	movs	r2, #2
 8003c4a:	2117      	movs	r1, #23
 8003c4c:	200b      	movs	r0, #11
 8003c4e:	f002 fa23 	bl	8006098 <DrowDigit>
			break;
 8003c52:	e027      	b.n	8003ca4 <WriteAdditionalMode+0x32c>
 8003c54:	20000138 	.word	0x20000138
 8003c58:	200001a0 	.word	0x200001a0
 8003c5c:	51eb851f 	.word	0x51eb851f

			case ROTATION_270_DEGREES:
				DrowDigit(6,26,S_LETTER,style,LETTER,rotation);
 8003c60:	7aba      	ldrb	r2, [r7, #10]
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	2302      	movs	r3, #2
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	211a      	movs	r1, #26
 8003c70:	2006      	movs	r0, #6
 8003c72:	f002 fa11 	bl	8006098 <DrowDigit>
				DrowDigit(6,18,E_LETTER,style,LETTER,rotation);
 8003c76:	7aba      	ldrb	r2, [r7, #10]
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	2204      	movs	r2, #4
 8003c84:	2112      	movs	r1, #18
 8003c86:	2006      	movs	r0, #6
 8003c88:	f002 fa06 	bl	8006098 <DrowDigit>
				DrowDigit(6,10,T_LETTER,style,LETTER,rotation);
 8003c8c:	7aba      	ldrb	r2, [r7, #10]
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	2302      	movs	r3, #2
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	2202      	movs	r2, #2
 8003c9a:	210a      	movs	r1, #10
 8003c9c:	2006      	movs	r0, #6
 8003c9e:	f002 f9fb 	bl	8006098 <DrowDigit>
			break;
 8003ca2:	bf00      	nop
		}
	}

	if((Application.addtionalFunctions==SET_BRIGHTNESS)||(Application.addtionalFunctions==SET_VOLUME))
 8003ca4:	4baa      	ldr	r3, [pc, #680]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003ca6:	789b      	ldrb	r3, [r3, #2]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d004      	beq.n	8003cb6 <WriteAdditionalMode+0x33e>
 8003cac:	4ba8      	ldr	r3, [pc, #672]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003cae:	789b      	ldrb	r3, [r3, #2]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f040 80dd 	bne.w	8003e70 <WriteAdditionalMode+0x4f8>
	{
		style=Application.clockDefinition.font_style;
 8003cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003cb8:	7a5b      	ldrb	r3, [r3, #9]
 8003cba:	72bb      	strb	r3, [r7, #10]

		if(Application.addtionalFunctions==SET_BRIGHTNESS)
 8003cbc:	4ba4      	ldr	r3, [pc, #656]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003cbe:	789b      	ldrb	r3, [r3, #2]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <WriteAdditionalMode+0x358>
		{
			letter=B_LETTER;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73bb      	strb	r3, [r7, #14]
			value=Application.intensivity;
 8003cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003cca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003cce:	73fb      	strb	r3, [r7, #15]
		}

		if(Application.addtionalFunctions==SET_VOLUME)
 8003cd0:	4b9f      	ldr	r3, [pc, #636]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003cd2:	789b      	ldrb	r3, [r3, #2]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d105      	bne.n	8003ce4 <WriteAdditionalMode+0x36c>
		{
			letter=V_LETTER;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	73bb      	strb	r3, [r7, #14]
			value=Application.volume;
 8003cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003cde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ce2:	73fb      	strb	r3, [r7, #15]
		}

		v=value/10;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	4a9b      	ldr	r2, [pc, #620]	@ (8003f54 <WriteAdditionalMode+0x5dc>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	737b      	strb	r3, [r7, #13]
		vv=value-v*10;
 8003cf0:	7b7b      	ldrb	r3, [r7, #13]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	0152      	lsls	r2, r2, #5
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	4413      	add	r3, r2
 8003d04:	723b      	strb	r3, [r7, #8]

		switch(rotation)
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	f200 80b1 	bhi.w	8003e70 <WriteAdditionalMode+0x4f8>
 8003d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <WriteAdditionalMode+0x39c>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d87 	.word	0x08003d87
 8003d1c:	08003dcb 	.word	0x08003dcb
 8003d20:	08003e2d 	.word	0x08003e2d
		{
			case ROTATION_0_DEGREES:
				DrowDigit(4,22,letter,style,LETTER,rotation);
 8003d24:	7ab9      	ldrb	r1, [r7, #10]
 8003d26:	7bba      	ldrb	r2, [r7, #14]
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	460b      	mov	r3, r1
 8003d32:	2116      	movs	r1, #22
 8003d34:	2004      	movs	r0, #4
 8003d36:	f002 f9af 	bl	8006098 <DrowDigit>
				DrowDigit(4,10,v,style,SMALL,rotation);
 8003d3a:	7ab9      	ldrb	r1, [r7, #10]
 8003d3c:	7b7a      	ldrb	r2, [r7, #13]
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	460b      	mov	r3, r1
 8003d48:	210a      	movs	r1, #10
 8003d4a:	2004      	movs	r0, #4
 8003d4c:	f002 f9a4 	bl	8006098 <DrowDigit>
				DrowDigit(4,5,vv,style,SMALL,rotation);
 8003d50:	7ab9      	ldrb	r1, [r7, #10]
 8003d52:	7a3a      	ldrb	r2, [r7, #8]
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	2105      	movs	r1, #5
 8003d60:	2004      	movs	r0, #4
 8003d62:	f002 f999 	bl	8006098 <DrowDigit>

				for(j=15;j<=20;j++)
 8003d66:	230f      	movs	r3, #15
 8003d68:	733b      	strb	r3, [r7, #12]
 8003d6a:	e008      	b.n	8003d7e <WriteAdditionalMode+0x406>
				{
					SetPixel(7, j, true);
 8003d6c:	7b3b      	ldrb	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4619      	mov	r1, r3
 8003d72:	2007      	movs	r0, #7
 8003d74:	f002 f876 	bl	8005e64 <SetPixel>
				for(j=15;j<=20;j++)
 8003d78:	7b3b      	ldrb	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	733b      	strb	r3, [r7, #12]
 8003d7e:	7b3b      	ldrb	r3, [r7, #12]
 8003d80:	2b14      	cmp	r3, #20
 8003d82:	d9f3      	bls.n	8003d6c <WriteAdditionalMode+0x3f4>
				}

			break;
 8003d84:	e074      	b.n	8003e70 <WriteAdditionalMode+0x4f8>

			case ROTATION_90_DEGREES:
				DrowDigit(10,8,letter,style,LETTER,rotation);
 8003d86:	7ab9      	ldrb	r1, [r7, #10]
 8003d88:	7bba      	ldrb	r2, [r7, #14]
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2302      	movs	r3, #2
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	460b      	mov	r3, r1
 8003d94:	2108      	movs	r1, #8
 8003d96:	200a      	movs	r0, #10
 8003d98:	f002 f97e 	bl	8006098 <DrowDigit>
				DrowDigit(6,17,v,style,SMALL,rotation);
 8003d9c:	7ab9      	ldrb	r1, [r7, #10]
 8003d9e:	7b7a      	ldrb	r2, [r7, #13]
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2300      	movs	r3, #0
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	460b      	mov	r3, r1
 8003daa:	2111      	movs	r1, #17
 8003dac:	2006      	movs	r0, #6
 8003dae:	f002 f973 	bl	8006098 <DrowDigit>
				DrowDigit(12,17,vv,style,SMALL,rotation);
 8003db2:	7ab9      	ldrb	r1, [r7, #10]
 8003db4:	7a3a      	ldrb	r2, [r7, #8]
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	2111      	movs	r1, #17
 8003dc2:	200c      	movs	r0, #12
 8003dc4:	f002 f968 	bl	8006098 <DrowDigit>
			break;
 8003dc8:	e052      	b.n	8003e70 <WriteAdditionalMode+0x4f8>

			case ROTATION_180_DEGREES:
				DrowDigit(11,9,letter,style,LETTER,rotation);
 8003dca:	7ab9      	ldrb	r1, [r7, #10]
 8003dcc:	7bba      	ldrb	r2, [r7, #14]
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	2109      	movs	r1, #9
 8003dda:	200b      	movs	r0, #11
 8003ddc:	f002 f95c 	bl	8006098 <DrowDigit>
				DrowDigit(11,21,v,style,SMALL,rotation);
 8003de0:	7ab9      	ldrb	r1, [r7, #10]
 8003de2:	7b7a      	ldrb	r2, [r7, #13]
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	460b      	mov	r3, r1
 8003dee:	2115      	movs	r1, #21
 8003df0:	200b      	movs	r0, #11
 8003df2:	f002 f951 	bl	8006098 <DrowDigit>
				DrowDigit(11,26,vv,style,SMALL,rotation);
 8003df6:	7ab9      	ldrb	r1, [r7, #10]
 8003df8:	7a3a      	ldrb	r2, [r7, #8]
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	460b      	mov	r3, r1
 8003e04:	211a      	movs	r1, #26
 8003e06:	200b      	movs	r0, #11
 8003e08:	f002 f946 	bl	8006098 <DrowDigit>

				for(j=11;j<=16;j++)
 8003e0c:	230b      	movs	r3, #11
 8003e0e:	733b      	strb	r3, [r7, #12]
 8003e10:	e008      	b.n	8003e24 <WriteAdditionalMode+0x4ac>
				{
					SetPixel(8, j, true);
 8003e12:	7b3b      	ldrb	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	4619      	mov	r1, r3
 8003e18:	2008      	movs	r0, #8
 8003e1a:	f002 f823 	bl	8005e64 <SetPixel>
				for(j=11;j<=16;j++)
 8003e1e:	7b3b      	ldrb	r3, [r7, #12]
 8003e20:	3301      	adds	r3, #1
 8003e22:	733b      	strb	r3, [r7, #12]
 8003e24:	7b3b      	ldrb	r3, [r7, #12]
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d9f3      	bls.n	8003e12 <WriteAdditionalMode+0x49a>
				}
			break;
 8003e2a:	e021      	b.n	8003e70 <WriteAdditionalMode+0x4f8>

			case ROTATION_270_DEGREES:
				DrowDigit(5,23,letter,style,LETTER,rotation);
 8003e2c:	7ab9      	ldrb	r1, [r7, #10]
 8003e2e:	7bba      	ldrb	r2, [r7, #14]
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	2302      	movs	r3, #2
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	2117      	movs	r1, #23
 8003e3c:	2005      	movs	r0, #5
 8003e3e:	f002 f92b 	bl	8006098 <DrowDigit>
				DrowDigit(9,14,v,style,SMALL,rotation);
 8003e42:	7ab9      	ldrb	r1, [r7, #10]
 8003e44:	7b7a      	ldrb	r2, [r7, #13]
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	210e      	movs	r1, #14
 8003e52:	2009      	movs	r0, #9
 8003e54:	f002 f920 	bl	8006098 <DrowDigit>
				DrowDigit(3,14,vv,style,SMALL,rotation);
 8003e58:	7ab9      	ldrb	r1, [r7, #10]
 8003e5a:	7a3a      	ldrb	r2, [r7, #8]
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	2300      	movs	r3, #0
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	460b      	mov	r3, r1
 8003e66:	210e      	movs	r1, #14
 8003e68:	2003      	movs	r0, #3
 8003e6a:	f002 f915 	bl	8006098 <DrowDigit>
			break;
 8003e6e:	bf00      	nop
		}
	}

	if(Application.addtionalFunctions==COUNT_DOWN)
 8003e70:	4b37      	ldr	r3, [pc, #220]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003e72:	789b      	ldrb	r3, [r3, #2]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	f040 8132 	bne.w	80040de <WriteAdditionalMode+0x766>
	{
		value=Application.additionalFunctionsTimer;
 8003e7a:	4b35      	ldr	r3, [pc, #212]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e80:	73fb      	strb	r3, [r7, #15]

		if(value==11)	//Для синхронизации звука и картинки
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b0b      	cmp	r3, #11
 8003e86:	d101      	bne.n	8003e8c <WriteAdditionalMode+0x514>
			value=10;
 8003e88:	230a      	movs	r3, #10
 8003e8a:	73fb      	strb	r3, [r7, #15]

		v=value/10;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	4a31      	ldr	r2, [pc, #196]	@ (8003f54 <WriteAdditionalMode+0x5dc>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	737b      	strb	r3, [r7, #13]
		vv=value-v*10;
 8003e98:	7b7b      	ldrb	r3, [r7, #13]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	0152      	lsls	r2, r2, #5
 8003e9e:	1ad2      	subs	r2, r2, r3
 8003ea0:	0092      	lsls	r2, r2, #2
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	4413      	add	r3, r2
 8003eac:	723b      	strb	r3, [r7, #8]

		switch(rotation)
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	f200 8114 	bhi.w	80040de <WriteAdditionalMode+0x766>
 8003eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ebc <WriteAdditionalMode+0x544>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003f59 	.word	0x08003f59
 8003ec4:	08003fdb 	.word	0x08003fdb
 8003ec8:	0800405d 	.word	0x0800405d
		{
			case ROTATION_0_DEGREES:
				if(Application.clockDefinition.font_style==CLASSIC)
 8003ecc:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <WriteAdditionalMode+0x5d8>)
 8003ece:	7a5b      	ldrb	r3, [r3, #9]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <WriteAdditionalMode+0x58a>
				{
					DrowDigit(2,17,v,style,BIG,rotation);
 8003ed4:	7ab9      	ldrb	r1, [r7, #10]
 8003ed6:	7b7a      	ldrb	r2, [r7, #13]
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2301      	movs	r3, #1
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	2111      	movs	r1, #17
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f002 f8d7 	bl	8006098 <DrowDigit>
					DrowDigit(2,9,vv,style,BIG,rotation);
 8003eea:	7ab9      	ldrb	r1, [r7, #10]
 8003eec:	7a3a      	ldrb	r2, [r7, #8]
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	2109      	movs	r1, #9
 8003efa:	2002      	movs	r0, #2
 8003efc:	f002 f8cc 	bl	8006098 <DrowDigit>
					{
						DrowDigit(2,17,v,style,BIG,rotation);
						DrowDigit(2,9,vv,style,BIG,rotation);
					}
				}
			break;
 8003f00:	e0ed      	b.n	80040de <WriteAdditionalMode+0x766>
					if(v == 0)
 8003f02:	7b7b      	ldrb	r3, [r7, #13]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <WriteAdditionalMode+0x5a8>
						DrowDigit(2,13,vv,style,BIG,rotation);
 8003f08:	7ab9      	ldrb	r1, [r7, #10]
 8003f0a:	7a3a      	ldrb	r2, [r7, #8]
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2301      	movs	r3, #1
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	460b      	mov	r3, r1
 8003f16:	210d      	movs	r1, #13
 8003f18:	2002      	movs	r0, #2
 8003f1a:	f002 f8bd 	bl	8006098 <DrowDigit>
			break;
 8003f1e:	e0de      	b.n	80040de <WriteAdditionalMode+0x766>
						DrowDigit(2,17,v,style,BIG,rotation);
 8003f20:	7ab9      	ldrb	r1, [r7, #10]
 8003f22:	7b7a      	ldrb	r2, [r7, #13]
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	2111      	movs	r1, #17
 8003f30:	2002      	movs	r0, #2
 8003f32:	f002 f8b1 	bl	8006098 <DrowDigit>
						DrowDigit(2,9,vv,style,BIG,rotation);
 8003f36:	7ab9      	ldrb	r1, [r7, #10]
 8003f38:	7a3a      	ldrb	r2, [r7, #8]
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	460b      	mov	r3, r1
 8003f44:	2109      	movs	r1, #9
 8003f46:	2002      	movs	r0, #2
 8003f48:	f002 f8a6 	bl	8006098 <DrowDigit>
			break;
 8003f4c:	e0c7      	b.n	80040de <WriteAdditionalMode+0x766>
 8003f4e:	bf00      	nop
 8003f50:	20000138 	.word	0x20000138
 8003f54:	cccccccd 	.word	0xcccccccd

			case ROTATION_90_DEGREES:
				if(Application.clockDefinition.font_style==CLASSIC)
 8003f58:	4b9d      	ldr	r3, [pc, #628]	@ (80041d0 <WriteAdditionalMode+0x858>)
 8003f5a:	7a5b      	ldrb	r3, [r3, #9]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d116      	bne.n	8003f8e <WriteAdditionalMode+0x616>
				{
					DrowDigit(6,10,v,style,BIG,rotation);
 8003f60:	7ab9      	ldrb	r1, [r7, #10]
 8003f62:	7b7a      	ldrb	r2, [r7, #13]
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	210a      	movs	r1, #10
 8003f70:	2006      	movs	r0, #6
 8003f72:	f002 f891 	bl	8006098 <DrowDigit>
					DrowDigit(14,10,vv,style,BIG,rotation);
 8003f76:	7ab9      	ldrb	r1, [r7, #10]
 8003f78:	7a3a      	ldrb	r2, [r7, #8]
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	460b      	mov	r3, r1
 8003f84:	210a      	movs	r1, #10
 8003f86:	200e      	movs	r0, #14
 8003f88:	f002 f886 	bl	8006098 <DrowDigit>
					{
						DrowDigit(6,10,v,style,BIG,rotation);
						DrowDigit(14,10,vv,style,BIG,rotation);
					}
				}
			break;
 8003f8c:	e0a7      	b.n	80040de <WriteAdditionalMode+0x766>
					if(v == 0)
 8003f8e:	7b7b      	ldrb	r3, [r7, #13]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <WriteAdditionalMode+0x634>
						DrowDigit(10,10,vv,style,BIG,rotation);
 8003f94:	7ab9      	ldrb	r1, [r7, #10]
 8003f96:	7a3a      	ldrb	r2, [r7, #8]
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	210a      	movs	r1, #10
 8003fa4:	200a      	movs	r0, #10
 8003fa6:	f002 f877 	bl	8006098 <DrowDigit>
			break;
 8003faa:	e098      	b.n	80040de <WriteAdditionalMode+0x766>
						DrowDigit(6,10,v,style,BIG,rotation);
 8003fac:	7ab9      	ldrb	r1, [r7, #10]
 8003fae:	7b7a      	ldrb	r2, [r7, #13]
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	210a      	movs	r1, #10
 8003fbc:	2006      	movs	r0, #6
 8003fbe:	f002 f86b 	bl	8006098 <DrowDigit>
						DrowDigit(14,10,vv,style,BIG,rotation);
 8003fc2:	7ab9      	ldrb	r1, [r7, #10]
 8003fc4:	7a3a      	ldrb	r2, [r7, #8]
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	210a      	movs	r1, #10
 8003fd2:	200e      	movs	r0, #14
 8003fd4:	f002 f860 	bl	8006098 <DrowDigit>
			break;
 8003fd8:	e081      	b.n	80040de <WriteAdditionalMode+0x766>

			case ROTATION_180_DEGREES:
				if(Application.clockDefinition.font_style==CLASSIC)
 8003fda:	4b7d      	ldr	r3, [pc, #500]	@ (80041d0 <WriteAdditionalMode+0x858>)
 8003fdc:	7a5b      	ldrb	r3, [r3, #9]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <WriteAdditionalMode+0x698>
				{
					DrowDigit(13,14,v,style,BIG,rotation);
 8003fe2:	7ab9      	ldrb	r1, [r7, #10]
 8003fe4:	7b7a      	ldrb	r2, [r7, #13]
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	2301      	movs	r3, #1
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	210e      	movs	r1, #14
 8003ff2:	200d      	movs	r0, #13
 8003ff4:	f002 f850 	bl	8006098 <DrowDigit>
					DrowDigit(13,22,vv,style,BIG,rotation);
 8003ff8:	7ab9      	ldrb	r1, [r7, #10]
 8003ffa:	7a3a      	ldrb	r2, [r7, #8]
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	2301      	movs	r3, #1
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	460b      	mov	r3, r1
 8004006:	2116      	movs	r1, #22
 8004008:	200d      	movs	r0, #13
 800400a:	f002 f845 	bl	8006098 <DrowDigit>
					{
						DrowDigit(13,14,v,style,BIG,rotation);
						DrowDigit(13,22,vv,style,BIG,rotation);
					}
				}
			break;
 800400e:	e066      	b.n	80040de <WriteAdditionalMode+0x766>
					if(v == 0)
 8004010:	7b7b      	ldrb	r3, [r7, #13]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <WriteAdditionalMode+0x6b6>
						DrowDigit(13,18,vv,style,BIG,rotation);
 8004016:	7ab9      	ldrb	r1, [r7, #10]
 8004018:	7a3a      	ldrb	r2, [r7, #8]
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	2301      	movs	r3, #1
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	460b      	mov	r3, r1
 8004024:	2112      	movs	r1, #18
 8004026:	200d      	movs	r0, #13
 8004028:	f002 f836 	bl	8006098 <DrowDigit>
			break;
 800402c:	e057      	b.n	80040de <WriteAdditionalMode+0x766>
						DrowDigit(13,14,v,style,BIG,rotation);
 800402e:	7ab9      	ldrb	r1, [r7, #10]
 8004030:	7b7a      	ldrb	r2, [r7, #13]
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	2301      	movs	r3, #1
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	460b      	mov	r3, r1
 800403c:	210e      	movs	r1, #14
 800403e:	200d      	movs	r0, #13
 8004040:	f002 f82a 	bl	8006098 <DrowDigit>
						DrowDigit(13,22,vv,style,BIG,rotation);
 8004044:	7ab9      	ldrb	r1, [r7, #10]
 8004046:	7a3a      	ldrb	r2, [r7, #8]
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	2301      	movs	r3, #1
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	460b      	mov	r3, r1
 8004052:	2116      	movs	r1, #22
 8004054:	200d      	movs	r0, #13
 8004056:	f002 f81f 	bl	8006098 <DrowDigit>
			break;
 800405a:	e040      	b.n	80040de <WriteAdditionalMode+0x766>

			case ROTATION_270_DEGREES:
				if(Application.clockDefinition.font_style==CLASSIC)
 800405c:	4b5c      	ldr	r3, [pc, #368]	@ (80041d0 <WriteAdditionalMode+0x858>)
 800405e:	7a5b      	ldrb	r3, [r3, #9]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d116      	bne.n	8004092 <WriteAdditionalMode+0x71a>
				{
					DrowDigit(9,21,v,style,BIG,rotation);
 8004064:	7ab9      	ldrb	r1, [r7, #10]
 8004066:	7b7a      	ldrb	r2, [r7, #13]
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	2301      	movs	r3, #1
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	2115      	movs	r1, #21
 8004074:	2009      	movs	r0, #9
 8004076:	f002 f80f 	bl	8006098 <DrowDigit>
					DrowDigit(1,21,vv,style,BIG,rotation);
 800407a:	7ab9      	ldrb	r1, [r7, #10]
 800407c:	7a3a      	ldrb	r2, [r7, #8]
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	2301      	movs	r3, #1
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	460b      	mov	r3, r1
 8004088:	2115      	movs	r1, #21
 800408a:	2001      	movs	r0, #1
 800408c:	f002 f804 	bl	8006098 <DrowDigit>
					{
						DrowDigit(9,21,v,style,BIG,rotation);
						DrowDigit(1,21,vv,style,BIG,rotation);
					}
				}
			break;
 8004090:	e024      	b.n	80040dc <WriteAdditionalMode+0x764>
					if(v == 0)
 8004092:	7b7b      	ldrb	r3, [r7, #13]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <WriteAdditionalMode+0x738>
						DrowDigit(5,21,vv,style,BIG,rotation);
 8004098:	7ab9      	ldrb	r1, [r7, #10]
 800409a:	7a3a      	ldrb	r2, [r7, #8]
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	2301      	movs	r3, #1
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	460b      	mov	r3, r1
 80040a6:	2115      	movs	r1, #21
 80040a8:	2005      	movs	r0, #5
 80040aa:	f001 fff5 	bl	8006098 <DrowDigit>
			break;
 80040ae:	e015      	b.n	80040dc <WriteAdditionalMode+0x764>
						DrowDigit(9,21,v,style,BIG,rotation);
 80040b0:	7ab9      	ldrb	r1, [r7, #10]
 80040b2:	7b7a      	ldrb	r2, [r7, #13]
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	2301      	movs	r3, #1
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	460b      	mov	r3, r1
 80040be:	2115      	movs	r1, #21
 80040c0:	2009      	movs	r0, #9
 80040c2:	f001 ffe9 	bl	8006098 <DrowDigit>
						DrowDigit(1,21,vv,style,BIG,rotation);
 80040c6:	7ab9      	ldrb	r1, [r7, #10]
 80040c8:	7a3a      	ldrb	r2, [r7, #8]
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2301      	movs	r3, #1
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	460b      	mov	r3, r1
 80040d4:	2115      	movs	r1, #21
 80040d6:	2001      	movs	r0, #1
 80040d8:	f001 ffde 	bl	8006098 <DrowDigit>
			break;
 80040dc:	bf00      	nop
		}
	}


	if(Application.addtionalFunctions==SHOWN_ALARM_TYPE)
 80040de:	4b3c      	ldr	r3, [pc, #240]	@ (80041d0 <WriteAdditionalMode+0x858>)
 80040e0:	789b      	ldrb	r3, [r3, #2]
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d14a      	bne.n	800417c <WriteAdditionalMode+0x804>
	{

		if(Application.rouserDefinition.alarmType==ONCE)
 80040e6:	4b3a      	ldr	r3, [pc, #232]	@ (80041d0 <WriteAdditionalMode+0x858>)
 80040e8:	7fdb      	ldrb	r3, [r3, #31]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <WriteAdditionalMode+0x77a>
			letter=O_LETTER;
 80040ee:	2305      	movs	r3, #5
 80040f0:	73bb      	strb	r3, [r7, #14]

		if(Application.rouserDefinition.alarmType==EVERY_DAY)
 80040f2:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <WriteAdditionalMode+0x858>)
 80040f4:	7fdb      	ldrb	r3, [r3, #31]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <WriteAdditionalMode+0x786>
			letter=E_LETTER;
 80040fa:	2304      	movs	r3, #4
 80040fc:	73bb      	strb	r3, [r7, #14]

		switch(rotation)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d83b      	bhi.n	800417c <WriteAdditionalMode+0x804>
 8004104:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <WriteAdditionalMode+0x794>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004135 	.word	0x08004135
 8004114:	0800414d 	.word	0x0800414d
 8004118:	08004165 	.word	0x08004165
		{
			case ROTATION_0_DEGREES:
				DrowDigit(5,14,letter,style,LETTER,rotation);
 800411c:	7ab9      	ldrb	r1, [r7, #10]
 800411e:	7bba      	ldrb	r2, [r7, #14]
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	2302      	movs	r3, #2
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	460b      	mov	r3, r1
 800412a:	210e      	movs	r1, #14
 800412c:	2005      	movs	r0, #5
 800412e:	f001 ffb3 	bl	8006098 <DrowDigit>
			break;
 8004132:	e023      	b.n	800417c <WriteAdditionalMode+0x804>

			case ROTATION_90_DEGREES:
				DrowDigit(9,13,letter,style,LETTER,rotation);
 8004134:	7ab9      	ldrb	r1, [r7, #10]
 8004136:	7bba      	ldrb	r2, [r7, #14]
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	2302      	movs	r3, #2
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	460b      	mov	r3, r1
 8004142:	210d      	movs	r1, #13
 8004144:	2009      	movs	r0, #9
 8004146:	f001 ffa7 	bl	8006098 <DrowDigit>
			break;
 800414a:	e017      	b.n	800417c <WriteAdditionalMode+0x804>

			case ROTATION_180_DEGREES:
				DrowDigit(10,17,letter,style,LETTER,rotation);
 800414c:	7ab9      	ldrb	r1, [r7, #10]
 800414e:	7bba      	ldrb	r2, [r7, #14]
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	2302      	movs	r3, #2
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	460b      	mov	r3, r1
 800415a:	2111      	movs	r1, #17
 800415c:	200a      	movs	r0, #10
 800415e:	f001 ff9b 	bl	8006098 <DrowDigit>
			break;
 8004162:	e00b      	b.n	800417c <WriteAdditionalMode+0x804>

			case ROTATION_270_DEGREES:
				DrowDigit(6,18,letter,style,LETTER,rotation);
 8004164:	7ab9      	ldrb	r1, [r7, #10]
 8004166:	7bba      	ldrb	r2, [r7, #14]
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	2302      	movs	r3, #2
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	2112      	movs	r1, #18
 8004174:	2006      	movs	r0, #6
 8004176:	f001 ff8f 	bl	8006098 <DrowDigit>
			break;
 800417a:	bf00      	nop
		}
	}

	if((Application.clockDefinition.isBorderEnabled)&&(Application.addtionalFunctions==COUNT_DOWN))
 800417c:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <WriteAdditionalMode+0x858>)
 800417e:	7a9b      	ldrb	r3, [r3, #10]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <WriteAdditionalMode+0x818>
 8004184:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <WriteAdditionalMode+0x858>)
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d101      	bne.n	8004190 <WriteAdditionalMode+0x818>
		isNeedBorder=true;
 800418c:	2301      	movs	r3, #1
 800418e:	727b      	strb	r3, [r7, #9]

	if((Application.rouserDefinition.isBorderEnabled)&&(Application.addtionalFunctions==SHOWN_ALARM_TYPE))
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <WriteAdditionalMode+0x858>)
 8004192:	7f9b      	ldrb	r3, [r3, #30]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <WriteAdditionalMode+0x82c>
 8004198:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <WriteAdditionalMode+0x858>)
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d101      	bne.n	80041a4 <WriteAdditionalMode+0x82c>
		isNeedBorder=true;
 80041a0:	2301      	movs	r3, #1
 80041a2:	727b      	strb	r3, [r7, #9]


	if(isNeedBorder==true)
 80041a4:	7a7b      	ldrb	r3, [r7, #9]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8097 	beq.w	80042da <WriteAdditionalMode+0x962>
	{
		if(Application.addtionalFunctions==COUNT_DOWN)
 80041ac:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <WriteAdditionalMode+0x858>)
 80041ae:	789b      	ldrb	r3, [r3, #2]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d140      	bne.n	8004236 <WriteAdditionalMode+0x8be>
		{
			if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES))
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <WriteAdditionalMode+0x848>
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11b      	bne.n	80041f8 <WriteAdditionalMode+0x880>
			{
				if(Application.clockDefinition.isBorderEnabled)
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <WriteAdditionalMode+0x858>)
 80041c2:	7a9b      	ldrb	r3, [r3, #10]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <WriteAdditionalMode+0x880>
				{
					for(j=0;j<32;j++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	733b      	strb	r3, [r7, #12]
 80041cc:	e011      	b.n	80041f2 <WriteAdditionalMode+0x87a>
 80041ce:	bf00      	nop
 80041d0:	20000138 	.word	0x20000138
					{
						SetPixel(0, j, true);
 80041d4:	7b3b      	ldrb	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	4619      	mov	r1, r3
 80041da:	2000      	movs	r0, #0
 80041dc:	f001 fe42 	bl	8005e64 <SetPixel>
						SetPixel(15, j, true);
 80041e0:	7b3b      	ldrb	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	4619      	mov	r1, r3
 80041e6:	200f      	movs	r0, #15
 80041e8:	f001 fe3c 	bl	8005e64 <SetPixel>
					for(j=0;j<32;j++)
 80041ec:	7b3b      	ldrb	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	733b      	strb	r3, [r7, #12]
 80041f2:	7b3b      	ldrb	r3, [r7, #12]
 80041f4:	2b1f      	cmp	r3, #31
 80041f6:	d9ed      	bls.n	80041d4 <WriteAdditionalMode+0x85c>
					}
				}
			}

			if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d002      	beq.n	8004204 <WriteAdditionalMode+0x88c>
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d118      	bne.n	8004236 <WriteAdditionalMode+0x8be>
			{
				if(Application.clockDefinition.isBorderEnabled)
 8004204:	4b37      	ldr	r3, [pc, #220]	@ (80042e4 <WriteAdditionalMode+0x96c>)
 8004206:	7a9b      	ldrb	r3, [r3, #10]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d014      	beq.n	8004236 <WriteAdditionalMode+0x8be>
				{
					for(i=0;i<16;i++)
 800420c:	2300      	movs	r3, #0
 800420e:	72fb      	strb	r3, [r7, #11]
 8004210:	e00e      	b.n	8004230 <WriteAdditionalMode+0x8b8>
					{
						SetPixel(i, 0, true);
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	2201      	movs	r2, #1
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fe23 	bl	8005e64 <SetPixel>
						SetPixel(i, 31, true);
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	2201      	movs	r2, #1
 8004222:	211f      	movs	r1, #31
 8004224:	4618      	mov	r0, r3
 8004226:	f001 fe1d 	bl	8005e64 <SetPixel>
					for(i=0;i<16;i++)
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	3301      	adds	r3, #1
 800422e:	72fb      	strb	r3, [r7, #11]
 8004230:	7afb      	ldrb	r3, [r7, #11]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	d9ed      	bls.n	8004212 <WriteAdditionalMode+0x89a>
					}
				}
			}
		}

		if(Application.addtionalFunctions==SHOWN_ALARM_TYPE)
 8004236:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <WriteAdditionalMode+0x96c>)
 8004238:	789b      	ldrb	r3, [r3, #2]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d14d      	bne.n	80042da <WriteAdditionalMode+0x962>
		{
			if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES)) //90 и 270 градусов недопустимый режим работы, происходит подмена фунции
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <WriteAdditionalMode+0x8d2>
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d120      	bne.n	800428c <WriteAdditionalMode+0x914>
			{
				for(i=0;i<16;i++)
 800424a:	2300      	movs	r3, #0
 800424c:	72fb      	strb	r3, [r7, #11]
 800424e:	e01a      	b.n	8004286 <WriteAdditionalMode+0x90e>
				{
					SetPixel(i, 0, true);
 8004250:	7afb      	ldrb	r3, [r7, #11]
 8004252:	2201      	movs	r2, #1
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fe04 	bl	8005e64 <SetPixel>
					SetPixel(i, 1, true);
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2201      	movs	r2, #1
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fdfe 	bl	8005e64 <SetPixel>
					SetPixel(i, 31, true);
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	2201      	movs	r2, #1
 800426c:	211f      	movs	r1, #31
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fdf8 	bl	8005e64 <SetPixel>
					SetPixel(i, 30, true);
 8004274:	7afb      	ldrb	r3, [r7, #11]
 8004276:	2201      	movs	r2, #1
 8004278:	211e      	movs	r1, #30
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fdf2 	bl	8005e64 <SetPixel>
				for(i=0;i<16;i++)
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	3301      	adds	r3, #1
 8004284:	72fb      	strb	r3, [r7, #11]
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d9e1      	bls.n	8004250 <WriteAdditionalMode+0x8d8>
				}
			}

			if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d002      	beq.n	8004298 <WriteAdditionalMode+0x920>
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d120      	bne.n	80042da <WriteAdditionalMode+0x962>
			{
				for(i=0;i<16;i++)
 8004298:	2300      	movs	r3, #0
 800429a:	72fb      	strb	r3, [r7, #11]
 800429c:	e01a      	b.n	80042d4 <WriteAdditionalMode+0x95c>
				{
					SetPixel(i, 0, true);
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	2201      	movs	r2, #1
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 fddd 	bl	8005e64 <SetPixel>
					SetPixel(i, 1, true);
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	2201      	movs	r2, #1
 80042ae:	2101      	movs	r1, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fdd7 	bl	8005e64 <SetPixel>
					SetPixel(i, 30, true);
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	2201      	movs	r2, #1
 80042ba:	211e      	movs	r1, #30
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fdd1 	bl	8005e64 <SetPixel>
					SetPixel(i, 31, true);
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	2201      	movs	r2, #1
 80042c6:	211f      	movs	r1, #31
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fdcb 	bl	8005e64 <SetPixel>
				for(i=0;i<16;i++)
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	3301      	adds	r3, #1
 80042d2:	72fb      	strb	r3, [r7, #11]
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	2b0f      	cmp	r3, #15
 80042d8:	d9e1      	bls.n	800429e <WriteAdditionalMode+0x926>
				}
			}
		}
	}
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000138 	.word	0x20000138

080042e8 <WriteRouser>:


void WriteRouser(Rouser_Def_t Rouser_Def,t_rotation rotation)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80042f6:	4613      	mov	r3, r2
 80042f8:	71fb      	strb	r3, [r7, #7]
uint8_t h,hh,m,mm,i,j,state;

h=Rouser_Def.hours/10;
 80042fa:	7a3b      	ldrb	r3, [r7, #8]
 80042fc:	4aaa      	ldr	r2, [pc, #680]	@ (80045a8 <WriteRouser+0x2c0>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	08db      	lsrs	r3, r3, #3
 8004304:	753b      	strb	r3, [r7, #20]
hh=Rouser_Def.hours-h*10;
 8004306:	7a3a      	ldrb	r2, [r7, #8]
 8004308:	7d3b      	ldrb	r3, [r7, #20]
 800430a:	4619      	mov	r1, r3
 800430c:	0149      	lsls	r1, r1, #5
 800430e:	1ac9      	subs	r1, r1, r3
 8004310:	0089      	lsls	r1, r1, #2
 8004312:	1acb      	subs	r3, r1, r3
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4413      	add	r3, r2
 800431a:	74fb      	strb	r3, [r7, #19]
m=Rouser_Def.minutes/10;
 800431c:	7a7b      	ldrb	r3, [r7, #9]
 800431e:	4aa2      	ldr	r2, [pc, #648]	@ (80045a8 <WriteRouser+0x2c0>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	08db      	lsrs	r3, r3, #3
 8004326:	74bb      	strb	r3, [r7, #18]
mm=Rouser_Def.minutes-m*10;
 8004328:	7a7a      	ldrb	r2, [r7, #9]
 800432a:	7cbb      	ldrb	r3, [r7, #18]
 800432c:	4619      	mov	r1, r3
 800432e:	0149      	lsls	r1, r1, #5
 8004330:	1ac9      	subs	r1, r1, r3
 8004332:	0089      	lsls	r1, r1, #2
 8004334:	1acb      	subs	r3, r1, r3
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	4413      	add	r3, r2
 800433c:	747b      	strb	r3, [r7, #17]
state=0;
 800433e:	2300      	movs	r3, #0
 8004340:	757b      	strb	r3, [r7, #21]

if(Rouser_Def.isAlarmEnabled)
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <WriteRouser+0x66>
{
	state=1;
 8004348:	2301      	movs	r3, #1
 800434a:	757b      	strb	r3, [r7, #21]
 800434c:	e001      	b.n	8004352 <WriteRouser+0x6a>
}
else
{
	state=0;
 800434e:	2300      	movs	r3, #0
 8004350:	757b      	strb	r3, [r7, #21]
}

	switch(rotation)
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b03      	cmp	r3, #3
 8004356:	f200 81b5 	bhi.w	80046c4 <WriteRouser+0x3dc>
 800435a:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <WriteRouser+0x78>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004371 	.word	0x08004371
 8004364:	08004475 	.word	0x08004475
 8004368:	08004519 	.word	0x08004519
 800436c:	08004621 	.word	0x08004621
	{
		case ROTATION_0_DEGREES:
			DrowDigit(0,19,A_LETTER,Rouser_Def.font_style,LETTER,rotation);
 8004370:	7aba      	ldrb	r2, [r7, #10]
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	2302      	movs	r3, #2
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	2200      	movs	r2, #0
 800437e:	2113      	movs	r1, #19
 8004380:	2000      	movs	r0, #0
 8004382:	f001 fe89 	bl	8006098 <DrowDigit>
			DrowDigit(0,8,state,Rouser_Def.font_style,SMALL,rotation);
 8004386:	7ab9      	ldrb	r1, [r7, #10]
 8004388:	7d7a      	ldrb	r2, [r7, #21]
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	460b      	mov	r3, r1
 8004394:	2108      	movs	r1, #8
 8004396:	2000      	movs	r0, #0
 8004398:	f001 fe7e 	bl	8006098 <DrowDigit>
			DrowDigit(9,23,h,Rouser_Def.font_style,SMALL,rotation);
 800439c:	7ab9      	ldrb	r1, [r7, #10]
 800439e:	7d3a      	ldrb	r2, [r7, #20]
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2300      	movs	r3, #0
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	460b      	mov	r3, r1
 80043aa:	2117      	movs	r1, #23
 80043ac:	2009      	movs	r0, #9
 80043ae:	f001 fe73 	bl	8006098 <DrowDigit>
			DrowDigit(9,18,hh,Rouser_Def.font_style,SMALL,rotation);
 80043b2:	7ab9      	ldrb	r1, [r7, #10]
 80043b4:	7cfa      	ldrb	r2, [r7, #19]
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	2300      	movs	r3, #0
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	460b      	mov	r3, r1
 80043c0:	2112      	movs	r1, #18
 80043c2:	2009      	movs	r0, #9
 80043c4:	f001 fe68 	bl	8006098 <DrowDigit>
			DrowDigit(9,10,m,Rouser_Def.font_style,SMALL,rotation);
 80043c8:	7ab9      	ldrb	r1, [r7, #10]
 80043ca:	7cba      	ldrb	r2, [r7, #18]
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	2300      	movs	r3, #0
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	460b      	mov	r3, r1
 80043d6:	210a      	movs	r1, #10
 80043d8:	2009      	movs	r0, #9
 80043da:	f001 fe5d 	bl	8006098 <DrowDigit>
			DrowDigit(9,5,mm,Rouser_Def.font_style,SMALL,rotation);
 80043de:	7ab9      	ldrb	r1, [r7, #10]
 80043e0:	7c7a      	ldrb	r2, [r7, #17]
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	460b      	mov	r3, r1
 80043ec:	2105      	movs	r1, #5
 80043ee:	2009      	movs	r0, #9
 80043f0:	f001 fe52 	bl	8006098 <DrowDigit>

		    for(i=13;i<=14;i++)
 80043f4:	230d      	movs	r3, #13
 80043f6:	75fb      	strb	r3, [r7, #23]
 80043f8:	e011      	b.n	800441e <WriteRouser+0x136>
		      for(j=15;j<=16;j++)
 80043fa:	230f      	movs	r3, #15
 80043fc:	75bb      	strb	r3, [r7, #22]
 80043fe:	e008      	b.n	8004412 <WriteRouser+0x12a>
		        SetPixel(i, j, true);
 8004400:	7db9      	ldrb	r1, [r7, #22]
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2201      	movs	r2, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f001 fd2c 	bl	8005e64 <SetPixel>
		      for(j=15;j<=16;j++)
 800440c:	7dbb      	ldrb	r3, [r7, #22]
 800440e:	3301      	adds	r3, #1
 8004410:	75bb      	strb	r3, [r7, #22]
 8004412:	7dbb      	ldrb	r3, [r7, #22]
 8004414:	2b10      	cmp	r3, #16
 8004416:	d9f3      	bls.n	8004400 <WriteRouser+0x118>
		    for(i=13;i<=14;i++)
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	3301      	adds	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b0e      	cmp	r3, #14
 8004422:	d9ea      	bls.n	80043fa <WriteRouser+0x112>

		    for(i=10;i<=11;i++)
 8004424:	230a      	movs	r3, #10
 8004426:	75fb      	strb	r3, [r7, #23]
 8004428:	e011      	b.n	800444e <WriteRouser+0x166>
		    {
		      for(j=15;j<=16;j++)
 800442a:	230f      	movs	r3, #15
 800442c:	75bb      	strb	r3, [r7, #22]
 800442e:	e008      	b.n	8004442 <WriteRouser+0x15a>
		      {
		    	 SetPixel(i, j, true);
 8004430:	7db9      	ldrb	r1, [r7, #22]
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2201      	movs	r2, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f001 fd14 	bl	8005e64 <SetPixel>
		      for(j=15;j<=16;j++)
 800443c:	7dbb      	ldrb	r3, [r7, #22]
 800443e:	3301      	adds	r3, #1
 8004440:	75bb      	strb	r3, [r7, #22]
 8004442:	7dbb      	ldrb	r3, [r7, #22]
 8004444:	2b10      	cmp	r3, #16
 8004446:	d9f3      	bls.n	8004430 <WriteRouser+0x148>
		    for(i=10;i<=11;i++)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	3301      	adds	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b0b      	cmp	r3, #11
 8004452:	d9ea      	bls.n	800442a <WriteRouser+0x142>
		      }
		    }

		    for(j=13;j<=17;j++)
 8004454:	230d      	movs	r3, #13
 8004456:	75bb      	strb	r3, [r7, #22]
 8004458:	e008      	b.n	800446c <WriteRouser+0x184>
		    {
		    	SetPixel(3, j, true);
 800445a:	7dbb      	ldrb	r3, [r7, #22]
 800445c:	2201      	movs	r2, #1
 800445e:	4619      	mov	r1, r3
 8004460:	2003      	movs	r0, #3
 8004462:	f001 fcff 	bl	8005e64 <SetPixel>
		    for(j=13;j<=17;j++)
 8004466:	7dbb      	ldrb	r3, [r7, #22]
 8004468:	3301      	adds	r3, #1
 800446a:	75bb      	strb	r3, [r7, #22]
 800446c:	7dbb      	ldrb	r3, [r7, #22]
 800446e:	2b11      	cmp	r3, #17
 8004470:	d9f3      	bls.n	800445a <WriteRouser+0x172>
		    }

		break;
 8004472:	e127      	b.n	80046c4 <WriteRouser+0x3dc>

		case ROTATION_90_DEGREES:
			DrowDigit(5,3,A_LETTER,Rouser_Def.font_style,LETTER,rotation);
 8004474:	7aba      	ldrb	r2, [r7, #10]
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	2302      	movs	r3, #2
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	2200      	movs	r2, #0
 8004482:	2103      	movs	r1, #3
 8004484:	2005      	movs	r0, #5
 8004486:	f001 fe07 	bl	8006098 <DrowDigit>
			DrowDigit(14,3,state,Rouser_Def.font_style,SMALL,rotation);
 800448a:	7ab9      	ldrb	r1, [r7, #10]
 800448c:	7d7a      	ldrb	r2, [r7, #21]
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	460b      	mov	r3, r1
 8004498:	2103      	movs	r1, #3
 800449a:	200e      	movs	r0, #14
 800449c:	f001 fdfc 	bl	8006098 <DrowDigit>
			DrowDigit(6,12,h,Rouser_Def.font_style,SMALL,rotation);
 80044a0:	7ab9      	ldrb	r1, [r7, #10]
 80044a2:	7d3a      	ldrb	r2, [r7, #20]
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	460b      	mov	r3, r1
 80044ae:	210c      	movs	r1, #12
 80044b0:	2006      	movs	r0, #6
 80044b2:	f001 fdf1 	bl	8006098 <DrowDigit>
			DrowDigit(12,12,hh,Rouser_Def.font_style,SMALL,rotation);
 80044b6:	7ab9      	ldrb	r1, [r7, #10]
 80044b8:	7cfa      	ldrb	r2, [r7, #19]
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	460b      	mov	r3, r1
 80044c4:	210c      	movs	r1, #12
 80044c6:	200c      	movs	r0, #12
 80044c8:	f001 fde6 	bl	8006098 <DrowDigit>
			DrowDigit(6,21,m,Rouser_Def.font_style,SMALL,rotation);
 80044cc:	7ab9      	ldrb	r1, [r7, #10]
 80044ce:	7cba      	ldrb	r2, [r7, #18]
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2300      	movs	r3, #0
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	460b      	mov	r3, r1
 80044da:	2115      	movs	r1, #21
 80044dc:	2006      	movs	r0, #6
 80044de:	f001 fddb 	bl	8006098 <DrowDigit>
			DrowDigit(12,21,mm,Rouser_Def.font_style,SMALL,rotation);
 80044e2:	7ab9      	ldrb	r1, [r7, #10]
 80044e4:	7c7a      	ldrb	r2, [r7, #17]
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	460b      	mov	r3, r1
 80044f0:	2115      	movs	r1, #21
 80044f2:	200c      	movs	r0, #12
 80044f4:	f001 fdd0 	bl	8006098 <DrowDigit>

		    for(i=7;i<=9;i++)
 80044f8:	2307      	movs	r3, #7
 80044fa:	75fb      	strb	r3, [r7, #23]
 80044fc:	e008      	b.n	8004510 <WriteRouser+0x228>
		    {
		    	SetPixel(i, 6, true);
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2201      	movs	r2, #1
 8004502:	2106      	movs	r1, #6
 8004504:	4618      	mov	r0, r3
 8004506:	f001 fcad 	bl	8005e64 <SetPixel>
		    for(i=7;i<=9;i++)
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	3301      	adds	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b09      	cmp	r3, #9
 8004514:	d9f3      	bls.n	80044fe <WriteRouser+0x216>
		    }

		break;
 8004516:	e0d5      	b.n	80046c4 <WriteRouser+0x3dc>

		case ROTATION_180_DEGREES:
			DrowDigit(15,12,A_LETTER,Rouser_Def.font_style,LETTER,rotation);
 8004518:	7aba      	ldrb	r2, [r7, #10]
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	2302      	movs	r3, #2
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	2200      	movs	r2, #0
 8004526:	210c      	movs	r1, #12
 8004528:	200f      	movs	r0, #15
 800452a:	f001 fdb5 	bl	8006098 <DrowDigit>
			DrowDigit(15,23,state,Rouser_Def.font_style,SMALL,rotation);
 800452e:	7ab9      	ldrb	r1, [r7, #10]
 8004530:	7d7a      	ldrb	r2, [r7, #21]
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	2300      	movs	r3, #0
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	460b      	mov	r3, r1
 800453c:	2117      	movs	r1, #23
 800453e:	200f      	movs	r0, #15
 8004540:	f001 fdaa 	bl	8006098 <DrowDigit>
			DrowDigit(6,8,h,Rouser_Def.font_style,SMALL,rotation);
 8004544:	7ab9      	ldrb	r1, [r7, #10]
 8004546:	7d3a      	ldrb	r2, [r7, #20]
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	460b      	mov	r3, r1
 8004552:	2108      	movs	r1, #8
 8004554:	2006      	movs	r0, #6
 8004556:	f001 fd9f 	bl	8006098 <DrowDigit>
			DrowDigit(6,13,hh,Rouser_Def.font_style,SMALL,rotation);
 800455a:	7ab9      	ldrb	r1, [r7, #10]
 800455c:	7cfa      	ldrb	r2, [r7, #19]
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	460b      	mov	r3, r1
 8004568:	210d      	movs	r1, #13
 800456a:	2006      	movs	r0, #6
 800456c:	f001 fd94 	bl	8006098 <DrowDigit>
			DrowDigit(6,21,m,Rouser_Def.font_style,SMALL,rotation);
 8004570:	7ab9      	ldrb	r1, [r7, #10]
 8004572:	7cba      	ldrb	r2, [r7, #18]
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	460b      	mov	r3, r1
 800457e:	2115      	movs	r1, #21
 8004580:	2006      	movs	r0, #6
 8004582:	f001 fd89 	bl	8006098 <DrowDigit>
			DrowDigit(6,26,mm,Rouser_Def.font_style,SMALL,rotation);
 8004586:	7ab9      	ldrb	r1, [r7, #10]
 8004588:	7c7a      	ldrb	r2, [r7, #17]
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	2300      	movs	r3, #0
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	460b      	mov	r3, r1
 8004594:	211a      	movs	r1, #26
 8004596:	2006      	movs	r0, #6
 8004598:	f001 fd7e 	bl	8006098 <DrowDigit>

		    for(i=1;i<=2;i++)
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
 80045a0:	e013      	b.n	80045ca <WriteRouser+0x2e2>
		      for(j=15;j<=16;j++)
 80045a2:	230f      	movs	r3, #15
 80045a4:	75bb      	strb	r3, [r7, #22]
 80045a6:	e00a      	b.n	80045be <WriteRouser+0x2d6>
 80045a8:	cccccccd 	.word	0xcccccccd
		        SetPixel(i, j, true);
 80045ac:	7db9      	ldrb	r1, [r7, #22]
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 fc56 	bl	8005e64 <SetPixel>
		      for(j=15;j<=16;j++)
 80045b8:	7dbb      	ldrb	r3, [r7, #22]
 80045ba:	3301      	adds	r3, #1
 80045bc:	75bb      	strb	r3, [r7, #22]
 80045be:	7dbb      	ldrb	r3, [r7, #22]
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d9f3      	bls.n	80045ac <WriteRouser+0x2c4>
		    for(i=1;i<=2;i++)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	3301      	adds	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d9e8      	bls.n	80045a2 <WriteRouser+0x2ba>

		    for(i=4;i<=5;i++)
 80045d0:	2304      	movs	r3, #4
 80045d2:	75fb      	strb	r3, [r7, #23]
 80045d4:	e011      	b.n	80045fa <WriteRouser+0x312>
		    {
		      for(j=15;j<=16;j++)
 80045d6:	230f      	movs	r3, #15
 80045d8:	75bb      	strb	r3, [r7, #22]
 80045da:	e008      	b.n	80045ee <WriteRouser+0x306>
		      {
		    	 SetPixel(i, j, true);
 80045dc:	7db9      	ldrb	r1, [r7, #22]
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	2201      	movs	r2, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 fc3e 	bl	8005e64 <SetPixel>
		      for(j=15;j<=16;j++)
 80045e8:	7dbb      	ldrb	r3, [r7, #22]
 80045ea:	3301      	adds	r3, #1
 80045ec:	75bb      	strb	r3, [r7, #22]
 80045ee:	7dbb      	ldrb	r3, [r7, #22]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d9f3      	bls.n	80045dc <WriteRouser+0x2f4>
		    for(i=4;i<=5;i++)
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	3301      	adds	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
 80045fc:	2b05      	cmp	r3, #5
 80045fe:	d9ea      	bls.n	80045d6 <WriteRouser+0x2ee>
		      }
		    }

		    for(j=14;j<=18;j++)
 8004600:	230e      	movs	r3, #14
 8004602:	75bb      	strb	r3, [r7, #22]
 8004604:	e008      	b.n	8004618 <WriteRouser+0x330>
		    {
		    	SetPixel(12, j, true);
 8004606:	7dbb      	ldrb	r3, [r7, #22]
 8004608:	2201      	movs	r2, #1
 800460a:	4619      	mov	r1, r3
 800460c:	200c      	movs	r0, #12
 800460e:	f001 fc29 	bl	8005e64 <SetPixel>
		    for(j=14;j<=18;j++)
 8004612:	7dbb      	ldrb	r3, [r7, #22]
 8004614:	3301      	adds	r3, #1
 8004616:	75bb      	strb	r3, [r7, #22]
 8004618:	7dbb      	ldrb	r3, [r7, #22]
 800461a:	2b12      	cmp	r3, #18
 800461c:	d9f3      	bls.n	8004606 <WriteRouser+0x31e>
		    }

		break;
 800461e:	e051      	b.n	80046c4 <WriteRouser+0x3dc>

		case ROTATION_270_DEGREES:
			DrowDigit(10,28,A_LETTER,Rouser_Def.font_style,LETTER,rotation);
 8004620:	7aba      	ldrb	r2, [r7, #10]
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	2302      	movs	r3, #2
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	2200      	movs	r2, #0
 800462e:	211c      	movs	r1, #28
 8004630:	200a      	movs	r0, #10
 8004632:	f001 fd31 	bl	8006098 <DrowDigit>
			DrowDigit(1,28,state,Rouser_Def.font_style,SMALL,rotation);
 8004636:	7ab9      	ldrb	r1, [r7, #10]
 8004638:	7d7a      	ldrb	r2, [r7, #21]
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	460b      	mov	r3, r1
 8004644:	211c      	movs	r1, #28
 8004646:	2001      	movs	r0, #1
 8004648:	f001 fd26 	bl	8006098 <DrowDigit>
			DrowDigit(9,19,h,Rouser_Def.font_style,SMALL,rotation);
 800464c:	7ab9      	ldrb	r1, [r7, #10]
 800464e:	7d3a      	ldrb	r2, [r7, #20]
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2300      	movs	r3, #0
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	460b      	mov	r3, r1
 800465a:	2113      	movs	r1, #19
 800465c:	2009      	movs	r0, #9
 800465e:	f001 fd1b 	bl	8006098 <DrowDigit>
			DrowDigit(3,19,hh,Rouser_Def.font_style,SMALL,rotation);
 8004662:	7ab9      	ldrb	r1, [r7, #10]
 8004664:	7cfa      	ldrb	r2, [r7, #19]
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	460b      	mov	r3, r1
 8004670:	2113      	movs	r1, #19
 8004672:	2003      	movs	r0, #3
 8004674:	f001 fd10 	bl	8006098 <DrowDigit>
			DrowDigit(9,10,m,Rouser_Def.font_style,SMALL,rotation);
 8004678:	7ab9      	ldrb	r1, [r7, #10]
 800467a:	7cba      	ldrb	r2, [r7, #18]
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	2300      	movs	r3, #0
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	460b      	mov	r3, r1
 8004686:	210a      	movs	r1, #10
 8004688:	2009      	movs	r0, #9
 800468a:	f001 fd05 	bl	8006098 <DrowDigit>
			DrowDigit(3,10,mm,Rouser_Def.font_style,SMALL,rotation);
 800468e:	7ab9      	ldrb	r1, [r7, #10]
 8004690:	7c7a      	ldrb	r2, [r7, #17]
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	460b      	mov	r3, r1
 800469c:	210a      	movs	r1, #10
 800469e:	2003      	movs	r0, #3
 80046a0:	f001 fcfa 	bl	8006098 <DrowDigit>

		    for(i=6;i<=8;i++)
 80046a4:	2306      	movs	r3, #6
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	e008      	b.n	80046bc <WriteRouser+0x3d4>
		    {
		    	SetPixel(i, 25, true);
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2201      	movs	r2, #1
 80046ae:	2119      	movs	r1, #25
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fbd7 	bl	8005e64 <SetPixel>
		    for(i=6;i<=8;i++)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	3301      	adds	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d9f3      	bls.n	80046aa <WriteRouser+0x3c2>
		    }

		break;
 80046c2:	bf00      	nop
	}

	if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES)) //90 и 270 градусов недопустимый режим работы, происходит подмена фунции
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <WriteRouser+0x3e8>
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d123      	bne.n	8004718 <WriteRouser+0x430>
	{
		if(Rouser_Def.isBorderEnabled)
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <WriteRouser+0x430>
		{
			for(i=0;i<16;i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
 80046da:	e01a      	b.n	8004712 <WriteRouser+0x42a>
			{
				SetPixel(i, 0, true);
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2201      	movs	r2, #1
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 fbbe 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2201      	movs	r2, #1
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 fbb8 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2201      	movs	r2, #1
 80046f8:	211f      	movs	r1, #31
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 fbb2 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2201      	movs	r2, #1
 8004704:	211e      	movs	r1, #30
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fbac 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	3301      	adds	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b0f      	cmp	r3, #15
 8004716:	d9e1      	bls.n	80046dc <WriteRouser+0x3f4>
			}
		}
	}

	if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d002      	beq.n	8004724 <WriteRouser+0x43c>
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d123      	bne.n	800476c <WriteRouser+0x484>
	{
		if(Rouser_Def.isBorderEnabled)
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <WriteRouser+0x484>
		{
			for(i=0;i<16;i++)
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]
 800472e:	e01a      	b.n	8004766 <WriteRouser+0x47e>
			{
				SetPixel(i, 0, true);
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2201      	movs	r2, #1
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f001 fb94 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	2201      	movs	r2, #1
 8004740:	2101      	movs	r1, #1
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fb8e 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2201      	movs	r2, #1
 800474c:	211e      	movs	r1, #30
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fb88 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2201      	movs	r2, #1
 8004758:	211f      	movs	r1, #31
 800475a:	4618      	mov	r0, r3
 800475c:	f001 fb82 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	3301      	adds	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d9e1      	bls.n	8004730 <WriteRouser+0x448>
			}
		}
	}
}
 800476c:	bf00      	nop
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <WriteTimer>:

void WriteTimer(Timer_Def_t Timer_Def,t_rotation rotation)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af02      	add	r7, sp, #8
 800477a:	1d3c      	adds	r4, r7, #4
 800477c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004780:	70fb      	strb	r3, [r7, #3]
uint8_t h,hh,m,mm,i,j,state;

h=Timer_Def.hours/10;
 8004782:	793b      	ldrb	r3, [r7, #4]
 8004784:	4aa6      	ldr	r2, [pc, #664]	@ (8004a20 <WriteTimer+0x2ac>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	753b      	strb	r3, [r7, #20]
hh=Timer_Def.hours-h*10;
 800478e:	793a      	ldrb	r2, [r7, #4]
 8004790:	7d3b      	ldrb	r3, [r7, #20]
 8004792:	4619      	mov	r1, r3
 8004794:	0149      	lsls	r1, r1, #5
 8004796:	1ac9      	subs	r1, r1, r3
 8004798:	0089      	lsls	r1, r1, #2
 800479a:	1acb      	subs	r3, r1, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	74fb      	strb	r3, [r7, #19]
m=Timer_Def.minutes/10;
 80047a4:	797b      	ldrb	r3, [r7, #5]
 80047a6:	4a9e      	ldr	r2, [pc, #632]	@ (8004a20 <WriteTimer+0x2ac>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	08db      	lsrs	r3, r3, #3
 80047ae:	74bb      	strb	r3, [r7, #18]
mm=Timer_Def.minutes-m*10;
 80047b0:	797a      	ldrb	r2, [r7, #5]
 80047b2:	7cbb      	ldrb	r3, [r7, #18]
 80047b4:	4619      	mov	r1, r3
 80047b6:	0149      	lsls	r1, r1, #5
 80047b8:	1ac9      	subs	r1, r1, r3
 80047ba:	0089      	lsls	r1, r1, #2
 80047bc:	1acb      	subs	r3, r1, r3
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	747b      	strb	r3, [r7, #17]
state=0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	757b      	strb	r3, [r7, #21]

if(Timer_Def.isTimerEnabled)
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <WriteTimer+0x62>
{
	state=1;
 80047d0:	2301      	movs	r3, #1
 80047d2:	757b      	strb	r3, [r7, #21]
 80047d4:	e001      	b.n	80047da <WriteTimer+0x66>
}
else
{
	state=0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	757b      	strb	r3, [r7, #21]
}

	switch(rotation)
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	f200 8208 	bhi.w	8004bf2 <WriteTimer+0x47e>
 80047e2:	a201      	add	r2, pc, #4	@ (adr r2, 80047e8 <WriteTimer+0x74>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	0800497b 	.word	0x0800497b
 80047f0:	08004a2d 	.word	0x08004a2d
 80047f4:	08004b4f 	.word	0x08004b4f
	{
		case ROTATION_0_DEGREES:
			DrowDigit(0,19,T_LETTER,Timer_Def.font_style,LETTER,rotation);
 80047f8:	79ba      	ldrb	r2, [r7, #6]
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	2302      	movs	r3, #2
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	2202      	movs	r2, #2
 8004806:	2113      	movs	r1, #19
 8004808:	2000      	movs	r0, #0
 800480a:	f001 fc45 	bl	8006098 <DrowDigit>
			DrowDigit(0,8,state,Timer_Def.font_style,SMALL,rotation);
 800480e:	79b9      	ldrb	r1, [r7, #6]
 8004810:	7d7a      	ldrb	r2, [r7, #21]
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	460b      	mov	r3, r1
 800481c:	2108      	movs	r1, #8
 800481e:	2000      	movs	r0, #0
 8004820:	f001 fc3a 	bl	8006098 <DrowDigit>
			DrowDigit(9,23,h,Timer_Def.font_style,SMALL,rotation);
 8004824:	79b9      	ldrb	r1, [r7, #6]
 8004826:	7d3a      	ldrb	r2, [r7, #20]
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	2300      	movs	r3, #0
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	460b      	mov	r3, r1
 8004832:	2117      	movs	r1, #23
 8004834:	2009      	movs	r0, #9
 8004836:	f001 fc2f 	bl	8006098 <DrowDigit>
			DrowDigit(9,18,hh,Timer_Def.font_style,SMALL,rotation);
 800483a:	79b9      	ldrb	r1, [r7, #6]
 800483c:	7cfa      	ldrb	r2, [r7, #19]
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	2300      	movs	r3, #0
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	460b      	mov	r3, r1
 8004848:	2112      	movs	r1, #18
 800484a:	2009      	movs	r0, #9
 800484c:	f001 fc24 	bl	8006098 <DrowDigit>
			DrowDigit(9,10,m,Timer_Def.font_style,SMALL,rotation);
 8004850:	79b9      	ldrb	r1, [r7, #6]
 8004852:	7cba      	ldrb	r2, [r7, #18]
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	2300      	movs	r3, #0
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	460b      	mov	r3, r1
 800485e:	210a      	movs	r1, #10
 8004860:	2009      	movs	r0, #9
 8004862:	f001 fc19 	bl	8006098 <DrowDigit>
			DrowDigit(9,5,mm,Timer_Def.font_style,SMALL,rotation);
 8004866:	79b9      	ldrb	r1, [r7, #6]
 8004868:	7c7a      	ldrb	r2, [r7, #17]
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	2300      	movs	r3, #0
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	460b      	mov	r3, r1
 8004874:	2105      	movs	r1, #5
 8004876:	2009      	movs	r0, #9
 8004878:	f001 fc0e 	bl	8006098 <DrowDigit>

			for(i=13;i<=14;i++)
 800487c:	230d      	movs	r3, #13
 800487e:	75fb      	strb	r3, [r7, #23]
 8004880:	e011      	b.n	80048a6 <WriteTimer+0x132>
			  for(j=15;j<=16;j++)
 8004882:	230f      	movs	r3, #15
 8004884:	75bb      	strb	r3, [r7, #22]
 8004886:	e008      	b.n	800489a <WriteTimer+0x126>
				SetPixel(i, j, true);
 8004888:	7db9      	ldrb	r1, [r7, #22]
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2201      	movs	r2, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fae8 	bl	8005e64 <SetPixel>
			  for(j=15;j<=16;j++)
 8004894:	7dbb      	ldrb	r3, [r7, #22]
 8004896:	3301      	adds	r3, #1
 8004898:	75bb      	strb	r3, [r7, #22]
 800489a:	7dbb      	ldrb	r3, [r7, #22]
 800489c:	2b10      	cmp	r3, #16
 800489e:	d9f3      	bls.n	8004888 <WriteTimer+0x114>
			for(i=13;i<=14;i++)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	3301      	adds	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b0e      	cmp	r3, #14
 80048aa:	d9ea      	bls.n	8004882 <WriteTimer+0x10e>

			for(i=10;i<=11;i++)
 80048ac:	230a      	movs	r3, #10
 80048ae:	75fb      	strb	r3, [r7, #23]
 80048b0:	e011      	b.n	80048d6 <WriteTimer+0x162>
			{
			  for(j=15;j<=16;j++)
 80048b2:	230f      	movs	r3, #15
 80048b4:	75bb      	strb	r3, [r7, #22]
 80048b6:	e008      	b.n	80048ca <WriteTimer+0x156>
			  {
				 SetPixel(i, j, true);
 80048b8:	7db9      	ldrb	r1, [r7, #22]
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2201      	movs	r2, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fad0 	bl	8005e64 <SetPixel>
			  for(j=15;j<=16;j++)
 80048c4:	7dbb      	ldrb	r3, [r7, #22]
 80048c6:	3301      	adds	r3, #1
 80048c8:	75bb      	strb	r3, [r7, #22]
 80048ca:	7dbb      	ldrb	r3, [r7, #22]
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d9f3      	bls.n	80048b8 <WriteTimer+0x144>
			for(i=10;i<=11;i++)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	3301      	adds	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b0b      	cmp	r3, #11
 80048da:	d9ea      	bls.n	80048b2 <WriteTimer+0x13e>
			  }
			}

			if((Application.timerDefinition.isDotsBlinked==true)&&(Application.timerDefinition.isTimerEnabled==true))
 80048dc:	4b51      	ldr	r3, [pc, #324]	@ (8004a24 <WriteTimer+0x2b0>)
 80048de:	7c9b      	ldrb	r3, [r3, #18]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03a      	beq.n	800495a <WriteTimer+0x1e6>
 80048e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <WriteTimer+0x2b0>)
 80048e6:	7bdb      	ldrb	r3, [r3, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d036      	beq.n	800495a <WriteTimer+0x1e6>
			{
				if(Timers.blink==false)
 80048ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004a28 <WriteTimer+0x2b4>)
 80048ee:	7a1b      	ldrb	r3, [r3, #8]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02f      	beq.n	800495a <WriteTimer+0x1e6>
				{
					for(i=13;i<=14;i++)
 80048fa:	230d      	movs	r3, #13
 80048fc:	75fb      	strb	r3, [r7, #23]
 80048fe:	e011      	b.n	8004924 <WriteTimer+0x1b0>
					  for(j=15;j<=16;j++)
 8004900:	230f      	movs	r3, #15
 8004902:	75bb      	strb	r3, [r7, #22]
 8004904:	e008      	b.n	8004918 <WriteTimer+0x1a4>
						SetPixel(i, j, false);
 8004906:	7db9      	ldrb	r1, [r7, #22]
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2200      	movs	r2, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f001 faa9 	bl	8005e64 <SetPixel>
					  for(j=15;j<=16;j++)
 8004912:	7dbb      	ldrb	r3, [r7, #22]
 8004914:	3301      	adds	r3, #1
 8004916:	75bb      	strb	r3, [r7, #22]
 8004918:	7dbb      	ldrb	r3, [r7, #22]
 800491a:	2b10      	cmp	r3, #16
 800491c:	d9f3      	bls.n	8004906 <WriteTimer+0x192>
					for(i=13;i<=14;i++)
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	3301      	adds	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b0e      	cmp	r3, #14
 8004928:	d9ea      	bls.n	8004900 <WriteTimer+0x18c>

					for(i=10;i<=11;i++)
 800492a:	230a      	movs	r3, #10
 800492c:	75fb      	strb	r3, [r7, #23]
 800492e:	e011      	b.n	8004954 <WriteTimer+0x1e0>
					{
					  for(j=15;j<=16;j++)
 8004930:	230f      	movs	r3, #15
 8004932:	75bb      	strb	r3, [r7, #22]
 8004934:	e008      	b.n	8004948 <WriteTimer+0x1d4>
					  {
						 SetPixel(i, j, false);
 8004936:	7db9      	ldrb	r1, [r7, #22]
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2200      	movs	r2, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f001 fa91 	bl	8005e64 <SetPixel>
					  for(j=15;j<=16;j++)
 8004942:	7dbb      	ldrb	r3, [r7, #22]
 8004944:	3301      	adds	r3, #1
 8004946:	75bb      	strb	r3, [r7, #22]
 8004948:	7dbb      	ldrb	r3, [r7, #22]
 800494a:	2b10      	cmp	r3, #16
 800494c:	d9f3      	bls.n	8004936 <WriteTimer+0x1c2>
					for(i=10;i<=11;i++)
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	3301      	adds	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b0b      	cmp	r3, #11
 8004958:	d9ea      	bls.n	8004930 <WriteTimer+0x1bc>
					  }
					}
				}
			}

		    for(j=13;j<=17;j++)
 800495a:	230d      	movs	r3, #13
 800495c:	75bb      	strb	r3, [r7, #22]
 800495e:	e008      	b.n	8004972 <WriteTimer+0x1fe>
		    {
		    	SetPixel(3, j, true);
 8004960:	7dbb      	ldrb	r3, [r7, #22]
 8004962:	2201      	movs	r2, #1
 8004964:	4619      	mov	r1, r3
 8004966:	2003      	movs	r0, #3
 8004968:	f001 fa7c 	bl	8005e64 <SetPixel>
		    for(j=13;j<=17;j++)
 800496c:	7dbb      	ldrb	r3, [r7, #22]
 800496e:	3301      	adds	r3, #1
 8004970:	75bb      	strb	r3, [r7, #22]
 8004972:	7dbb      	ldrb	r3, [r7, #22]
 8004974:	2b11      	cmp	r3, #17
 8004976:	d9f3      	bls.n	8004960 <WriteTimer+0x1ec>
		    }

		break;
 8004978:	e13b      	b.n	8004bf2 <WriteTimer+0x47e>

		case ROTATION_90_DEGREES:
			DrowDigit(5,3,T_LETTER,Timer_Def.font_style,LETTER,rotation);
 800497a:	79ba      	ldrb	r2, [r7, #6]
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	2302      	movs	r3, #2
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	2202      	movs	r2, #2
 8004988:	2103      	movs	r1, #3
 800498a:	2005      	movs	r0, #5
 800498c:	f001 fb84 	bl	8006098 <DrowDigit>
			DrowDigit(14,3,state,Timer_Def.font_style,SMALL,rotation);
 8004990:	79b9      	ldrb	r1, [r7, #6]
 8004992:	7d7a      	ldrb	r2, [r7, #21]
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2300      	movs	r3, #0
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	460b      	mov	r3, r1
 800499e:	2103      	movs	r1, #3
 80049a0:	200e      	movs	r0, #14
 80049a2:	f001 fb79 	bl	8006098 <DrowDigit>
			DrowDigit(6,12,h,Timer_Def.font_style,SMALL,rotation);
 80049a6:	79b9      	ldrb	r1, [r7, #6]
 80049a8:	7d3a      	ldrb	r2, [r7, #20]
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	2300      	movs	r3, #0
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	460b      	mov	r3, r1
 80049b4:	210c      	movs	r1, #12
 80049b6:	2006      	movs	r0, #6
 80049b8:	f001 fb6e 	bl	8006098 <DrowDigit>
			DrowDigit(12,12,hh,Timer_Def.font_style,SMALL,rotation);
 80049bc:	79b9      	ldrb	r1, [r7, #6]
 80049be:	7cfa      	ldrb	r2, [r7, #19]
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	2300      	movs	r3, #0
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	460b      	mov	r3, r1
 80049ca:	210c      	movs	r1, #12
 80049cc:	200c      	movs	r0, #12
 80049ce:	f001 fb63 	bl	8006098 <DrowDigit>
			DrowDigit(6,21,m,Timer_Def.font_style,SMALL,rotation);
 80049d2:	79b9      	ldrb	r1, [r7, #6]
 80049d4:	7cba      	ldrb	r2, [r7, #18]
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	460b      	mov	r3, r1
 80049e0:	2115      	movs	r1, #21
 80049e2:	2006      	movs	r0, #6
 80049e4:	f001 fb58 	bl	8006098 <DrowDigit>
			DrowDigit(12,21,mm,Timer_Def.font_style,SMALL,rotation);
 80049e8:	79b9      	ldrb	r1, [r7, #6]
 80049ea:	7c7a      	ldrb	r2, [r7, #17]
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	460b      	mov	r3, r1
 80049f6:	2115      	movs	r1, #21
 80049f8:	200c      	movs	r0, #12
 80049fa:	f001 fb4d 	bl	8006098 <DrowDigit>

		    for(i=7;i<=9;i++)
 80049fe:	2307      	movs	r3, #7
 8004a00:	75fb      	strb	r3, [r7, #23]
 8004a02:	e008      	b.n	8004a16 <WriteTimer+0x2a2>
		    {
		    	SetPixel(i, 6, true);
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2106      	movs	r1, #6
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 fa2a 	bl	8005e64 <SetPixel>
		    for(i=7;i<=9;i++)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	3301      	adds	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b09      	cmp	r3, #9
 8004a1a:	d9f3      	bls.n	8004a04 <WriteTimer+0x290>
		    }

		break;
 8004a1c:	e0e9      	b.n	8004bf2 <WriteTimer+0x47e>
 8004a1e:	bf00      	nop
 8004a20:	cccccccd 	.word	0xcccccccd
 8004a24:	20000138 	.word	0x20000138
 8004a28:	2000012c 	.word	0x2000012c

		case ROTATION_180_DEGREES:
			DrowDigit(15,12,T_LETTER,Timer_Def.font_style,LETTER,rotation);
 8004a2c:	79ba      	ldrb	r2, [r7, #6]
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	2302      	movs	r3, #2
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	2202      	movs	r2, #2
 8004a3a:	210c      	movs	r1, #12
 8004a3c:	200f      	movs	r0, #15
 8004a3e:	f001 fb2b 	bl	8006098 <DrowDigit>
			DrowDigit(15,23,state,Timer_Def.font_style,SMALL,rotation);
 8004a42:	79b9      	ldrb	r1, [r7, #6]
 8004a44:	7d7a      	ldrb	r2, [r7, #21]
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	2117      	movs	r1, #23
 8004a52:	200f      	movs	r0, #15
 8004a54:	f001 fb20 	bl	8006098 <DrowDigit>
			DrowDigit(6,8,h,Timer_Def.font_style,SMALL,rotation);
 8004a58:	79b9      	ldrb	r1, [r7, #6]
 8004a5a:	7d3a      	ldrb	r2, [r7, #20]
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	460b      	mov	r3, r1
 8004a66:	2108      	movs	r1, #8
 8004a68:	2006      	movs	r0, #6
 8004a6a:	f001 fb15 	bl	8006098 <DrowDigit>
			DrowDigit(6,13,hh,Timer_Def.font_style,SMALL,rotation);
 8004a6e:	79b9      	ldrb	r1, [r7, #6]
 8004a70:	7cfa      	ldrb	r2, [r7, #19]
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	2300      	movs	r3, #0
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	210d      	movs	r1, #13
 8004a7e:	2006      	movs	r0, #6
 8004a80:	f001 fb0a 	bl	8006098 <DrowDigit>
			DrowDigit(6,21,m,Timer_Def.font_style,SMALL,rotation);
 8004a84:	79b9      	ldrb	r1, [r7, #6]
 8004a86:	7cba      	ldrb	r2, [r7, #18]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	460b      	mov	r3, r1
 8004a92:	2115      	movs	r1, #21
 8004a94:	2006      	movs	r0, #6
 8004a96:	f001 faff 	bl	8006098 <DrowDigit>
			DrowDigit(6,26,mm,Timer_Def.font_style,SMALL,rotation);
 8004a9a:	79b9      	ldrb	r1, [r7, #6]
 8004a9c:	7c7a      	ldrb	r2, [r7, #17]
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	211a      	movs	r1, #26
 8004aaa:	2006      	movs	r0, #6
 8004aac:	f001 faf4 	bl	8006098 <DrowDigit>

			if((Application.timerDefinition.isDotsBlinked==true)&&(Application.timerDefinition.isTimerEnabled==true))
 8004ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca4 <WriteTimer+0x530>)
 8004ab2:	7c9b      	ldrb	r3, [r3, #18]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03a      	beq.n	8004b2e <WriteTimer+0x3ba>
 8004ab8:	4b7a      	ldr	r3, [pc, #488]	@ (8004ca4 <WriteTimer+0x530>)
 8004aba:	7bdb      	ldrb	r3, [r3, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d036      	beq.n	8004b2e <WriteTimer+0x3ba>
			{
				if(Timers.blink==false)
 8004ac0:	4b79      	ldr	r3, [pc, #484]	@ (8004ca8 <WriteTimer+0x534>)
 8004ac2:	7a1b      	ldrb	r3, [r3, #8]
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02f      	beq.n	8004b2e <WriteTimer+0x3ba>
				{
					for(i=13;i<=14;i++)
 8004ace:	230d      	movs	r3, #13
 8004ad0:	75fb      	strb	r3, [r7, #23]
 8004ad2:	e011      	b.n	8004af8 <WriteTimer+0x384>
					  for(j=15;j<=16;j++)
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	75bb      	strb	r3, [r7, #22]
 8004ad8:	e008      	b.n	8004aec <WriteTimer+0x378>
						SetPixel(i, j, false);
 8004ada:	7db9      	ldrb	r1, [r7, #22]
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f9bf 	bl	8005e64 <SetPixel>
					  for(j=15;j<=16;j++)
 8004ae6:	7dbb      	ldrb	r3, [r7, #22]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	75bb      	strb	r3, [r7, #22]
 8004aec:	7dbb      	ldrb	r3, [r7, #22]
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d9f3      	bls.n	8004ada <WriteTimer+0x366>
					for(i=13;i<=14;i++)
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	3301      	adds	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b0e      	cmp	r3, #14
 8004afc:	d9ea      	bls.n	8004ad4 <WriteTimer+0x360>

					for(i=10;i<=11;i++)
 8004afe:	230a      	movs	r3, #10
 8004b00:	75fb      	strb	r3, [r7, #23]
 8004b02:	e011      	b.n	8004b28 <WriteTimer+0x3b4>
					{
					  for(j=15;j<=16;j++)
 8004b04:	230f      	movs	r3, #15
 8004b06:	75bb      	strb	r3, [r7, #22]
 8004b08:	e008      	b.n	8004b1c <WriteTimer+0x3a8>
					  {
						 SetPixel(i, j, false);
 8004b0a:	7db9      	ldrb	r1, [r7, #22]
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f9a7 	bl	8005e64 <SetPixel>
					  for(j=15;j<=16;j++)
 8004b16:	7dbb      	ldrb	r3, [r7, #22]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	75bb      	strb	r3, [r7, #22]
 8004b1c:	7dbb      	ldrb	r3, [r7, #22]
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d9f3      	bls.n	8004b0a <WriteTimer+0x396>
					for(i=10;i<=11;i++)
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	3301      	adds	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b0b      	cmp	r3, #11
 8004b2c:	d9ea      	bls.n	8004b04 <WriteTimer+0x390>
					  }
					}
				}
			}

		    for(j=14;j<=18;j++)
 8004b2e:	230e      	movs	r3, #14
 8004b30:	75bb      	strb	r3, [r7, #22]
 8004b32:	e008      	b.n	8004b46 <WriteTimer+0x3d2>
		    {
		    	SetPixel(12, j, true);
 8004b34:	7dbb      	ldrb	r3, [r7, #22]
 8004b36:	2201      	movs	r2, #1
 8004b38:	4619      	mov	r1, r3
 8004b3a:	200c      	movs	r0, #12
 8004b3c:	f001 f992 	bl	8005e64 <SetPixel>
		    for(j=14;j<=18;j++)
 8004b40:	7dbb      	ldrb	r3, [r7, #22]
 8004b42:	3301      	adds	r3, #1
 8004b44:	75bb      	strb	r3, [r7, #22]
 8004b46:	7dbb      	ldrb	r3, [r7, #22]
 8004b48:	2b12      	cmp	r3, #18
 8004b4a:	d9f3      	bls.n	8004b34 <WriteTimer+0x3c0>
		    }

		break;
 8004b4c:	e051      	b.n	8004bf2 <WriteTimer+0x47e>

		case ROTATION_270_DEGREES:
			DrowDigit(10,28,T_LETTER,Timer_Def.font_style,LETTER,rotation);
 8004b4e:	79ba      	ldrb	r2, [r7, #6]
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2302      	movs	r3, #2
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	211c      	movs	r1, #28
 8004b5e:	200a      	movs	r0, #10
 8004b60:	f001 fa9a 	bl	8006098 <DrowDigit>
			DrowDigit(1,28,state,Timer_Def.font_style,SMALL,rotation);
 8004b64:	79b9      	ldrb	r1, [r7, #6]
 8004b66:	7d7a      	ldrb	r2, [r7, #21]
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	460b      	mov	r3, r1
 8004b72:	211c      	movs	r1, #28
 8004b74:	2001      	movs	r0, #1
 8004b76:	f001 fa8f 	bl	8006098 <DrowDigit>
			DrowDigit(9,19,h,Timer_Def.font_style,SMALL,rotation);
 8004b7a:	79b9      	ldrb	r1, [r7, #6]
 8004b7c:	7d3a      	ldrb	r2, [r7, #20]
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	460b      	mov	r3, r1
 8004b88:	2113      	movs	r1, #19
 8004b8a:	2009      	movs	r0, #9
 8004b8c:	f001 fa84 	bl	8006098 <DrowDigit>
			DrowDigit(3,19,hh,Timer_Def.font_style,SMALL,rotation);
 8004b90:	79b9      	ldrb	r1, [r7, #6]
 8004b92:	7cfa      	ldrb	r2, [r7, #19]
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	2113      	movs	r1, #19
 8004ba0:	2003      	movs	r0, #3
 8004ba2:	f001 fa79 	bl	8006098 <DrowDigit>
			DrowDigit(9,10,m,Timer_Def.font_style,SMALL,rotation);
 8004ba6:	79b9      	ldrb	r1, [r7, #6]
 8004ba8:	7cba      	ldrb	r2, [r7, #18]
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	210a      	movs	r1, #10
 8004bb6:	2009      	movs	r0, #9
 8004bb8:	f001 fa6e 	bl	8006098 <DrowDigit>
			DrowDigit(3,10,mm,Timer_Def.font_style,SMALL,rotation);
 8004bbc:	79b9      	ldrb	r1, [r7, #6]
 8004bbe:	7c7a      	ldrb	r2, [r7, #17]
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	210a      	movs	r1, #10
 8004bcc:	2003      	movs	r0, #3
 8004bce:	f001 fa63 	bl	8006098 <DrowDigit>

		    for(i=6;i<=8;i++)
 8004bd2:	2306      	movs	r3, #6
 8004bd4:	75fb      	strb	r3, [r7, #23]
 8004bd6:	e008      	b.n	8004bea <WriteTimer+0x476>
		    {
		    	SetPixel(i, 25, true);
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2119      	movs	r1, #25
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 f940 	bl	8005e64 <SetPixel>
		    for(i=6;i<=8;i++)
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	3301      	adds	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d9f3      	bls.n	8004bd8 <WriteTimer+0x464>
		    }

		break;
 8004bf0:	bf00      	nop
	}

	if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES)) //90 и 270 градусов недопустимый режим работы, происходит подмена фунции
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <WriteTimer+0x48a>
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d123      	bne.n	8004c46 <WriteTimer+0x4d2>
	{
		if(Timer_Def.isBorderEnabled)
 8004bfe:	7a7b      	ldrb	r3, [r7, #9]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <WriteTimer+0x4d2>
		{
			for(i=0;i<16;i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	75fb      	strb	r3, [r7, #23]
 8004c08:	e01a      	b.n	8004c40 <WriteTimer+0x4cc>
			{
				SetPixel(i, 0, true);
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f927 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f921 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	2201      	movs	r2, #1
 8004c26:	211f      	movs	r1, #31
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 f91b 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2201      	movs	r2, #1
 8004c32:	211e      	movs	r1, #30
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 f915 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	2b0f      	cmp	r3, #15
 8004c44:	d9e1      	bls.n	8004c0a <WriteTimer+0x496>
			}
		}
	}

	if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d002      	beq.n	8004c52 <WriteTimer+0x4de>
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d123      	bne.n	8004c9a <WriteTimer+0x526>
	{
		if(Timer_Def.isBorderEnabled)
 8004c52:	7a7b      	ldrb	r3, [r7, #9]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <WriteTimer+0x526>
		{
			for(i=0;i<16;i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
 8004c5c:	e01a      	b.n	8004c94 <WriteTimer+0x520>
			{
				SetPixel(i, 0, true);
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	2201      	movs	r2, #1
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f8fd 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f8f7 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	211e      	movs	r1, #30
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f8f1 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
 8004c84:	2201      	movs	r2, #1
 8004c86:	211f      	movs	r1, #31
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f8eb 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	3301      	adds	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b0f      	cmp	r3, #15
 8004c98:	d9e1      	bls.n	8004c5e <WriteTimer+0x4ea>
			}
		}
	}
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd90      	pop	{r4, r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000138 	.word	0x20000138
 8004ca8:	2000012c 	.word	0x2000012c

08004cac <WriteTime>:

void WriteTime(Clock_Def_t Clock_Def, t_rotation rotation)
{
 8004cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af04      	add	r7, sp, #16
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8004cba:	4613      	mov	r3, r2
 8004cbc:	71fb      	strb	r3, [r7, #7]
  switch(Clock_Def.clock_style)
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d845      	bhi.n	8004d50 <WriteTime+0xa4>
 8004cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <WriteTime+0x20>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004d1d 	.word	0x08004d1d
 8004cd8:	08004d37 	.word	0x08004d37
  {
    case SMALL_SIX_DIGITS_TWO_STRINGS:
      WriteTimeSmallSixDigitsTwoStrings(Clock_Def.hours,Clock_Def.minutes,Clock_Def.seconds,rotation,Clock_Def.font_style,Clock_Def.isBorderEnabled,Clock_Def.isDotsBlinked);
 8004cdc:	7a38      	ldrb	r0, [r7, #8]
 8004cde:	7a7c      	ldrb	r4, [r7, #9]
 8004ce0:	7abd      	ldrb	r5, [r7, #10]
 8004ce2:	7b3b      	ldrb	r3, [r7, #12]
 8004ce4:	7b7a      	ldrb	r2, [r7, #13]
 8004ce6:	7bb9      	ldrb	r1, [r7, #14]
 8004ce8:	79fe      	ldrb	r6, [r7, #7]
 8004cea:	9102      	str	r1, [sp, #8]
 8004cec:	9201      	str	r2, [sp, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4633      	mov	r3, r6
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	f000 fc17 	bl	8005528 <WriteTimeSmallSixDigitsTwoStrings>
    break;
 8004cfa:	e029      	b.n	8004d50 <WriteTime+0xa4>

    case SMALL_SIX_DIGITS:
      WriteTimeSmallSixDigits(Clock_Def.hours,Clock_Def.minutes,Clock_Def.seconds,rotation,Clock_Def.font_style,Clock_Def.isBorderEnabled,Clock_Def.isDotsBlinked);
 8004cfc:	7a38      	ldrb	r0, [r7, #8]
 8004cfe:	7a7c      	ldrb	r4, [r7, #9]
 8004d00:	7abd      	ldrb	r5, [r7, #10]
 8004d02:	7b3b      	ldrb	r3, [r7, #12]
 8004d04:	7b7a      	ldrb	r2, [r7, #13]
 8004d06:	7bb9      	ldrb	r1, [r7, #14]
 8004d08:	79fe      	ldrb	r6, [r7, #7]
 8004d0a:	9102      	str	r1, [sp, #8]
 8004d0c:	9201      	str	r2, [sp, #4]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	4633      	mov	r3, r6
 8004d12:	462a      	mov	r2, r5
 8004d14:	4621      	mov	r1, r4
 8004d16:	f000 fe03 	bl	8005920 <WriteTimeSmallSixDigits>
    break;
 8004d1a:	e019      	b.n	8004d50 <WriteTime+0xa4>

    case SMALL_FOUR_DIGITS:
      WriteTimeSmallFourDigits(Clock_Def.hours,Clock_Def.minutes,rotation,Clock_Def.font_style,Clock_Def.isBorderEnabled,Clock_Def.isDotsBlinked);
 8004d1c:	7a38      	ldrb	r0, [r7, #8]
 8004d1e:	7a79      	ldrb	r1, [r7, #9]
 8004d20:	7b3d      	ldrb	r5, [r7, #12]
 8004d22:	7b7b      	ldrb	r3, [r7, #13]
 8004d24:	7bba      	ldrb	r2, [r7, #14]
 8004d26:	79fc      	ldrb	r4, [r7, #7]
 8004d28:	9201      	str	r2, [sp, #4]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	4622      	mov	r2, r4
 8004d30:	f000 f812 	bl	8004d58 <WriteTimeSmallFourDigits>
    break;
 8004d34:	e00c      	b.n	8004d50 <WriteTime+0xa4>

    case BIG_FOUR_DIGITS:
      WriteTimeBigFourDigits(Clock_Def.hours,Clock_Def.minutes,rotation,Clock_Def.font_style,Clock_Def.isBorderEnabled,Clock_Def.isDotsBlinked);
 8004d36:	7a38      	ldrb	r0, [r7, #8]
 8004d38:	7a79      	ldrb	r1, [r7, #9]
 8004d3a:	7b3d      	ldrb	r5, [r7, #12]
 8004d3c:	7b7b      	ldrb	r3, [r7, #13]
 8004d3e:	7bba      	ldrb	r2, [r7, #14]
 8004d40:	79fc      	ldrb	r4, [r7, #7]
 8004d42:	9201      	str	r2, [sp, #4]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	462b      	mov	r3, r5
 8004d48:	4622      	mov	r2, r4
 8004d4a:	f000 fa49 	bl	80051e0 <WriteTimeBigFourDigits>
    break;
 8004d4e:	bf00      	nop
  }
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d58 <WriteTimeSmallFourDigits>:

void WriteTimeSmallFourDigits(uint8_t hours,uint8_t minutes,t_rotation rotation,t_font_style style,bool isBorderEnabled,bool isDotsBlinked)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	71fb      	strb	r3, [r7, #7]
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71bb      	strb	r3, [r7, #6]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	717b      	strb	r3, [r7, #5]
 8004d72:	4613      	mov	r3, r2
 8004d74:	713b      	strb	r3, [r7, #4]
uint8_t h,hh,m,mm,i,j;

	h=hours/10;
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	4aad      	ldr	r2, [pc, #692]	@ (8005030 <WriteTimeSmallFourDigits+0x2d8>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	737b      	strb	r3, [r7, #13]
	hh=hours-h*10;
 8004d82:	7b7b      	ldrb	r3, [r7, #13]
 8004d84:	461a      	mov	r2, r3
 8004d86:	0152      	lsls	r2, r2, #5
 8004d88:	1ad2      	subs	r2, r2, r3
 8004d8a:	0092      	lsls	r2, r2, #2
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	4413      	add	r3, r2
 8004d96:	733b      	strb	r3, [r7, #12]
	m=minutes/10;
 8004d98:	79bb      	ldrb	r3, [r7, #6]
 8004d9a:	4aa5      	ldr	r2, [pc, #660]	@ (8005030 <WriteTimeSmallFourDigits+0x2d8>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	72fb      	strb	r3, [r7, #11]
	mm=minutes-m*10;
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	461a      	mov	r2, r3
 8004da8:	0152      	lsls	r2, r2, #5
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	0092      	lsls	r2, r2, #2
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	79bb      	ldrb	r3, [r7, #6]
 8004db6:	4413      	add	r3, r2
 8004db8:	72bb      	strb	r3, [r7, #10]

	if(rotation==ROTATION_0_DEGREES)
 8004dba:	797b      	ldrb	r3, [r7, #5]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8097 	bne.w	8004ef0 <WriteTimeSmallFourDigits+0x198>
	{
		DrowDigit(4,23,h,style,SMALL,rotation);
 8004dc2:	7939      	ldrb	r1, [r7, #4]
 8004dc4:	7b7a      	ldrb	r2, [r7, #13]
 8004dc6:	797b      	ldrb	r3, [r7, #5]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	2117      	movs	r1, #23
 8004dd2:	2004      	movs	r0, #4
 8004dd4:	f001 f960 	bl	8006098 <DrowDigit>
		DrowDigit(4,18,hh,style,SMALL,rotation);
 8004dd8:	7939      	ldrb	r1, [r7, #4]
 8004dda:	7b3a      	ldrb	r2, [r7, #12]
 8004ddc:	797b      	ldrb	r3, [r7, #5]
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	460b      	mov	r3, r1
 8004de6:	2112      	movs	r1, #18
 8004de8:	2004      	movs	r0, #4
 8004dea:	f001 f955 	bl	8006098 <DrowDigit>
		DrowDigit(4,10,m,style,SMALL,rotation);
 8004dee:	7939      	ldrb	r1, [r7, #4]
 8004df0:	7afa      	ldrb	r2, [r7, #11]
 8004df2:	797b      	ldrb	r3, [r7, #5]
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	210a      	movs	r1, #10
 8004dfe:	2004      	movs	r0, #4
 8004e00:	f001 f94a 	bl	8006098 <DrowDigit>
		DrowDigit(4,5,mm,style,SMALL,rotation);
 8004e04:	7939      	ldrb	r1, [r7, #4]
 8004e06:	7aba      	ldrb	r2, [r7, #10]
 8004e08:	797b      	ldrb	r3, [r7, #5]
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	460b      	mov	r3, r1
 8004e12:	2105      	movs	r1, #5
 8004e14:	2004      	movs	r0, #4
 8004e16:	f001 f93f 	bl	8006098 <DrowDigit>

	    for(i=5;i<=6;i++)
 8004e1a:	2305      	movs	r3, #5
 8004e1c:	73fb      	strb	r3, [r7, #15]
 8004e1e:	e011      	b.n	8004e44 <WriteTimeSmallFourDigits+0xec>
	      for(j=15;j<=16;j++)
 8004e20:	230f      	movs	r3, #15
 8004e22:	73bb      	strb	r3, [r7, #14]
 8004e24:	e008      	b.n	8004e38 <WriteTimeSmallFourDigits+0xe0>
	        SetPixel(i, j, true);
 8004e26:	7bb9      	ldrb	r1, [r7, #14]
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 f819 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 8004e32:	7bbb      	ldrb	r3, [r7, #14]
 8004e34:	3301      	adds	r3, #1
 8004e36:	73bb      	strb	r3, [r7, #14]
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d9f3      	bls.n	8004e26 <WriteTimeSmallFourDigits+0xce>
	    for(i=5;i<=6;i++)
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	3301      	adds	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d9ea      	bls.n	8004e20 <WriteTimeSmallFourDigits+0xc8>

	    for(i=8;i<=9;i++)
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	e011      	b.n	8004e74 <WriteTimeSmallFourDigits+0x11c>
	      for(j=15;j<=16;j++)
 8004e50:	230f      	movs	r3, #15
 8004e52:	73bb      	strb	r3, [r7, #14]
 8004e54:	e008      	b.n	8004e68 <WriteTimeSmallFourDigits+0x110>
	    	 SetPixel(i, j, true);
 8004e56:	7bb9      	ldrb	r1, [r7, #14]
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f801 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 8004e62:	7bbb      	ldrb	r3, [r7, #14]
 8004e64:	3301      	adds	r3, #1
 8004e66:	73bb      	strb	r3, [r7, #14]
 8004e68:	7bbb      	ldrb	r3, [r7, #14]
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d9f3      	bls.n	8004e56 <WriteTimeSmallFourDigits+0xfe>
	    for(i=8;i<=9;i++)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	3301      	adds	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b09      	cmp	r3, #9
 8004e78:	d9ea      	bls.n	8004e50 <WriteTimeSmallFourDigits+0xf8>

	    if(isDotsBlinked==true)
 8004e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d036      	beq.n	8004ef0 <WriteTimeSmallFourDigits+0x198>
	    {
	    	if(Timers.blink==false)
 8004e82:	4b6c      	ldr	r3, [pc, #432]	@ (8005034 <WriteTimeSmallFourDigits+0x2dc>)
 8004e84:	7a1b      	ldrb	r3, [r3, #8]
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02f      	beq.n	8004ef0 <WriteTimeSmallFourDigits+0x198>
	    	{
	    	    for(i=5;i<=6;i++)
 8004e90:	2305      	movs	r3, #5
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e011      	b.n	8004eba <WriteTimeSmallFourDigits+0x162>
	    	      for(j=15;j<=16;j++)
 8004e96:	230f      	movs	r3, #15
 8004e98:	73bb      	strb	r3, [r7, #14]
 8004e9a:	e008      	b.n	8004eae <WriteTimeSmallFourDigits+0x156>
	    	        SetPixel(i, j, false);
 8004e9c:	7bb9      	ldrb	r1, [r7, #14]
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 ffde 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	73bb      	strb	r3, [r7, #14]
 8004eae:	7bbb      	ldrb	r3, [r7, #14]
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d9f3      	bls.n	8004e9c <WriteTimeSmallFourDigits+0x144>
	    	    for(i=5;i<=6;i++)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d9ea      	bls.n	8004e96 <WriteTimeSmallFourDigits+0x13e>

	    	    for(i=8;i<=9;i++)
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e011      	b.n	8004eea <WriteTimeSmallFourDigits+0x192>
	    	      for(j=15;j<=16;j++)
 8004ec6:	230f      	movs	r3, #15
 8004ec8:	73bb      	strb	r3, [r7, #14]
 8004eca:	e008      	b.n	8004ede <WriteTimeSmallFourDigits+0x186>
	    	    	 SetPixel(i, j, false);
 8004ecc:	7bb9      	ldrb	r1, [r7, #14]
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 ffc6 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	3301      	adds	r3, #1
 8004edc:	73bb      	strb	r3, [r7, #14]
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d9f3      	bls.n	8004ecc <WriteTimeSmallFourDigits+0x174>
	    	    for(i=8;i<=9;i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b09      	cmp	r3, #9
 8004eee:	d9ea      	bls.n	8004ec6 <WriteTimeSmallFourDigits+0x16e>
	    	}
	    }
	}


	if(rotation==ROTATION_90_DEGREES)
 8004ef0:	797b      	ldrb	r3, [r7, #5]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d12b      	bne.n	8004f4e <WriteTimeSmallFourDigits+0x1f6>
	{
		DrowDigit(6,8,h,style,SMALL,rotation);
 8004ef6:	7939      	ldrb	r1, [r7, #4]
 8004ef8:	7b7a      	ldrb	r2, [r7, #13]
 8004efa:	797b      	ldrb	r3, [r7, #5]
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	460b      	mov	r3, r1
 8004f04:	2108      	movs	r1, #8
 8004f06:	2006      	movs	r0, #6
 8004f08:	f001 f8c6 	bl	8006098 <DrowDigit>
		DrowDigit(12,8,hh,style,SMALL,rotation);
 8004f0c:	7939      	ldrb	r1, [r7, #4]
 8004f0e:	7b3a      	ldrb	r2, [r7, #12]
 8004f10:	797b      	ldrb	r3, [r7, #5]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	2108      	movs	r1, #8
 8004f1c:	200c      	movs	r0, #12
 8004f1e:	f001 f8bb 	bl	8006098 <DrowDigit>
		DrowDigit(6,17,m,style,SMALL,rotation);
 8004f22:	7939      	ldrb	r1, [r7, #4]
 8004f24:	7afa      	ldrb	r2, [r7, #11]
 8004f26:	797b      	ldrb	r3, [r7, #5]
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	2111      	movs	r1, #17
 8004f32:	2006      	movs	r0, #6
 8004f34:	f001 f8b0 	bl	8006098 <DrowDigit>
		DrowDigit(12,17,mm,style,SMALL,rotation);
 8004f38:	7939      	ldrb	r1, [r7, #4]
 8004f3a:	7aba      	ldrb	r2, [r7, #10]
 8004f3c:	797b      	ldrb	r3, [r7, #5]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	460b      	mov	r3, r1
 8004f46:	2111      	movs	r1, #17
 8004f48:	200c      	movs	r0, #12
 8004f4a:	f001 f8a5 	bl	8006098 <DrowDigit>
	}

	if(rotation==ROTATION_180_DEGREES)
 8004f4e:	797b      	ldrb	r3, [r7, #5]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	f040 809b 	bne.w	800508c <WriteTimeSmallFourDigits+0x334>
	{
		DrowDigit(11,8,h,style,SMALL,rotation);
 8004f56:	7939      	ldrb	r1, [r7, #4]
 8004f58:	7b7a      	ldrb	r2, [r7, #13]
 8004f5a:	797b      	ldrb	r3, [r7, #5]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	460b      	mov	r3, r1
 8004f64:	2108      	movs	r1, #8
 8004f66:	200b      	movs	r0, #11
 8004f68:	f001 f896 	bl	8006098 <DrowDigit>
		DrowDigit(11,13,hh,style,SMALL,rotation);
 8004f6c:	7939      	ldrb	r1, [r7, #4]
 8004f6e:	7b3a      	ldrb	r2, [r7, #12]
 8004f70:	797b      	ldrb	r3, [r7, #5]
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	210d      	movs	r1, #13
 8004f7c:	200b      	movs	r0, #11
 8004f7e:	f001 f88b 	bl	8006098 <DrowDigit>
		DrowDigit(11,21,m,style,SMALL,rotation);
 8004f82:	7939      	ldrb	r1, [r7, #4]
 8004f84:	7afa      	ldrb	r2, [r7, #11]
 8004f86:	797b      	ldrb	r3, [r7, #5]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	2115      	movs	r1, #21
 8004f92:	200b      	movs	r0, #11
 8004f94:	f001 f880 	bl	8006098 <DrowDigit>
		DrowDigit(11,26,mm,style,SMALL,rotation);
 8004f98:	7939      	ldrb	r1, [r7, #4]
 8004f9a:	7aba      	ldrb	r2, [r7, #10]
 8004f9c:	797b      	ldrb	r3, [r7, #5]
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	211a      	movs	r1, #26
 8004fa8:	200b      	movs	r0, #11
 8004faa:	f001 f875 	bl	8006098 <DrowDigit>

	    for(i=6;i<=7;i++)
 8004fae:	2306      	movs	r3, #6
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	e011      	b.n	8004fd8 <WriteTimeSmallFourDigits+0x280>
	      for(j=15;j<=16;j++)
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	73bb      	strb	r3, [r7, #14]
 8004fb8:	e008      	b.n	8004fcc <WriteTimeSmallFourDigits+0x274>
	        SetPixel(i, j, true);
 8004fba:	7bb9      	ldrb	r1, [r7, #14]
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 ff4f 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 8004fc6:	7bbb      	ldrb	r3, [r7, #14]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	73bb      	strb	r3, [r7, #14]
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d9f3      	bls.n	8004fba <WriteTimeSmallFourDigits+0x262>
	    for(i=6;i<=7;i++)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b07      	cmp	r3, #7
 8004fdc:	d9ea      	bls.n	8004fb4 <WriteTimeSmallFourDigits+0x25c>

	    for(i=9;i<=10;i++)
 8004fde:	2309      	movs	r3, #9
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e011      	b.n	8005008 <WriteTimeSmallFourDigits+0x2b0>
	      for(j=15;j<=16;j++)
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	73bb      	strb	r3, [r7, #14]
 8004fe8:	e008      	b.n	8004ffc <WriteTimeSmallFourDigits+0x2a4>
	    	 SetPixel(i, j, true);
 8004fea:	7bb9      	ldrb	r1, [r7, #14]
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ff37 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 8004ff6:	7bbb      	ldrb	r3, [r7, #14]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	73bb      	strb	r3, [r7, #14]
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d9f3      	bls.n	8004fea <WriteTimeSmallFourDigits+0x292>
	    for(i=9;i<=10;i++)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	3301      	adds	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b0a      	cmp	r3, #10
 800500c:	d9ea      	bls.n	8004fe4 <WriteTimeSmallFourDigits+0x28c>

	    if(isDotsBlinked==true)
 800500e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03a      	beq.n	800508c <WriteTimeSmallFourDigits+0x334>
	    {
	    	if(Timers.blink==false)
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <WriteTimeSmallFourDigits+0x2dc>)
 8005018:	7a1b      	ldrb	r3, [r3, #8]
 800501a:	f083 0301 	eor.w	r3, r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d033      	beq.n	800508c <WriteTimeSmallFourDigits+0x334>
	    	{
	    	    for(i=6;i<=7;i++)
 8005024:	2306      	movs	r3, #6
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e015      	b.n	8005056 <WriteTimeSmallFourDigits+0x2fe>
	    	      for(j=15;j<=16;j++)
 800502a:	230f      	movs	r3, #15
 800502c:	73bb      	strb	r3, [r7, #14]
 800502e:	e00c      	b.n	800504a <WriteTimeSmallFourDigits+0x2f2>
 8005030:	cccccccd 	.word	0xcccccccd
 8005034:	2000012c 	.word	0x2000012c
	    	        SetPixel(i, j, false);
 8005038:	7bb9      	ldrb	r1, [r7, #14]
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2200      	movs	r2, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f000 ff10 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	3301      	adds	r3, #1
 8005048:	73bb      	strb	r3, [r7, #14]
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	2b10      	cmp	r3, #16
 800504e:	d9f3      	bls.n	8005038 <WriteTimeSmallFourDigits+0x2e0>
	    	    for(i=6;i<=7;i++)
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	3301      	adds	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	2b07      	cmp	r3, #7
 800505a:	d9e6      	bls.n	800502a <WriteTimeSmallFourDigits+0x2d2>

	    	    for(i=9;i<=10;i++)
 800505c:	2309      	movs	r3, #9
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e011      	b.n	8005086 <WriteTimeSmallFourDigits+0x32e>
	    	      for(j=15;j<=16;j++)
 8005062:	230f      	movs	r3, #15
 8005064:	73bb      	strb	r3, [r7, #14]
 8005066:	e008      	b.n	800507a <WriteTimeSmallFourDigits+0x322>
	    	    	 SetPixel(i, j, false);
 8005068:	7bb9      	ldrb	r1, [r7, #14]
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2200      	movs	r2, #0
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fef8 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	3301      	adds	r3, #1
 8005078:	73bb      	strb	r3, [r7, #14]
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d9f3      	bls.n	8005068 <WriteTimeSmallFourDigits+0x310>
	    	    for(i=9;i<=10;i++)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	3301      	adds	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b0a      	cmp	r3, #10
 800508a:	d9ea      	bls.n	8005062 <WriteTimeSmallFourDigits+0x30a>
	    	}
	    }

	}

	if(rotation==ROTATION_270_DEGREES)
 800508c:	797b      	ldrb	r3, [r7, #5]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d12b      	bne.n	80050ea <WriteTimeSmallFourDigits+0x392>
	{
		DrowDigit(9,23,h,style,SMALL,rotation);
 8005092:	7939      	ldrb	r1, [r7, #4]
 8005094:	7b7a      	ldrb	r2, [r7, #13]
 8005096:	797b      	ldrb	r3, [r7, #5]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	460b      	mov	r3, r1
 80050a0:	2117      	movs	r1, #23
 80050a2:	2009      	movs	r0, #9
 80050a4:	f000 fff8 	bl	8006098 <DrowDigit>
		DrowDigit(3,23,hh,style,SMALL,rotation);
 80050a8:	7939      	ldrb	r1, [r7, #4]
 80050aa:	7b3a      	ldrb	r2, [r7, #12]
 80050ac:	797b      	ldrb	r3, [r7, #5]
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	460b      	mov	r3, r1
 80050b6:	2117      	movs	r1, #23
 80050b8:	2003      	movs	r0, #3
 80050ba:	f000 ffed 	bl	8006098 <DrowDigit>
		DrowDigit(9,14,m,style,SMALL,rotation);
 80050be:	7939      	ldrb	r1, [r7, #4]
 80050c0:	7afa      	ldrb	r2, [r7, #11]
 80050c2:	797b      	ldrb	r3, [r7, #5]
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2300      	movs	r3, #0
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	460b      	mov	r3, r1
 80050cc:	210e      	movs	r1, #14
 80050ce:	2009      	movs	r0, #9
 80050d0:	f000 ffe2 	bl	8006098 <DrowDigit>
		DrowDigit(3,14,mm,style,SMALL,rotation);
 80050d4:	7939      	ldrb	r1, [r7, #4]
 80050d6:	7aba      	ldrb	r2, [r7, #10]
 80050d8:	797b      	ldrb	r3, [r7, #5]
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	2300      	movs	r3, #0
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	460b      	mov	r3, r1
 80050e2:	210e      	movs	r1, #14
 80050e4:	2003      	movs	r0, #3
 80050e6:	f000 ffd7 	bl	8006098 <DrowDigit>
	}

	if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES))
 80050ea:	797b      	ldrb	r3, [r7, #5]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <WriteTimeSmallFourDigits+0x39e>
 80050f0:	797b      	ldrb	r3, [r7, #5]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d145      	bne.n	8005182 <WriteTimeSmallFourDigits+0x42a>
	{
		if(isBorderEnabled)
 80050f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d041      	beq.n	8005182 <WriteTimeSmallFourDigits+0x42a>
		{
			for(i=0;i<16;i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
 8005102:	e01a      	b.n	800513a <WriteTimeSmallFourDigits+0x3e2>
			{
				SetPixel(i, 0, true);
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2201      	movs	r2, #1
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f000 feaa 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2201      	movs	r2, #1
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fea4 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2201      	movs	r2, #1
 8005120:	211f      	movs	r1, #31
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fe9e 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2201      	movs	r2, #1
 800512c:	211e      	movs	r1, #30
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fe98 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	3301      	adds	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b0f      	cmp	r3, #15
 800513e:	d9e1      	bls.n	8005104 <WriteTimeSmallFourDigits+0x3ac>
			}

			for(j=0;j<32;j++)
 8005140:	2300      	movs	r3, #0
 8005142:	73bb      	strb	r3, [r7, #14]
 8005144:	e01a      	b.n	800517c <WriteTimeSmallFourDigits+0x424>
			{
				SetPixel(0, j, true);
 8005146:	7bbb      	ldrb	r3, [r7, #14]
 8005148:	2201      	movs	r2, #1
 800514a:	4619      	mov	r1, r3
 800514c:	2000      	movs	r0, #0
 800514e:	f000 fe89 	bl	8005e64 <SetPixel>
				SetPixel(1, j, true);
 8005152:	7bbb      	ldrb	r3, [r7, #14]
 8005154:	2201      	movs	r2, #1
 8005156:	4619      	mov	r1, r3
 8005158:	2001      	movs	r0, #1
 800515a:	f000 fe83 	bl	8005e64 <SetPixel>
				SetPixel(14, j, true);
 800515e:	7bbb      	ldrb	r3, [r7, #14]
 8005160:	2201      	movs	r2, #1
 8005162:	4619      	mov	r1, r3
 8005164:	200e      	movs	r0, #14
 8005166:	f000 fe7d 	bl	8005e64 <SetPixel>
				SetPixel(15, j, true);
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	2201      	movs	r2, #1
 800516e:	4619      	mov	r1, r3
 8005170:	200f      	movs	r0, #15
 8005172:	f000 fe77 	bl	8005e64 <SetPixel>
			for(j=0;j<32;j++)
 8005176:	7bbb      	ldrb	r3, [r7, #14]
 8005178:	3301      	adds	r3, #1
 800517a:	73bb      	strb	r3, [r7, #14]
 800517c:	7bbb      	ldrb	r3, [r7, #14]
 800517e:	2b1f      	cmp	r3, #31
 8005180:	d9e1      	bls.n	8005146 <WriteTimeSmallFourDigits+0x3ee>
			}
		}
	}

	if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 8005182:	797b      	ldrb	r3, [r7, #5]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d002      	beq.n	800518e <WriteTimeSmallFourDigits+0x436>
 8005188:	797b      	ldrb	r3, [r7, #5]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d124      	bne.n	80051d8 <WriteTimeSmallFourDigits+0x480>
	{
		if(isBorderEnabled)
 800518e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d020      	beq.n	80051d8 <WriteTimeSmallFourDigits+0x480>
		{
			for(i=0;i<16;i++)
 8005196:	2300      	movs	r3, #0
 8005198:	73fb      	strb	r3, [r7, #15]
 800519a:	e01a      	b.n	80051d2 <WriteTimeSmallFourDigits+0x47a>
			{
				SetPixel(i, 0, true);
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2201      	movs	r2, #1
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fe5e 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2201      	movs	r2, #1
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fe58 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2201      	movs	r2, #1
 80051b8:	211f      	movs	r1, #31
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fe52 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2201      	movs	r2, #1
 80051c4:	211e      	movs	r1, #30
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fe4c 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	3301      	adds	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d9e1      	bls.n	800519c <WriteTimeSmallFourDigits+0x444>
			}
		}
	}
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}

080051e0 <WriteTimeBigFourDigits>:

void WriteTimeBigFourDigits(uint8_t hours,uint8_t minutes,t_rotation rotation,t_font_style style,bool isBorderEnabled,bool isDotsBlinked)
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	71fb      	strb	r3, [r7, #7]
 80051f2:	4603      	mov	r3, r0
 80051f4:	71bb      	strb	r3, [r7, #6]
 80051f6:	460b      	mov	r3, r1
 80051f8:	717b      	strb	r3, [r7, #5]
 80051fa:	4613      	mov	r3, r2
 80051fc:	713b      	strb	r3, [r7, #4]
  uint8_t h,hh,m,mm,i,j;
  h=hours/10;
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	4a9d      	ldr	r2, [pc, #628]	@ (8005478 <WriteTimeBigFourDigits+0x298>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	08db      	lsrs	r3, r3, #3
 8005208:	737b      	strb	r3, [r7, #13]
  hh=hours-h*10;
 800520a:	7b7b      	ldrb	r3, [r7, #13]
 800520c:	461a      	mov	r2, r3
 800520e:	0152      	lsls	r2, r2, #5
 8005210:	1ad2      	subs	r2, r2, r3
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	4413      	add	r3, r2
 800521e:	733b      	strb	r3, [r7, #12]
  m=minutes/10;
 8005220:	79bb      	ldrb	r3, [r7, #6]
 8005222:	4a95      	ldr	r2, [pc, #596]	@ (8005478 <WriteTimeBigFourDigits+0x298>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	08db      	lsrs	r3, r3, #3
 800522a:	72fb      	strb	r3, [r7, #11]
  mm=minutes-m*10;
 800522c:	7afb      	ldrb	r3, [r7, #11]
 800522e:	461a      	mov	r2, r3
 8005230:	0152      	lsls	r2, r2, #5
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	0092      	lsls	r2, r2, #2
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	79bb      	ldrb	r3, [r7, #6]
 800523e:	4413      	add	r3, r2
 8005240:	72bb      	strb	r3, [r7, #10]

  if(rotation==ROTATION_0_DEGREES)
 8005242:	797b      	ldrb	r3, [r7, #5]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d12b      	bne.n	80052a0 <WriteTimeBigFourDigits+0xc0>
  {
	DrowDigit(2,26,h,style,BIG,rotation);
 8005248:	7939      	ldrb	r1, [r7, #4]
 800524a:	7b7a      	ldrb	r2, [r7, #13]
 800524c:	797b      	ldrb	r3, [r7, #5]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	2301      	movs	r3, #1
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	460b      	mov	r3, r1
 8005256:	211a      	movs	r1, #26
 8005258:	2002      	movs	r0, #2
 800525a:	f000 ff1d 	bl	8006098 <DrowDigit>
	DrowDigit(2,19,hh,style,BIG,rotation);
 800525e:	7939      	ldrb	r1, [r7, #4]
 8005260:	7b3a      	ldrb	r2, [r7, #12]
 8005262:	797b      	ldrb	r3, [r7, #5]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	2301      	movs	r3, #1
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	460b      	mov	r3, r1
 800526c:	2113      	movs	r1, #19
 800526e:	2002      	movs	r0, #2
 8005270:	f000 ff12 	bl	8006098 <DrowDigit>
	DrowDigit(2,7,m,style,BIG,rotation);
 8005274:	7939      	ldrb	r1, [r7, #4]
 8005276:	7afa      	ldrb	r2, [r7, #11]
 8005278:	797b      	ldrb	r3, [r7, #5]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	2301      	movs	r3, #1
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	460b      	mov	r3, r1
 8005282:	2107      	movs	r1, #7
 8005284:	2002      	movs	r0, #2
 8005286:	f000 ff07 	bl	8006098 <DrowDigit>
	DrowDigit(2,0,mm,style,BIG,rotation);
 800528a:	7939      	ldrb	r1, [r7, #4]
 800528c:	7aba      	ldrb	r2, [r7, #10]
 800528e:	797b      	ldrb	r3, [r7, #5]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	2301      	movs	r3, #1
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	460b      	mov	r3, r1
 8005298:	2100      	movs	r1, #0
 800529a:	2002      	movs	r0, #2
 800529c:	f000 fefc 	bl	8006098 <DrowDigit>
  }

  if(rotation==ROTATION_90_DEGREES)
 80052a0:	797b      	ldrb	r3, [r7, #5]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d12b      	bne.n	80052fe <WriteTimeBigFourDigits+0x11e>
  {
	DrowDigit(6,2,h,style,BIG,rotation);
 80052a6:	7939      	ldrb	r1, [r7, #4]
 80052a8:	7b7a      	ldrb	r2, [r7, #13]
 80052aa:	797b      	ldrb	r3, [r7, #5]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	2301      	movs	r3, #1
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	460b      	mov	r3, r1
 80052b4:	2102      	movs	r1, #2
 80052b6:	2006      	movs	r0, #6
 80052b8:	f000 feee 	bl	8006098 <DrowDigit>
	DrowDigit(14,2,hh,style,BIG,rotation);
 80052bc:	7939      	ldrb	r1, [r7, #4]
 80052be:	7b3a      	ldrb	r2, [r7, #12]
 80052c0:	797b      	ldrb	r3, [r7, #5]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	2301      	movs	r3, #1
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	460b      	mov	r3, r1
 80052ca:	2102      	movs	r1, #2
 80052cc:	200e      	movs	r0, #14
 80052ce:	f000 fee3 	bl	8006098 <DrowDigit>
	DrowDigit(6,18,m,style,BIG,rotation);
 80052d2:	7939      	ldrb	r1, [r7, #4]
 80052d4:	7afa      	ldrb	r2, [r7, #11]
 80052d6:	797b      	ldrb	r3, [r7, #5]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	2301      	movs	r3, #1
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	460b      	mov	r3, r1
 80052e0:	2112      	movs	r1, #18
 80052e2:	2006      	movs	r0, #6
 80052e4:	f000 fed8 	bl	8006098 <DrowDigit>
	DrowDigit(14,18,mm,style,BIG,rotation);
 80052e8:	7939      	ldrb	r1, [r7, #4]
 80052ea:	7aba      	ldrb	r2, [r7, #10]
 80052ec:	797b      	ldrb	r3, [r7, #5]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	2301      	movs	r3, #1
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	460b      	mov	r3, r1
 80052f6:	2112      	movs	r1, #18
 80052f8:	200e      	movs	r0, #14
 80052fa:	f000 fecd 	bl	8006098 <DrowDigit>
  }

  if(rotation==ROTATION_180_DEGREES)
 80052fe:	797b      	ldrb	r3, [r7, #5]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d12b      	bne.n	800535c <WriteTimeBigFourDigits+0x17c>
  {
	DrowDigit(13,5,h,style,BIG,rotation);
 8005304:	7939      	ldrb	r1, [r7, #4]
 8005306:	7b7a      	ldrb	r2, [r7, #13]
 8005308:	797b      	ldrb	r3, [r7, #5]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	2301      	movs	r3, #1
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	460b      	mov	r3, r1
 8005312:	2105      	movs	r1, #5
 8005314:	200d      	movs	r0, #13
 8005316:	f000 febf 	bl	8006098 <DrowDigit>
	DrowDigit(13,12,hh,style,BIG,rotation);
 800531a:	7939      	ldrb	r1, [r7, #4]
 800531c:	7b3a      	ldrb	r2, [r7, #12]
 800531e:	797b      	ldrb	r3, [r7, #5]
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	2301      	movs	r3, #1
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	460b      	mov	r3, r1
 8005328:	210c      	movs	r1, #12
 800532a:	200d      	movs	r0, #13
 800532c:	f000 feb4 	bl	8006098 <DrowDigit>
	DrowDigit(13,24,m,style,BIG,rotation);
 8005330:	7939      	ldrb	r1, [r7, #4]
 8005332:	7afa      	ldrb	r2, [r7, #11]
 8005334:	797b      	ldrb	r3, [r7, #5]
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	2301      	movs	r3, #1
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	460b      	mov	r3, r1
 800533e:	2118      	movs	r1, #24
 8005340:	200d      	movs	r0, #13
 8005342:	f000 fea9 	bl	8006098 <DrowDigit>
	DrowDigit(13,31,mm,style,BIG,rotation);
 8005346:	7939      	ldrb	r1, [r7, #4]
 8005348:	7aba      	ldrb	r2, [r7, #10]
 800534a:	797b      	ldrb	r3, [r7, #5]
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2301      	movs	r3, #1
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	460b      	mov	r3, r1
 8005354:	211f      	movs	r1, #31
 8005356:	200d      	movs	r0, #13
 8005358:	f000 fe9e 	bl	8006098 <DrowDigit>
  }

  if(rotation==ROTATION_270_DEGREES)
 800535c:	797b      	ldrb	r3, [r7, #5]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d12b      	bne.n	80053ba <WriteTimeBigFourDigits+0x1da>
  {
	DrowDigit(9,29,h,style,BIG,rotation);
 8005362:	7939      	ldrb	r1, [r7, #4]
 8005364:	7b7a      	ldrb	r2, [r7, #13]
 8005366:	797b      	ldrb	r3, [r7, #5]
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	2301      	movs	r3, #1
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	460b      	mov	r3, r1
 8005370:	211d      	movs	r1, #29
 8005372:	2009      	movs	r0, #9
 8005374:	f000 fe90 	bl	8006098 <DrowDigit>
	DrowDigit(1,29,hh,style,BIG,rotation);
 8005378:	7939      	ldrb	r1, [r7, #4]
 800537a:	7b3a      	ldrb	r2, [r7, #12]
 800537c:	797b      	ldrb	r3, [r7, #5]
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	2301      	movs	r3, #1
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	460b      	mov	r3, r1
 8005386:	211d      	movs	r1, #29
 8005388:	2001      	movs	r0, #1
 800538a:	f000 fe85 	bl	8006098 <DrowDigit>
	DrowDigit(9,13,m,style,BIG,rotation);
 800538e:	7939      	ldrb	r1, [r7, #4]
 8005390:	7afa      	ldrb	r2, [r7, #11]
 8005392:	797b      	ldrb	r3, [r7, #5]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	2301      	movs	r3, #1
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	460b      	mov	r3, r1
 800539c:	210d      	movs	r1, #13
 800539e:	2009      	movs	r0, #9
 80053a0:	f000 fe7a 	bl	8006098 <DrowDigit>
	DrowDigit(1,13,mm,style,BIG,rotation);
 80053a4:	7939      	ldrb	r1, [r7, #4]
 80053a6:	7aba      	ldrb	r2, [r7, #10]
 80053a8:	797b      	ldrb	r3, [r7, #5]
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	2301      	movs	r3, #1
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	460b      	mov	r3, r1
 80053b2:	210d      	movs	r1, #13
 80053b4:	2001      	movs	r0, #1
 80053b6:	f000 fe6f 	bl	8006098 <DrowDigit>
  }

  if((rotation==ROTATION_180_DEGREES)||(rotation==ROTATION_0_DEGREES))
 80053ba:	797b      	ldrb	r3, [r7, #5]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d002      	beq.n	80053c6 <WriteTimeBigFourDigits+0x1e6>
 80053c0:	797b      	ldrb	r3, [r7, #5]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d16e      	bne.n	80054a4 <WriteTimeBigFourDigits+0x2c4>
  {

	  for(i=4;i<=5;i++)
 80053c6:	2304      	movs	r3, #4
 80053c8:	73fb      	strb	r3, [r7, #15]
 80053ca:	e011      	b.n	80053f0 <WriteTimeBigFourDigits+0x210>
	    for(j=15;j<=16;j++)
 80053cc:	230f      	movs	r3, #15
 80053ce:	73bb      	strb	r3, [r7, #14]
 80053d0:	e008      	b.n	80053e4 <WriteTimeBigFourDigits+0x204>
	    	SetPixel(i, j, true);
 80053d2:	7bb9      	ldrb	r1, [r7, #14]
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2201      	movs	r2, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fd43 	bl	8005e64 <SetPixel>
	    for(j=15;j<=16;j++)
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	3301      	adds	r3, #1
 80053e2:	73bb      	strb	r3, [r7, #14]
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d9f3      	bls.n	80053d2 <WriteTimeBigFourDigits+0x1f2>
	  for(i=4;i<=5;i++)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	3301      	adds	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d9ea      	bls.n	80053cc <WriteTimeBigFourDigits+0x1ec>

	  for(i=10;i<=11;i++)
 80053f6:	230a      	movs	r3, #10
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	e011      	b.n	8005420 <WriteTimeBigFourDigits+0x240>
	    for(j=15;j<=16;j++)
 80053fc:	230f      	movs	r3, #15
 80053fe:	73bb      	strb	r3, [r7, #14]
 8005400:	e008      	b.n	8005414 <WriteTimeBigFourDigits+0x234>
	    	SetPixel(i, j, true);
 8005402:	7bb9      	ldrb	r1, [r7, #14]
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2201      	movs	r2, #1
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fd2b 	bl	8005e64 <SetPixel>
	    for(j=15;j<=16;j++)
 800540e:	7bbb      	ldrb	r3, [r7, #14]
 8005410:	3301      	adds	r3, #1
 8005412:	73bb      	strb	r3, [r7, #14]
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	2b10      	cmp	r3, #16
 8005418:	d9f3      	bls.n	8005402 <WriteTimeBigFourDigits+0x222>
	  for(i=10;i<=11;i++)
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	3301      	adds	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b0b      	cmp	r3, #11
 8005424:	d9ea      	bls.n	80053fc <WriteTimeBigFourDigits+0x21c>

	  if(isDotsBlinked==true)
 8005426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d03a      	beq.n	80054a4 <WriteTimeBigFourDigits+0x2c4>
	  {
	    if(Timers.blink==false)
 800542e:	4b13      	ldr	r3, [pc, #76]	@ (800547c <WriteTimeBigFourDigits+0x29c>)
 8005430:	7a1b      	ldrb	r3, [r3, #8]
 8005432:	f083 0301 	eor.w	r3, r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d033      	beq.n	80054a4 <WriteTimeBigFourDigits+0x2c4>
	    {
	  	  for(i=4;i<=5;i++)
 800543c:	2304      	movs	r3, #4
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e011      	b.n	8005466 <WriteTimeBigFourDigits+0x286>
	  	    for(j=15;j<=16;j++)
 8005442:	230f      	movs	r3, #15
 8005444:	73bb      	strb	r3, [r7, #14]
 8005446:	e008      	b.n	800545a <WriteTimeBigFourDigits+0x27a>
	  	    	SetPixel(i, j, false);
 8005448:	7bb9      	ldrb	r1, [r7, #14]
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2200      	movs	r2, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fd08 	bl	8005e64 <SetPixel>
	  	    for(j=15;j<=16;j++)
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	3301      	adds	r3, #1
 8005458:	73bb      	strb	r3, [r7, #14]
 800545a:	7bbb      	ldrb	r3, [r7, #14]
 800545c:	2b10      	cmp	r3, #16
 800545e:	d9f3      	bls.n	8005448 <WriteTimeBigFourDigits+0x268>
	  	  for(i=4;i<=5;i++)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	3301      	adds	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b05      	cmp	r3, #5
 800546a:	d9ea      	bls.n	8005442 <WriteTimeBigFourDigits+0x262>

	  	  for(i=10;i<=11;i++)
 800546c:	230a      	movs	r3, #10
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e015      	b.n	800549e <WriteTimeBigFourDigits+0x2be>
	  	    for(j=15;j<=16;j++)
 8005472:	230f      	movs	r3, #15
 8005474:	73bb      	strb	r3, [r7, #14]
 8005476:	e00c      	b.n	8005492 <WriteTimeBigFourDigits+0x2b2>
 8005478:	cccccccd 	.word	0xcccccccd
 800547c:	2000012c 	.word	0x2000012c
	  	    	SetPixel(i, j, false);
 8005480:	7bb9      	ldrb	r1, [r7, #14]
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2200      	movs	r2, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fcec 	bl	8005e64 <SetPixel>
	  	    for(j=15;j<=16;j++)
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	3301      	adds	r3, #1
 8005490:	73bb      	strb	r3, [r7, #14]
 8005492:	7bbb      	ldrb	r3, [r7, #14]
 8005494:	2b10      	cmp	r3, #16
 8005496:	d9f3      	bls.n	8005480 <WriteTimeBigFourDigits+0x2a0>
	  	  for(i=10;i<=11;i++)
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	3301      	adds	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b0b      	cmp	r3, #11
 80054a2:	d9e6      	bls.n	8005472 <WriteTimeBigFourDigits+0x292>
	    }

	 }
  }

  if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES))
 80054a4:	797b      	ldrb	r3, [r7, #5]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <WriteTimeBigFourDigits+0x2d0>
 80054aa:	797b      	ldrb	r3, [r7, #5]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d118      	bne.n	80054e2 <WriteTimeBigFourDigits+0x302>
  {
	if(isBorderEnabled)
 80054b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d014      	beq.n	80054e2 <WriteTimeBigFourDigits+0x302>
	{
		for(j=0;j<32;j++)
 80054b8:	2300      	movs	r3, #0
 80054ba:	73bb      	strb	r3, [r7, #14]
 80054bc:	e00e      	b.n	80054dc <WriteTimeBigFourDigits+0x2fc>
		{
			SetPixel(0, j, true);
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	2201      	movs	r2, #1
 80054c2:	4619      	mov	r1, r3
 80054c4:	2000      	movs	r0, #0
 80054c6:	f000 fccd 	bl	8005e64 <SetPixel>
			SetPixel(15, j, true);
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	2201      	movs	r2, #1
 80054ce:	4619      	mov	r1, r3
 80054d0:	200f      	movs	r0, #15
 80054d2:	f000 fcc7 	bl	8005e64 <SetPixel>
		for(j=0;j<32;j++)
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	3301      	adds	r3, #1
 80054da:	73bb      	strb	r3, [r7, #14]
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	2b1f      	cmp	r3, #31
 80054e0:	d9ed      	bls.n	80054be <WriteTimeBigFourDigits+0x2de>
		}
	}
  }

  if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 80054e2:	797b      	ldrb	r3, [r7, #5]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d002      	beq.n	80054ee <WriteTimeBigFourDigits+0x30e>
 80054e8:	797b      	ldrb	r3, [r7, #5]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d118      	bne.n	8005520 <WriteTimeBigFourDigits+0x340>
  {
	if(isBorderEnabled)
 80054ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d014      	beq.n	8005520 <WriteTimeBigFourDigits+0x340>
	{
		for(i=0;i<16;i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e00e      	b.n	800551a <WriteTimeBigFourDigits+0x33a>
		{
				SetPixel(i, 0, true);
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2201      	movs	r2, #1
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fcae 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2201      	movs	r2, #1
 800550c:	211f      	movs	r1, #31
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fca8 	bl	8005e64 <SetPixel>
		for(i=0;i<16;i++)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	3301      	adds	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b0f      	cmp	r3, #15
 800551e:	d9ed      	bls.n	80054fc <WriteTimeBigFourDigits+0x31c>
		}
	}
  }

}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}

08005528 <WriteTimeSmallSixDigitsTwoStrings>:

void WriteTimeSmallSixDigitsTwoStrings(uint8_t hours,uint8_t minutes,uint8_t secunds,t_rotation rotation,t_font_style style,bool isBorderEnabled,bool isDotsBlinked)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af04      	add	r7, sp, #16
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4623      	mov	r3, r4
 8005538:	71fb      	strb	r3, [r7, #7]
 800553a:	4603      	mov	r3, r0
 800553c:	71bb      	strb	r3, [r7, #6]
 800553e:	460b      	mov	r3, r1
 8005540:	717b      	strb	r3, [r7, #5]
 8005542:	4613      	mov	r3, r2
 8005544:	713b      	strb	r3, [r7, #4]
uint8_t h,hh,m,mm,s,ss,i,j;
	h=hours/10;
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	4ab4      	ldr	r2, [pc, #720]	@ (800581c <WriteTimeSmallSixDigitsTwoStrings+0x2f4>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	08db      	lsrs	r3, r3, #3
 8005550:	737b      	strb	r3, [r7, #13]
	hh=hours-h*10;
 8005552:	7b7b      	ldrb	r3, [r7, #13]
 8005554:	461a      	mov	r2, r3
 8005556:	0152      	lsls	r2, r2, #5
 8005558:	1ad2      	subs	r2, r2, r3
 800555a:	0092      	lsls	r2, r2, #2
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	b2da      	uxtb	r2, r3
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	4413      	add	r3, r2
 8005566:	733b      	strb	r3, [r7, #12]
	m=minutes/10;
 8005568:	79bb      	ldrb	r3, [r7, #6]
 800556a:	4aac      	ldr	r2, [pc, #688]	@ (800581c <WriteTimeSmallSixDigitsTwoStrings+0x2f4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	08db      	lsrs	r3, r3, #3
 8005572:	72fb      	strb	r3, [r7, #11]
	mm=minutes-m*10;
 8005574:	7afb      	ldrb	r3, [r7, #11]
 8005576:	461a      	mov	r2, r3
 8005578:	0152      	lsls	r2, r2, #5
 800557a:	1ad2      	subs	r2, r2, r3
 800557c:	0092      	lsls	r2, r2, #2
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	79bb      	ldrb	r3, [r7, #6]
 8005586:	4413      	add	r3, r2
 8005588:	72bb      	strb	r3, [r7, #10]
	s=secunds/10;
 800558a:	797b      	ldrb	r3, [r7, #5]
 800558c:	4aa3      	ldr	r2, [pc, #652]	@ (800581c <WriteTimeSmallSixDigitsTwoStrings+0x2f4>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	08db      	lsrs	r3, r3, #3
 8005594:	727b      	strb	r3, [r7, #9]
	ss=secunds-s*10;
 8005596:	7a7b      	ldrb	r3, [r7, #9]
 8005598:	461a      	mov	r2, r3
 800559a:	0152      	lsls	r2, r2, #5
 800559c:	1ad2      	subs	r2, r2, r3
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	797b      	ldrb	r3, [r7, #5]
 80055a8:	4413      	add	r3, r2
 80055aa:	723b      	strb	r3, [r7, #8]

	if ((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))   //недопустимый режим работы, происходит подмена фунции
 80055ac:	793b      	ldrb	r3, [r7, #4]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d002      	beq.n	80055b8 <WriteTimeSmallSixDigitsTwoStrings+0x90>
 80055b2:	793b      	ldrb	r3, [r7, #4]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d10f      	bne.n	80055d8 <WriteTimeSmallSixDigitsTwoStrings+0xb0>
	{
		WriteTimeSmallSixDigits(hours,minutes,secunds,rotation,style,isBorderEnabled,isDotsBlinked);
 80055b8:	793c      	ldrb	r4, [r7, #4]
 80055ba:	797a      	ldrb	r2, [r7, #5]
 80055bc:	79b9      	ldrb	r1, [r7, #6]
 80055be:	79f8      	ldrb	r0, [r7, #7]
 80055c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4623      	mov	r3, r4
 80055d4:	f000 f9a4 	bl	8005920 <WriteTimeSmallSixDigits>
	}

	if (rotation==ROTATION_0_DEGREES)
 80055d8:	793b      	ldrb	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 80b3 	bne.w	8005746 <WriteTimeSmallSixDigitsTwoStrings+0x21e>
	{
		DrowDigit(0,23,h,style,SMALL,rotation);
 80055e0:	f897 1020 	ldrb.w	r1, [r7, #32]
 80055e4:	7b7a      	ldrb	r2, [r7, #13]
 80055e6:	793b      	ldrb	r3, [r7, #4]
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	460b      	mov	r3, r1
 80055f0:	2117      	movs	r1, #23
 80055f2:	2000      	movs	r0, #0
 80055f4:	f000 fd50 	bl	8006098 <DrowDigit>
		DrowDigit(0,18,hh,style,SMALL,rotation);
 80055f8:	f897 1020 	ldrb.w	r1, [r7, #32]
 80055fc:	7b3a      	ldrb	r2, [r7, #12]
 80055fe:	793b      	ldrb	r3, [r7, #4]
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	2300      	movs	r3, #0
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	460b      	mov	r3, r1
 8005608:	2112      	movs	r1, #18
 800560a:	2000      	movs	r0, #0
 800560c:	f000 fd44 	bl	8006098 <DrowDigit>
		DrowDigit(0,10,m,style,SMALL,rotation);
 8005610:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005614:	7afa      	ldrb	r2, [r7, #11]
 8005616:	793b      	ldrb	r3, [r7, #4]
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	2300      	movs	r3, #0
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	460b      	mov	r3, r1
 8005620:	210a      	movs	r1, #10
 8005622:	2000      	movs	r0, #0
 8005624:	f000 fd38 	bl	8006098 <DrowDigit>
		DrowDigit(0,5,mm,style,SMALL,rotation);
 8005628:	f897 1020 	ldrb.w	r1, [r7, #32]
 800562c:	7aba      	ldrb	r2, [r7, #10]
 800562e:	793b      	ldrb	r3, [r7, #4]
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	2300      	movs	r3, #0
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	460b      	mov	r3, r1
 8005638:	2105      	movs	r1, #5
 800563a:	2000      	movs	r0, #0
 800563c:	f000 fd2c 	bl	8006098 <DrowDigit>
		DrowDigit(9,17,s,style,SMALL,rotation);
 8005640:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005644:	7a7a      	ldrb	r2, [r7, #9]
 8005646:	793b      	ldrb	r3, [r7, #4]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	2300      	movs	r3, #0
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	460b      	mov	r3, r1
 8005650:	2111      	movs	r1, #17
 8005652:	2009      	movs	r0, #9
 8005654:	f000 fd20 	bl	8006098 <DrowDigit>
		DrowDigit(9,11,ss,style,SMALL,rotation);
 8005658:	f897 1020 	ldrb.w	r1, [r7, #32]
 800565c:	7a3a      	ldrb	r2, [r7, #8]
 800565e:	793b      	ldrb	r3, [r7, #4]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	2300      	movs	r3, #0
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	460b      	mov	r3, r1
 8005668:	210b      	movs	r1, #11
 800566a:	2009      	movs	r0, #9
 800566c:	f000 fd14 	bl	8006098 <DrowDigit>


	    for(i=1;i<=2;i++)
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
 8005674:	e011      	b.n	800569a <WriteTimeSmallSixDigitsTwoStrings+0x172>
	      for(j=15;j<=16;j++)
 8005676:	230f      	movs	r3, #15
 8005678:	73bb      	strb	r3, [r7, #14]
 800567a:	e008      	b.n	800568e <WriteTimeSmallSixDigitsTwoStrings+0x166>
	        SetPixel(i, j, true);
 800567c:	7bb9      	ldrb	r1, [r7, #14]
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2201      	movs	r2, #1
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fbee 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 8005688:	7bbb      	ldrb	r3, [r7, #14]
 800568a:	3301      	adds	r3, #1
 800568c:	73bb      	strb	r3, [r7, #14]
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	2b10      	cmp	r3, #16
 8005692:	d9f3      	bls.n	800567c <WriteTimeSmallSixDigitsTwoStrings+0x154>
	    for(i=1;i<=2;i++)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	3301      	adds	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d9ea      	bls.n	8005676 <WriteTimeSmallSixDigitsTwoStrings+0x14e>

	    for(i=4;i<=5;i++)
 80056a0:	2304      	movs	r3, #4
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	e011      	b.n	80056ca <WriteTimeSmallSixDigitsTwoStrings+0x1a2>
	      for(j=15;j<=16;j++)
 80056a6:	230f      	movs	r3, #15
 80056a8:	73bb      	strb	r3, [r7, #14]
 80056aa:	e008      	b.n	80056be <WriteTimeSmallSixDigitsTwoStrings+0x196>
	    	 SetPixel(i, j, true);
 80056ac:	7bb9      	ldrb	r1, [r7, #14]
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2201      	movs	r2, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fbd6 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	3301      	adds	r3, #1
 80056bc:	73bb      	strb	r3, [r7, #14]
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d9f3      	bls.n	80056ac <WriteTimeSmallSixDigitsTwoStrings+0x184>
	    for(i=4;i<=5;i++)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	3301      	adds	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b05      	cmp	r3, #5
 80056ce:	d9ea      	bls.n	80056a6 <WriteTimeSmallSixDigitsTwoStrings+0x17e>

	    if(isDotsBlinked==true)
 80056d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d036      	beq.n	8005746 <WriteTimeSmallSixDigitsTwoStrings+0x21e>
	    {
	    	if(Timers.blink==false)
 80056d8:	4b51      	ldr	r3, [pc, #324]	@ (8005820 <WriteTimeSmallSixDigitsTwoStrings+0x2f8>)
 80056da:	7a1b      	ldrb	r3, [r3, #8]
 80056dc:	f083 0301 	eor.w	r3, r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d02f      	beq.n	8005746 <WriteTimeSmallSixDigitsTwoStrings+0x21e>
	    	{
	    	    for(i=1;i<=2;i++)
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
 80056ea:	e011      	b.n	8005710 <WriteTimeSmallSixDigitsTwoStrings+0x1e8>
	    	      for(j=15;j<=16;j++)
 80056ec:	230f      	movs	r3, #15
 80056ee:	73bb      	strb	r3, [r7, #14]
 80056f0:	e008      	b.n	8005704 <WriteTimeSmallSixDigitsTwoStrings+0x1dc>
	    	        SetPixel(i, j, false);
 80056f2:	7bb9      	ldrb	r1, [r7, #14]
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2200      	movs	r2, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fbb3 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	3301      	adds	r3, #1
 8005702:	73bb      	strb	r3, [r7, #14]
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b10      	cmp	r3, #16
 8005708:	d9f3      	bls.n	80056f2 <WriteTimeSmallSixDigitsTwoStrings+0x1ca>
	    	    for(i=1;i<=2;i++)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	3301      	adds	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d9ea      	bls.n	80056ec <WriteTimeSmallSixDigitsTwoStrings+0x1c4>

	    	    for(i=4;i<=5;i++)
 8005716:	2304      	movs	r3, #4
 8005718:	73fb      	strb	r3, [r7, #15]
 800571a:	e011      	b.n	8005740 <WriteTimeSmallSixDigitsTwoStrings+0x218>
	    	      for(j=15;j<=16;j++)
 800571c:	230f      	movs	r3, #15
 800571e:	73bb      	strb	r3, [r7, #14]
 8005720:	e008      	b.n	8005734 <WriteTimeSmallSixDigitsTwoStrings+0x20c>
	    	    	 SetPixel(i, j, false);
 8005722:	7bb9      	ldrb	r1, [r7, #14]
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2200      	movs	r2, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb9b 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	3301      	adds	r3, #1
 8005732:	73bb      	strb	r3, [r7, #14]
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	2b10      	cmp	r3, #16
 8005738:	d9f3      	bls.n	8005722 <WriteTimeSmallSixDigitsTwoStrings+0x1fa>
	    	    for(i=4;i<=5;i++)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	3301      	adds	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d9ea      	bls.n	800571c <WriteTimeSmallSixDigitsTwoStrings+0x1f4>
	    	}
	    }
	}

	if (rotation==ROTATION_180_DEGREES)
 8005746:	793b      	ldrb	r3, [r7, #4]
 8005748:	2b02      	cmp	r3, #2
 800574a:	f040 80b8 	bne.w	80058be <WriteTimeSmallSixDigitsTwoStrings+0x396>
	{
		DrowDigit(15,8,h,style,SMALL,rotation);
 800574e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005752:	7b7a      	ldrb	r2, [r7, #13]
 8005754:	793b      	ldrb	r3, [r7, #4]
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	2300      	movs	r3, #0
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	460b      	mov	r3, r1
 800575e:	2108      	movs	r1, #8
 8005760:	200f      	movs	r0, #15
 8005762:	f000 fc99 	bl	8006098 <DrowDigit>
		DrowDigit(15,13,hh,style,SMALL,rotation);
 8005766:	f897 1020 	ldrb.w	r1, [r7, #32]
 800576a:	7b3a      	ldrb	r2, [r7, #12]
 800576c:	793b      	ldrb	r3, [r7, #4]
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	2300      	movs	r3, #0
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	460b      	mov	r3, r1
 8005776:	210d      	movs	r1, #13
 8005778:	200f      	movs	r0, #15
 800577a:	f000 fc8d 	bl	8006098 <DrowDigit>
		DrowDigit(15,21,m,style,SMALL,rotation);
 800577e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005782:	7afa      	ldrb	r2, [r7, #11]
 8005784:	793b      	ldrb	r3, [r7, #4]
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	2300      	movs	r3, #0
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	460b      	mov	r3, r1
 800578e:	2115      	movs	r1, #21
 8005790:	200f      	movs	r0, #15
 8005792:	f000 fc81 	bl	8006098 <DrowDigit>
		DrowDigit(15,26,mm,style,SMALL,rotation);
 8005796:	f897 1020 	ldrb.w	r1, [r7, #32]
 800579a:	7aba      	ldrb	r2, [r7, #10]
 800579c:	793b      	ldrb	r3, [r7, #4]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	2300      	movs	r3, #0
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	460b      	mov	r3, r1
 80057a6:	211a      	movs	r1, #26
 80057a8:	200f      	movs	r0, #15
 80057aa:	f000 fc75 	bl	8006098 <DrowDigit>
		DrowDigit(6,14,s,style,SMALL,rotation);
 80057ae:	f897 1020 	ldrb.w	r1, [r7, #32]
 80057b2:	7a7a      	ldrb	r2, [r7, #9]
 80057b4:	793b      	ldrb	r3, [r7, #4]
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	2300      	movs	r3, #0
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	460b      	mov	r3, r1
 80057be:	210e      	movs	r1, #14
 80057c0:	2006      	movs	r0, #6
 80057c2:	f000 fc69 	bl	8006098 <DrowDigit>
		DrowDigit(6,20,ss,style,SMALL,rotation);
 80057c6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80057ca:	7a3a      	ldrb	r2, [r7, #8]
 80057cc:	793b      	ldrb	r3, [r7, #4]
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	460b      	mov	r3, r1
 80057d6:	2114      	movs	r1, #20
 80057d8:	2006      	movs	r0, #6
 80057da:	f000 fc5d 	bl	8006098 <DrowDigit>

	    for(i=13;i<=14;i++)
 80057de:	230d      	movs	r3, #13
 80057e0:	73fb      	strb	r3, [r7, #15]
 80057e2:	e011      	b.n	8005808 <WriteTimeSmallSixDigitsTwoStrings+0x2e0>
	      for(j=15;j<=16;j++)
 80057e4:	230f      	movs	r3, #15
 80057e6:	73bb      	strb	r3, [r7, #14]
 80057e8:	e008      	b.n	80057fc <WriteTimeSmallSixDigitsTwoStrings+0x2d4>
	        SetPixel(i, j, true);
 80057ea:	7bb9      	ldrb	r1, [r7, #14]
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2201      	movs	r2, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fb37 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	3301      	adds	r3, #1
 80057fa:	73bb      	strb	r3, [r7, #14]
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d9f3      	bls.n	80057ea <WriteTimeSmallSixDigitsTwoStrings+0x2c2>
	    for(i=13;i<=14;i++)
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3301      	adds	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b0e      	cmp	r3, #14
 800580c:	d9ea      	bls.n	80057e4 <WriteTimeSmallSixDigitsTwoStrings+0x2bc>

	    for(i=10;i<=11;i++)
 800580e:	230a      	movs	r3, #10
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	e016      	b.n	8005842 <WriteTimeSmallSixDigitsTwoStrings+0x31a>
	      for(j=15;j<=16;j++)
 8005814:	230f      	movs	r3, #15
 8005816:	73bb      	strb	r3, [r7, #14]
 8005818:	e00d      	b.n	8005836 <WriteTimeSmallSixDigitsTwoStrings+0x30e>
 800581a:	bf00      	nop
 800581c:	cccccccd 	.word	0xcccccccd
 8005820:	2000012c 	.word	0x2000012c
	    	 SetPixel(i, j, true);
 8005824:	7bb9      	ldrb	r1, [r7, #14]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2201      	movs	r2, #1
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fb1a 	bl	8005e64 <SetPixel>
	      for(j=15;j<=16;j++)
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	3301      	adds	r3, #1
 8005834:	73bb      	strb	r3, [r7, #14]
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	2b10      	cmp	r3, #16
 800583a:	d9f3      	bls.n	8005824 <WriteTimeSmallSixDigitsTwoStrings+0x2fc>
	    for(i=10;i<=11;i++)
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	3301      	adds	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b0b      	cmp	r3, #11
 8005846:	d9e5      	bls.n	8005814 <WriteTimeSmallSixDigitsTwoStrings+0x2ec>

	    if(isDotsBlinked==true)
 8005848:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d036      	beq.n	80058be <WriteTimeSmallSixDigitsTwoStrings+0x396>
	    {
	    	if(Timers.blink==false)
 8005850:	4b32      	ldr	r3, [pc, #200]	@ (800591c <WriteTimeSmallSixDigitsTwoStrings+0x3f4>)
 8005852:	7a1b      	ldrb	r3, [r3, #8]
 8005854:	f083 0301 	eor.w	r3, r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d02f      	beq.n	80058be <WriteTimeSmallSixDigitsTwoStrings+0x396>
	    	{
	    	    for(i=13;i<=14;i++)
 800585e:	230d      	movs	r3, #13
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	e011      	b.n	8005888 <WriteTimeSmallSixDigitsTwoStrings+0x360>
	    	      for(j=15;j<=16;j++)
 8005864:	230f      	movs	r3, #15
 8005866:	73bb      	strb	r3, [r7, #14]
 8005868:	e008      	b.n	800587c <WriteTimeSmallSixDigitsTwoStrings+0x354>
	    	        SetPixel(i, j, false);
 800586a:	7bb9      	ldrb	r1, [r7, #14]
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2200      	movs	r2, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f000 faf7 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	3301      	adds	r3, #1
 800587a:	73bb      	strb	r3, [r7, #14]
 800587c:	7bbb      	ldrb	r3, [r7, #14]
 800587e:	2b10      	cmp	r3, #16
 8005880:	d9f3      	bls.n	800586a <WriteTimeSmallSixDigitsTwoStrings+0x342>
	    	    for(i=13;i<=14;i++)
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	3301      	adds	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b0e      	cmp	r3, #14
 800588c:	d9ea      	bls.n	8005864 <WriteTimeSmallSixDigitsTwoStrings+0x33c>

	    	    for(i=10;i<=11;i++)
 800588e:	230a      	movs	r3, #10
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e011      	b.n	80058b8 <WriteTimeSmallSixDigitsTwoStrings+0x390>
	    	      for(j=15;j<=16;j++)
 8005894:	230f      	movs	r3, #15
 8005896:	73bb      	strb	r3, [r7, #14]
 8005898:	e008      	b.n	80058ac <WriteTimeSmallSixDigitsTwoStrings+0x384>
	    	    	 SetPixel(i, j, false);
 800589a:	7bb9      	ldrb	r1, [r7, #14]
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2200      	movs	r2, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fadf 	bl	8005e64 <SetPixel>
	    	      for(j=15;j<=16;j++)
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	3301      	adds	r3, #1
 80058aa:	73bb      	strb	r3, [r7, #14]
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d9f3      	bls.n	800589a <WriteTimeSmallSixDigitsTwoStrings+0x372>
	    	    for(i=10;i<=11;i++)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	3301      	adds	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b0b      	cmp	r3, #11
 80058bc:	d9ea      	bls.n	8005894 <WriteTimeSmallSixDigitsTwoStrings+0x36c>
	    	}
	    }

	}

	if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES)) //90 и 270 градусов недопустимый режим работы, происходит подмена фунции
 80058be:	793b      	ldrb	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <WriteTimeSmallSixDigitsTwoStrings+0x3a2>
 80058c4:	793b      	ldrb	r3, [r7, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d124      	bne.n	8005914 <WriteTimeSmallSixDigitsTwoStrings+0x3ec>
	{
		if(isBorderEnabled)
 80058ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <WriteTimeSmallSixDigitsTwoStrings+0x3ec>
		{
			for(i=0;i<16;i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
 80058d6:	e01a      	b.n	800590e <WriteTimeSmallSixDigitsTwoStrings+0x3e6>
			{
				SetPixel(i, 0, true);
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2201      	movs	r2, #1
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fac0 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2201      	movs	r2, #1
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 faba 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2201      	movs	r2, #1
 80058f4:	211f      	movs	r1, #31
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fab4 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2201      	movs	r2, #1
 8005900:	211e      	movs	r1, #30
 8005902:	4618      	mov	r0, r3
 8005904:	f000 faae 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	3301      	adds	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b0f      	cmp	r3, #15
 8005912:	d9e1      	bls.n	80058d8 <WriteTimeSmallSixDigitsTwoStrings+0x3b0>
			}
		}
	}
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	bd90      	pop	{r4, r7, pc}
 800591c:	2000012c 	.word	0x2000012c

08005920 <WriteTimeSmallSixDigits>:

void WriteTimeSmallSixDigits(uint8_t hours,uint8_t minutes,uint8_t secunds,t_rotation rotation,t_font_style style,bool isBorderEnabled,bool isDotsBlinked)
{
 8005920:	b590      	push	{r4, r7, lr}
 8005922:	b087      	sub	sp, #28
 8005924:	af02      	add	r7, sp, #8
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4623      	mov	r3, r4
 8005930:	71fb      	strb	r3, [r7, #7]
 8005932:	4603      	mov	r3, r0
 8005934:	71bb      	strb	r3, [r7, #6]
 8005936:	460b      	mov	r3, r1
 8005938:	717b      	strb	r3, [r7, #5]
 800593a:	4613      	mov	r3, r2
 800593c:	713b      	strb	r3, [r7, #4]
uint8_t h,hh,m,mm,s,ss,j,i;

  h=hours/10;
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	4ab5      	ldr	r2, [pc, #724]	@ (8005c18 <WriteTimeSmallSixDigits+0x2f8>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	737b      	strb	r3, [r7, #13]
  hh=hours-h*10;
 800594a:	7b7b      	ldrb	r3, [r7, #13]
 800594c:	461a      	mov	r2, r3
 800594e:	0152      	lsls	r2, r2, #5
 8005950:	1ad2      	subs	r2, r2, r3
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	b2da      	uxtb	r2, r3
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	4413      	add	r3, r2
 800595e:	733b      	strb	r3, [r7, #12]
  m=minutes/10;
 8005960:	79bb      	ldrb	r3, [r7, #6]
 8005962:	4aad      	ldr	r2, [pc, #692]	@ (8005c18 <WriteTimeSmallSixDigits+0x2f8>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	72fb      	strb	r3, [r7, #11]
  mm=minutes-m*10;
 800596c:	7afb      	ldrb	r3, [r7, #11]
 800596e:	461a      	mov	r2, r3
 8005970:	0152      	lsls	r2, r2, #5
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	0092      	lsls	r2, r2, #2
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	b2da      	uxtb	r2, r3
 800597c:	79bb      	ldrb	r3, [r7, #6]
 800597e:	4413      	add	r3, r2
 8005980:	72bb      	strb	r3, [r7, #10]
  s=secunds/10;
 8005982:	797b      	ldrb	r3, [r7, #5]
 8005984:	4aa4      	ldr	r2, [pc, #656]	@ (8005c18 <WriteTimeSmallSixDigits+0x2f8>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	727b      	strb	r3, [r7, #9]
  ss=secunds-s*10;
 800598e:	7a7b      	ldrb	r3, [r7, #9]
 8005990:	461a      	mov	r2, r3
 8005992:	0152      	lsls	r2, r2, #5
 8005994:	1ad2      	subs	r2, r2, r3
 8005996:	0092      	lsls	r2, r2, #2
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	797b      	ldrb	r3, [r7, #5]
 80059a0:	4413      	add	r3, r2
 80059a2:	723b      	strb	r3, [r7, #8]

  if(rotation==ROTATION_0_DEGREES)
 80059a4:	793b      	ldrb	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d147      	bne.n	8005a3a <WriteTimeSmallSixDigits+0x11a>
  {
	DrowDigit(4,28,h,style,SMALL,rotation);
 80059aa:	f897 1020 	ldrb.w	r1, [r7, #32]
 80059ae:	7b7a      	ldrb	r2, [r7, #13]
 80059b0:	793b      	ldrb	r3, [r7, #4]
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	460b      	mov	r3, r1
 80059ba:	211c      	movs	r1, #28
 80059bc:	2004      	movs	r0, #4
 80059be:	f000 fb6b 	bl	8006098 <DrowDigit>
	DrowDigit(4,23,hh,style,SMALL,rotation);
 80059c2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80059c6:	7b3a      	ldrb	r2, [r7, #12]
 80059c8:	793b      	ldrb	r3, [r7, #4]
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	460b      	mov	r3, r1
 80059d2:	2117      	movs	r1, #23
 80059d4:	2004      	movs	r0, #4
 80059d6:	f000 fb5f 	bl	8006098 <DrowDigit>
	DrowDigit(4,17,m,style,SMALL,rotation);
 80059da:	f897 1020 	ldrb.w	r1, [r7, #32]
 80059de:	7afa      	ldrb	r2, [r7, #11]
 80059e0:	793b      	ldrb	r3, [r7, #4]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	2300      	movs	r3, #0
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	460b      	mov	r3, r1
 80059ea:	2111      	movs	r1, #17
 80059ec:	2004      	movs	r0, #4
 80059ee:	f000 fb53 	bl	8006098 <DrowDigit>
	DrowDigit(4,12,mm,style,SMALL,rotation);
 80059f2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80059f6:	7aba      	ldrb	r2, [r7, #10]
 80059f8:	793b      	ldrb	r3, [r7, #4]
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	460b      	mov	r3, r1
 8005a02:	210c      	movs	r1, #12
 8005a04:	2004      	movs	r0, #4
 8005a06:	f000 fb47 	bl	8006098 <DrowDigit>
	DrowDigit(4,6,s,style,SMALL,rotation);
 8005a0a:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005a0e:	7a7a      	ldrb	r2, [r7, #9]
 8005a10:	793b      	ldrb	r3, [r7, #4]
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	2106      	movs	r1, #6
 8005a1c:	2004      	movs	r0, #4
 8005a1e:	f000 fb3b 	bl	8006098 <DrowDigit>
	DrowDigit(4,1,ss,style,SMALL,rotation);
 8005a22:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005a26:	7a3a      	ldrb	r2, [r7, #8]
 8005a28:	793b      	ldrb	r3, [r7, #4]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	460b      	mov	r3, r1
 8005a32:	2101      	movs	r1, #1
 8005a34:	2004      	movs	r0, #4
 8005a36:	f000 fb2f 	bl	8006098 <DrowDigit>
  }

  if(rotation==ROTATION_90_DEGREES)
 8005a3a:	793b      	ldrb	r3, [r7, #4]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d147      	bne.n	8005ad0 <WriteTimeSmallSixDigits+0x1b0>
  {
	DrowDigit(6,3,h,style,SMALL,rotation);
 8005a40:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005a44:	7b7a      	ldrb	r2, [r7, #13]
 8005a46:	793b      	ldrb	r3, [r7, #4]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	2103      	movs	r1, #3
 8005a52:	2006      	movs	r0, #6
 8005a54:	f000 fb20 	bl	8006098 <DrowDigit>
	DrowDigit(12,3,hh,style,SMALL,rotation);
 8005a58:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005a5c:	7b3a      	ldrb	r2, [r7, #12]
 8005a5e:	793b      	ldrb	r3, [r7, #4]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	460b      	mov	r3, r1
 8005a68:	2103      	movs	r1, #3
 8005a6a:	200c      	movs	r0, #12
 8005a6c:	f000 fb14 	bl	8006098 <DrowDigit>
	DrowDigit(6,12,m,style,SMALL,rotation);
 8005a70:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005a74:	7afa      	ldrb	r2, [r7, #11]
 8005a76:	793b      	ldrb	r3, [r7, #4]
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	210c      	movs	r1, #12
 8005a82:	2006      	movs	r0, #6
 8005a84:	f000 fb08 	bl	8006098 <DrowDigit>
	DrowDigit(12,12,mm,style,SMALL,rotation);
 8005a88:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005a8c:	7aba      	ldrb	r2, [r7, #10]
 8005a8e:	793b      	ldrb	r3, [r7, #4]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	460b      	mov	r3, r1
 8005a98:	210c      	movs	r1, #12
 8005a9a:	200c      	movs	r0, #12
 8005a9c:	f000 fafc 	bl	8006098 <DrowDigit>
	DrowDigit(6,21,s,style,SMALL,rotation);
 8005aa0:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005aa4:	7a7a      	ldrb	r2, [r7, #9]
 8005aa6:	793b      	ldrb	r3, [r7, #4]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	2115      	movs	r1, #21
 8005ab2:	2006      	movs	r0, #6
 8005ab4:	f000 faf0 	bl	8006098 <DrowDigit>
	DrowDigit(12,21,ss,style,SMALL,rotation);
 8005ab8:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005abc:	7a3a      	ldrb	r2, [r7, #8]
 8005abe:	793b      	ldrb	r3, [r7, #4]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	2115      	movs	r1, #21
 8005aca:	200c      	movs	r0, #12
 8005acc:	f000 fae4 	bl	8006098 <DrowDigit>
  }

  if(rotation==ROTATION_180_DEGREES)
 8005ad0:	793b      	ldrb	r3, [r7, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d147      	bne.n	8005b66 <WriteTimeSmallSixDigits+0x246>
  {
	  DrowDigit(11,3,h,style,SMALL,rotation);
 8005ad6:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005ada:	7b7a      	ldrb	r2, [r7, #13]
 8005adc:	793b      	ldrb	r3, [r7, #4]
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	2103      	movs	r1, #3
 8005ae8:	200b      	movs	r0, #11
 8005aea:	f000 fad5 	bl	8006098 <DrowDigit>
	  DrowDigit(11,8,hh,style,SMALL,rotation);
 8005aee:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005af2:	7b3a      	ldrb	r2, [r7, #12]
 8005af4:	793b      	ldrb	r3, [r7, #4]
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	2300      	movs	r3, #0
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	460b      	mov	r3, r1
 8005afe:	2108      	movs	r1, #8
 8005b00:	200b      	movs	r0, #11
 8005b02:	f000 fac9 	bl	8006098 <DrowDigit>
	  DrowDigit(11,14,m,style,SMALL,rotation);
 8005b06:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005b0a:	7afa      	ldrb	r2, [r7, #11]
 8005b0c:	793b      	ldrb	r3, [r7, #4]
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	460b      	mov	r3, r1
 8005b16:	210e      	movs	r1, #14
 8005b18:	200b      	movs	r0, #11
 8005b1a:	f000 fabd 	bl	8006098 <DrowDigit>
	  DrowDigit(11,19,mm,style,SMALL,rotation);
 8005b1e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005b22:	7aba      	ldrb	r2, [r7, #10]
 8005b24:	793b      	ldrb	r3, [r7, #4]
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	2113      	movs	r1, #19
 8005b30:	200b      	movs	r0, #11
 8005b32:	f000 fab1 	bl	8006098 <DrowDigit>
	  DrowDigit(11,25,s,style,SMALL,rotation);
 8005b36:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005b3a:	7a7a      	ldrb	r2, [r7, #9]
 8005b3c:	793b      	ldrb	r3, [r7, #4]
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	460b      	mov	r3, r1
 8005b46:	2119      	movs	r1, #25
 8005b48:	200b      	movs	r0, #11
 8005b4a:	f000 faa5 	bl	8006098 <DrowDigit>
	  DrowDigit(11,30,ss,style,SMALL,rotation);
 8005b4e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005b52:	7a3a      	ldrb	r2, [r7, #8]
 8005b54:	793b      	ldrb	r3, [r7, #4]
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	211e      	movs	r1, #30
 8005b60:	200b      	movs	r0, #11
 8005b62:	f000 fa99 	bl	8006098 <DrowDigit>
  }

  if(rotation==ROTATION_270_DEGREES)
 8005b66:	793b      	ldrb	r3, [r7, #4]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d147      	bne.n	8005bfc <WriteTimeSmallSixDigits+0x2dc>
  {
	DrowDigit(9,28,h,style,SMALL,rotation);
 8005b6c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005b70:	7b7a      	ldrb	r2, [r7, #13]
 8005b72:	793b      	ldrb	r3, [r7, #4]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	211c      	movs	r1, #28
 8005b7e:	2009      	movs	r0, #9
 8005b80:	f000 fa8a 	bl	8006098 <DrowDigit>
	DrowDigit(3,28,hh,style,SMALL,rotation);
 8005b84:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005b88:	7b3a      	ldrb	r2, [r7, #12]
 8005b8a:	793b      	ldrb	r3, [r7, #4]
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	460b      	mov	r3, r1
 8005b94:	211c      	movs	r1, #28
 8005b96:	2003      	movs	r0, #3
 8005b98:	f000 fa7e 	bl	8006098 <DrowDigit>
	DrowDigit(9,19,m,style,SMALL,rotation);
 8005b9c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005ba0:	7afa      	ldrb	r2, [r7, #11]
 8005ba2:	793b      	ldrb	r3, [r7, #4]
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	460b      	mov	r3, r1
 8005bac:	2113      	movs	r1, #19
 8005bae:	2009      	movs	r0, #9
 8005bb0:	f000 fa72 	bl	8006098 <DrowDigit>
	DrowDigit(3,19,mm,style,SMALL,rotation);
 8005bb4:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005bb8:	7aba      	ldrb	r2, [r7, #10]
 8005bba:	793b      	ldrb	r3, [r7, #4]
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	2113      	movs	r1, #19
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	f000 fa66 	bl	8006098 <DrowDigit>
	DrowDigit(9,10,s,style,SMALL,rotation);
 8005bcc:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005bd0:	7a7a      	ldrb	r2, [r7, #9]
 8005bd2:	793b      	ldrb	r3, [r7, #4]
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	210a      	movs	r1, #10
 8005bde:	2009      	movs	r0, #9
 8005be0:	f000 fa5a 	bl	8006098 <DrowDigit>
	DrowDigit(3,10,ss,style,SMALL,rotation);
 8005be4:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005be8:	7a3a      	ldrb	r2, [r7, #8]
 8005bea:	793b      	ldrb	r3, [r7, #4]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	210a      	movs	r1, #10
 8005bf6:	2003      	movs	r0, #3
 8005bf8:	f000 fa4e 	bl	8006098 <DrowDigit>
  }

	if((rotation==ROTATION_0_DEGREES)||(rotation==ROTATION_180_DEGREES))
 8005bfc:	793b      	ldrb	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <WriteTimeSmallSixDigits+0x2e8>
 8005c02:	793b      	ldrb	r3, [r7, #4]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d127      	bne.n	8005c58 <WriteTimeSmallSixDigits+0x338>
	{
		if(isBorderEnabled)
 8005c08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d023      	beq.n	8005c58 <WriteTimeSmallSixDigits+0x338>
		{
			for(j=0;j<32;j++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]
 8005c14:	e01d      	b.n	8005c52 <WriteTimeSmallSixDigits+0x332>
 8005c16:	bf00      	nop
 8005c18:	cccccccd 	.word	0xcccccccd
			{
				SetPixel(0, j, true);
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4619      	mov	r1, r3
 8005c22:	2000      	movs	r0, #0
 8005c24:	f000 f91e 	bl	8005e64 <SetPixel>
				SetPixel(1, j, true);
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f000 f918 	bl	8005e64 <SetPixel>
				SetPixel(14, j, true);
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2201      	movs	r2, #1
 8005c38:	4619      	mov	r1, r3
 8005c3a:	200e      	movs	r0, #14
 8005c3c:	f000 f912 	bl	8005e64 <SetPixel>
				SetPixel(15, j, true);
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2201      	movs	r2, #1
 8005c44:	4619      	mov	r1, r3
 8005c46:	200f      	movs	r0, #15
 8005c48:	f000 f90c 	bl	8005e64 <SetPixel>
			for(j=0;j<32;j++)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b1f      	cmp	r3, #31
 8005c56:	d9e1      	bls.n	8005c1c <WriteTimeSmallSixDigits+0x2fc>
			}
		}
	}

	if((rotation==ROTATION_90_DEGREES)||(rotation==ROTATION_270_DEGREES))
 8005c58:	793b      	ldrb	r3, [r7, #4]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d002      	beq.n	8005c64 <WriteTimeSmallSixDigits+0x344>
 8005c5e:	793b      	ldrb	r3, [r7, #4]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d124      	bne.n	8005cae <WriteTimeSmallSixDigits+0x38e>
	{
		if(isBorderEnabled)
 8005c64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d020      	beq.n	8005cae <WriteTimeSmallSixDigits+0x38e>
		{
			for(i=0;i<16;i++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73bb      	strb	r3, [r7, #14]
 8005c70:	e01a      	b.n	8005ca8 <WriteTimeSmallSixDigits+0x388>
			{
				SetPixel(i, 0, true);
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	2201      	movs	r2, #1
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f8f3 	bl	8005e64 <SetPixel>
				SetPixel(i, 1, true);
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	2201      	movs	r2, #1
 8005c82:	2101      	movs	r1, #1
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f8ed 	bl	8005e64 <SetPixel>
				SetPixel(i, 30, true);
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	211e      	movs	r1, #30
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f8e7 	bl	8005e64 <SetPixel>
				SetPixel(i, 31, true);
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	211f      	movs	r1, #31
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f8e1 	bl	8005e64 <SetPixel>
			for(i=0;i<16;i++)
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	73bb      	strb	r3, [r7, #14]
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	d9e1      	bls.n	8005c72 <WriteTimeSmallSixDigits+0x352>
			}
		}
	}

}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	bf00      	nop

08005cb8 <InitMax7219>:
#include "../App/Application.h"

matrix_t Matrix;

void InitMax7219(int count)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
uint8_t i,j;

	for(j=0;j<count;j++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73bb      	strb	r3, [r7, #14]
 8005cc4:	e00f      	b.n	8005ce6 <InitMax7219+0x2e>
	{
	  SPI_2.transmitBuffer[j*2]=OP_DISPLAYTEST;
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4a57      	ldr	r2, [pc, #348]	@ (8005e28 <InitMax7219+0x170>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	220f      	movs	r2, #15
 8005cd0:	705a      	strb	r2, [r3, #1]
	  SPI_2.transmitBuffer[j*2+1]=0;
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	4a53      	ldr	r2, [pc, #332]	@ (8005e28 <InitMax7219+0x170>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	2200      	movs	r2, #0
 8005cde:	705a      	strb	r2, [r3, #1]
	for(j=0;j<count;j++)
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	73bb      	strb	r3, [r7, #14]
 8005ce6:	7bbb      	ldrb	r3, [r7, #14]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	dceb      	bgt.n	8005cc6 <InitMax7219+0xe>
	}
	  SPI_2.count=16;
 8005cee:	4b4e      	ldr	r3, [pc, #312]	@ (8005e28 <InitMax7219+0x170>)
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  SPI_2_Transmit();
 8005cf6:	f006 fe27 	bl	800c948 <SPI_2_Transmit>
	  HAL_Delay(1);
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	f002 fbb8 	bl	8008470 <HAL_Delay>
	for(j=0;j<count;j++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	73bb      	strb	r3, [r7, #14]
 8005d04:	e00f      	b.n	8005d26 <InitMax7219+0x6e>
	{
	  SPI_2.transmitBuffer[j*2]=OP_SCANLIMIT;
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4a47      	ldr	r2, [pc, #284]	@ (8005e28 <InitMax7219+0x170>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	220b      	movs	r2, #11
 8005d10:	705a      	strb	r2, [r3, #1]
	  SPI_2.transmitBuffer[j*2+1]=7;
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	3301      	adds	r3, #1
 8005d18:	4a43      	ldr	r2, [pc, #268]	@ (8005e28 <InitMax7219+0x170>)
 8005d1a:	4413      	add	r3, r2
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	705a      	strb	r2, [r3, #1]
	for(j=0;j<count;j++)
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73bb      	strb	r3, [r7, #14]
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	dceb      	bgt.n	8005d06 <InitMax7219+0x4e>
	}
	  SPI_2.count=16;
 8005d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e28 <InitMax7219+0x170>)
 8005d30:	2210      	movs	r2, #16
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  SPI_2_Transmit();
 8005d36:	f006 fe07 	bl	800c948 <SPI_2_Transmit>
	  HAL_Delay(1);
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	f002 fb98 	bl	8008470 <HAL_Delay>
	for(j=0;j<count;j++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	73bb      	strb	r3, [r7, #14]
 8005d44:	e00f      	b.n	8005d66 <InitMax7219+0xae>
	{
	  SPI_2.transmitBuffer[j*2]=OP_DECODEMODE;
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4a37      	ldr	r2, [pc, #220]	@ (8005e28 <InitMax7219+0x170>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	2209      	movs	r2, #9
 8005d50:	705a      	strb	r2, [r3, #1]
	  SPI_2.transmitBuffer[j*2+1]=0;
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	3301      	adds	r3, #1
 8005d58:	4a33      	ldr	r2, [pc, #204]	@ (8005e28 <InitMax7219+0x170>)
 8005d5a:	4413      	add	r3, r2
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	705a      	strb	r2, [r3, #1]
	for(j=0;j<count;j++)
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	3301      	adds	r3, #1
 8005d64:	73bb      	strb	r3, [r7, #14]
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	dceb      	bgt.n	8005d46 <InitMax7219+0x8e>
	}
	  SPI_2.count=16;
 8005d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e28 <InitMax7219+0x170>)
 8005d70:	2210      	movs	r2, #16
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  SPI_2_Transmit();
 8005d76:	f006 fde7 	bl	800c948 <SPI_2_Transmit>
	  HAL_Delay(1);
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f002 fb78 	bl	8008470 <HAL_Delay>
	for(j=0;j<count;j++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	73bb      	strb	r3, [r7, #14]
 8005d84:	e00f      	b.n	8005da6 <InitMax7219+0xee>
	{
	  SPI_2.transmitBuffer[j*2]=OP_SHUTDOWN;
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	4a27      	ldr	r2, [pc, #156]	@ (8005e28 <InitMax7219+0x170>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	220c      	movs	r2, #12
 8005d90:	705a      	strb	r2, [r3, #1]
	  SPI_2.transmitBuffer[j*2+1]=1;
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	3301      	adds	r3, #1
 8005d98:	4a23      	ldr	r2, [pc, #140]	@ (8005e28 <InitMax7219+0x170>)
 8005d9a:	4413      	add	r3, r2
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	705a      	strb	r2, [r3, #1]
	for(j=0;j<count;j++)
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	3301      	adds	r3, #1
 8005da4:	73bb      	strb	r3, [r7, #14]
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	dceb      	bgt.n	8005d86 <InitMax7219+0xce>
	}
	  SPI_2.count=16;
 8005dae:	4b1e      	ldr	r3, [pc, #120]	@ (8005e28 <InitMax7219+0x170>)
 8005db0:	2210      	movs	r2, #16
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  SPI_2_Transmit();
 8005db6:	f006 fdc7 	bl	800c948 <SPI_2_Transmit>
	  HAL_Delay(1);
 8005dba:	2001      	movs	r0, #1
 8005dbc:	f002 fb58 	bl	8008470 <HAL_Delay>
	for(j=0;j<count;j++)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73bb      	strb	r3, [r7, #14]
 8005dc4:	e00f      	b.n	8005de6 <InitMax7219+0x12e>
	{
	  SPI_2.transmitBuffer[j*2]=OP_INTENSITY;
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4a17      	ldr	r2, [pc, #92]	@ (8005e28 <InitMax7219+0x170>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	220a      	movs	r2, #10
 8005dd0:	705a      	strb	r2, [r3, #1]
	  SPI_2.transmitBuffer[j*2+1]=0;
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	4a13      	ldr	r2, [pc, #76]	@ (8005e28 <InitMax7219+0x170>)
 8005dda:	4413      	add	r3, r2
 8005ddc:	2200      	movs	r2, #0
 8005dde:	705a      	strb	r2, [r3, #1]
	for(j=0;j<count;j++)
 8005de0:	7bbb      	ldrb	r3, [r7, #14]
 8005de2:	3301      	adds	r3, #1
 8005de4:	73bb      	strb	r3, [r7, #14]
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	dceb      	bgt.n	8005dc6 <InitMax7219+0x10e>
	}
	  SPI_2.count=16;
 8005dee:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <InitMax7219+0x170>)
 8005df0:	2210      	movs	r2, #16
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  SPI_2_Transmit();
 8005df6:	f006 fda7 	bl	800c948 <SPI_2_Transmit>
	  HAL_Delay(1);
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	f002 fb38 	bl	8008470 <HAL_Delay>

	for(i=0;i<32;i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
 8005e04:	e007      	b.n	8005e16 <InitMax7219+0x15e>
	{
		Matrix.data[i]=0;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	4a08      	ldr	r2, [pc, #32]	@ (8005e2c <InitMax7219+0x174>)
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<32;i++)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	3301      	adds	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	2b1f      	cmp	r3, #31
 8005e1a:	d9f4      	bls.n	8005e06 <InitMax7219+0x14e>
	}
	UpdateMax7219();
 8005e1c:	f000 f88a 	bl	8005f34 <UpdateMax7219>
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	200003f8 	.word	0x200003f8
 8005e2c:	2000027c 	.word	0x2000027c

08005e30 <ClearMax7219>:

void ClearMax7219(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<32;i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	71fb      	strb	r3, [r7, #7]
 8005e3a:	e007      	b.n	8005e4c <ClearMax7219+0x1c>
	{
		Matrix.data[i]=0;
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <ClearMax7219+0x30>)
 8005e40:	2100      	movs	r1, #0
 8005e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0;i<32;i++)
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	71fb      	strb	r3, [r7, #7]
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	2b1f      	cmp	r3, #31
 8005e50:	d9f4      	bls.n	8005e3c <ClearMax7219+0xc>
	}
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	2000027c 	.word	0x2000027c

08005e64 <SetPixel>:

void SetPixel(uint8_t x,uint8_t y,bool state)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	71fb      	strb	r3, [r7, #7]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	71bb      	strb	r3, [r7, #6]
 8005e72:	4613      	mov	r3, r2
 8005e74:	717b      	strb	r3, [r7, #5]
	if((!((x>=0)&&(x<=15)))&&(!((y>=0)&&(y<=31))))
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d902      	bls.n	8005e82 <SetPixel+0x1e>
 8005e7c:	79bb      	ldrb	r3, [r7, #6]
 8005e7e:	2b1f      	cmp	r3, #31
 8005e80:	d82c      	bhi.n	8005edc <SetPixel+0x78>
	{
		return;
	}
	else
	{	if(state)
 8005e82:	797b      	ldrb	r3, [r7, #5]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <SetPixel+0x4c>
		{
			Matrix.data[y]=Matrix.data[y]|(1<<(15-x));
 8005e88:	79bb      	ldrb	r3, [r7, #6]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	@ (8005ee8 <SetPixel+0x84>)
 8005e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e90:	b21a      	sxth	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	f1c3 030f 	rsb	r3, r3, #15
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9e:	b21b      	sxth	r3, r3
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	b21a      	sxth	r2, r3
 8005ea4:	79bb      	ldrb	r3, [r7, #6]
 8005ea6:	b291      	uxth	r1, r2
 8005ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8005ee8 <SetPixel+0x84>)
 8005eaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005eae:	e016      	b.n	8005ede <SetPixel+0x7a>
		}
		else
		{
			Matrix.data[y]=Matrix.data[y]&(~(1<<(15-x)));
 8005eb0:	79bb      	ldrb	r3, [r7, #6]
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <SetPixel+0x84>)
 8005eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb8:	b21a      	sxth	r2, r3
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f1c3 030f 	rsb	r3, r3, #15
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	b21b      	sxth	r3, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	b21b      	sxth	r3, r3
 8005ecc:	4013      	ands	r3, r2
 8005ece:	b21a      	sxth	r2, r3
 8005ed0:	79bb      	ldrb	r3, [r7, #6]
 8005ed2:	b291      	uxth	r1, r2
 8005ed4:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <SetPixel+0x84>)
 8005ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005eda:	e000      	b.n	8005ede <SetPixel+0x7a>
		return;
 8005edc:	bf00      	nop
		}
	}
}
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	2000027c 	.word	0x2000027c

08005eec <GetPixel>:

bool GetPixel(uint8_t x,uint8_t y)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460a      	mov	r2, r1
 8005ef6:	71fb      	strb	r3, [r7, #7]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71bb      	strb	r3, [r7, #6]
bool result;

	if(Matrix.data[y]&(1<<(15-x)))
 8005efc:	79bb      	ldrb	r3, [r7, #6]
 8005efe:	4a0c      	ldr	r2, [pc, #48]	@ (8005f30 <GetPixel+0x44>)
 8005f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f04:	461a      	mov	r2, r3
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	f1c3 030f 	rsb	r3, r3, #15
 8005f0c:	fa42 f303 	asr.w	r3, r2, r3
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <GetPixel+0x32>
	{
		result=true;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
 8005f1c:	e001      	b.n	8005f22 <GetPixel+0x36>
	}
	else
	{
		result=false;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	2000027c 	.word	0x2000027c

08005f34 <UpdateMax7219>:

void UpdateMax7219(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
uint8_t	byteIndex=0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	71fb      	strb	r3, [r7, #7]
part_t	part;
uint8_t data,shift;

	if (SPI_2.status==SPI_BYSY)
 8005f3e:	4b54      	ldr	r3, [pc, #336]	@ (8006090 <UpdateMax7219+0x15c>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	f000 809f 	beq.w	8006086 <UpdateMax7219+0x152>
	{
		return;
	}

	for(uint8_t i=0;i<8;i++)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	70fb      	strb	r3, [r7, #3]
 8005f4c:	e096      	b.n	800607c <UpdateMax7219+0x148>
	{
		for(uint8_t j=0;j<8;j++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	70bb      	strb	r3, [r7, #2]
 8005f52:	e07f      	b.n	8006054 <UpdateMax7219+0x120>
		{
			switch(j)
 8005f54:	78bb      	ldrb	r3, [r7, #2]
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d83a      	bhi.n	8005fd0 <UpdateMax7219+0x9c>
 8005f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UpdateMax7219+0x2c>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f81 	.word	0x08005f81
 8005f64:	08005f8b 	.word	0x08005f8b
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	08005f9f 	.word	0x08005f9f
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005fb3 	.word	0x08005fb3
 8005f78:	08005fbd 	.word	0x08005fbd
 8005f7c:	08005fc7 	.word	0x08005fc7
			{
				case 0: byteIndex=0;	part=RIGHT_PART;break;
 8005f80:	2300      	movs	r3, #0
 8005f82:	71fb      	strb	r3, [r7, #7]
 8005f84:	2301      	movs	r3, #1
 8005f86:	71bb      	strb	r3, [r7, #6]
 8005f88:	e022      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 1: byteIndex=8; 	part=RIGHT_PART;break;
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	71fb      	strb	r3, [r7, #7]
 8005f8e:	2301      	movs	r3, #1
 8005f90:	71bb      	strb	r3, [r7, #6]
 8005f92:	e01d      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 2: byteIndex=16;	part=RIGHT_PART;break;
 8005f94:	2310      	movs	r3, #16
 8005f96:	71fb      	strb	r3, [r7, #7]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	71bb      	strb	r3, [r7, #6]
 8005f9c:	e018      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 3: byteIndex=24;	part=RIGHT_PART;break;
 8005f9e:	2318      	movs	r3, #24
 8005fa0:	71fb      	strb	r3, [r7, #7]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	71bb      	strb	r3, [r7, #6]
 8005fa6:	e013      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 4: byteIndex=0; 	part=LEFT_PART;break;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	71fb      	strb	r3, [r7, #7]
 8005fac:	2300      	movs	r3, #0
 8005fae:	71bb      	strb	r3, [r7, #6]
 8005fb0:	e00e      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 5: byteIndex=8; 	part=LEFT_PART;break;
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	71fb      	strb	r3, [r7, #7]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	71bb      	strb	r3, [r7, #6]
 8005fba:	e009      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 6: byteIndex=16; 	part=LEFT_PART;break;
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	71fb      	strb	r3, [r7, #7]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	71bb      	strb	r3, [r7, #6]
 8005fc4:	e004      	b.n	8005fd0 <UpdateMax7219+0x9c>
				case 7: byteIndex=24; 	part=LEFT_PART;break;
 8005fc6:	2318      	movs	r3, #24
 8005fc8:	71fb      	strb	r3, [r7, #7]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	71bb      	strb	r3, [r7, #6]
 8005fce:	bf00      	nop
			}
			if(part==LEFT_PART)
 8005fd0:	79bb      	ldrb	r3, [r7, #6]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <UpdateMax7219+0xa8>
				shift=8;
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	713b      	strb	r3, [r7, #4]
 8005fda:	e001      	b.n	8005fe0 <UpdateMax7219+0xac>
			else
				shift=0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	713b      	strb	r3, [r7, #4]

			data=0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	717b      	strb	r3, [r7, #5]
			for(uint8_t k=0;k<8;k++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	707b      	strb	r3, [r7, #1]
 8005fe8:	e01e      	b.n	8006028 <UpdateMax7219+0xf4>
			{
				if(Matrix.data[byteIndex+k]&(1<<(i+shift)))
 8005fea:	79fa      	ldrb	r2, [r7, #7]
 8005fec:	787b      	ldrb	r3, [r7, #1]
 8005fee:	4413      	add	r3, r2
 8005ff0:	4a28      	ldr	r2, [pc, #160]	@ (8006094 <UpdateMax7219+0x160>)
 8005ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	793b      	ldrb	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	fa41 f303 	asr.w	r3, r1, r3
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <UpdateMax7219+0xee>
				{
					data=data|(1<<(7-k));
 800600a:	787b      	ldrb	r3, [r7, #1]
 800600c:	f1c3 0307 	rsb	r3, r3, #7
 8006010:	2201      	movs	r2, #1
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	b25a      	sxtb	r2, r3
 8006018:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800601c:	4313      	orrs	r3, r2
 800601e:	b25b      	sxtb	r3, r3
 8006020:	717b      	strb	r3, [r7, #5]
			for(uint8_t k=0;k<8;k++)
 8006022:	787b      	ldrb	r3, [r7, #1]
 8006024:	3301      	adds	r3, #1
 8006026:	707b      	strb	r3, [r7, #1]
 8006028:	787b      	ldrb	r3, [r7, #1]
 800602a:	2b07      	cmp	r3, #7
 800602c:	d9dd      	bls.n	8005fea <UpdateMax7219+0xb6>
				}
			}

			SPI_2.transmitBuffer[j*2]=i+1;
 800602e:	78bb      	ldrb	r3, [r7, #2]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	3201      	adds	r2, #1
 8006036:	b2d1      	uxtb	r1, r2
 8006038:	4a15      	ldr	r2, [pc, #84]	@ (8006090 <UpdateMax7219+0x15c>)
 800603a:	4413      	add	r3, r2
 800603c:	460a      	mov	r2, r1
 800603e:	705a      	strb	r2, [r3, #1]
			SPI_2.transmitBuffer[j*2+1]=data;
 8006040:	78bb      	ldrb	r3, [r7, #2]
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	3301      	adds	r3, #1
 8006046:	4a12      	ldr	r2, [pc, #72]	@ (8006090 <UpdateMax7219+0x15c>)
 8006048:	4413      	add	r3, r2
 800604a:	797a      	ldrb	r2, [r7, #5]
 800604c:	705a      	strb	r2, [r3, #1]
		for(uint8_t j=0;j<8;j++)
 800604e:	78bb      	ldrb	r3, [r7, #2]
 8006050:	3301      	adds	r3, #1
 8006052:	70bb      	strb	r3, [r7, #2]
 8006054:	78bb      	ldrb	r3, [r7, #2]
 8006056:	2b07      	cmp	r3, #7
 8006058:	f67f af7c 	bls.w	8005f54 <UpdateMax7219+0x20>
		}
	  	SPI_2.count=16;
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <UpdateMax7219+0x15c>)
 800605e:	2210      	movs	r2, #16
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  	SPI_2_Transmit();
 8006064:	f006 fc70 	bl	800c948 <SPI_2_Transmit>

	  	while(SPI_2.status==SPI_BYSY)
 8006068:	e001      	b.n	800606e <UpdateMax7219+0x13a>
	  	{
	  		AppTask();
 800606a:	f7fa ffc5 	bl	8000ff8 <AppTask>
	  	while(SPI_2.status==SPI_BYSY)
 800606e:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <UpdateMax7219+0x15c>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d0f9      	beq.n	800606a <UpdateMax7219+0x136>
	for(uint8_t i=0;i<8;i++)
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	3301      	adds	r3, #1
 800607a:	70fb      	strb	r3, [r7, #3]
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b07      	cmp	r3, #7
 8006080:	f67f af65 	bls.w	8005f4e <UpdateMax7219+0x1a>
 8006084:	e000      	b.n	8006088 <UpdateMax7219+0x154>
		return;
 8006086:	bf00      	nop
	  	}

	}
}
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200003f8 	.word	0x200003f8
 8006094:	2000027c 	.word	0x2000027c

08006098 <DrowDigit>:

void DrowDigit(uint8_t x,uint8_t y,uint8_t digit,t_font_style stile,t_font_size Size, t_rotation rotation)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	71fb      	strb	r3, [r7, #7]
 80060aa:	4603      	mov	r3, r0
 80060ac:	71bb      	strb	r3, [r7, #6]
 80060ae:	460b      	mov	r3, r1
 80060b0:	717b      	strb	r3, [r7, #5]
 80060b2:	4613      	mov	r3, r2
 80060b4:	713b      	strb	r3, [r7, #4]
uint8_t  fontIndex,matrixX,matrixY,fontHeight,fontWidth,data,startPos;

	if(stile==CLASSIC)
 80060b6:	793b      	ldrb	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <DrowDigit+0x2a>
	{
	  fontIndex=0;
 80060bc:	2300      	movs	r3, #0
 80060be:	75fb      	strb	r3, [r7, #23]
 80060c0:	e001      	b.n	80060c6 <DrowDigit+0x2e>
	}
	else
	{
	  fontIndex=10;
 80060c2:	230a      	movs	r3, #10
 80060c4:	75fb      	strb	r3, [r7, #23]
	}

	switch(Size)
 80060c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d016      	beq.n	80060fc <DrowDigit+0x64>
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	dc1d      	bgt.n	800610e <DrowDigit+0x76>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <DrowDigit+0x44>
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d007      	beq.n	80060ea <DrowDigit+0x52>
 80060da:	e018      	b.n	800610e <DrowDigit+0x76>
	{
		case SMALL:
			fontHeight=FONT_4X7_HEIGHT;
 80060dc:	2307      	movs	r3, #7
 80060de:	753b      	strb	r3, [r7, #20]
			fontWidth=FONT_4X7_WIDTH;
 80060e0:	2304      	movs	r3, #4
 80060e2:	74fb      	strb	r3, [r7, #19]
			startPos=4;
 80060e4:	2304      	movs	r3, #4
 80060e6:	747b      	strb	r3, [r7, #17]
		break;
 80060e8:	e011      	b.n	800610e <DrowDigit+0x76>

		case BIG:
			fontHeight=FONT_6X12_HEIGHT;
 80060ea:	230c      	movs	r3, #12
 80060ec:	753b      	strb	r3, [r7, #20]
			fontWidth=FONT_6X12_WIDTH;
 80060ee:	2306      	movs	r3, #6
 80060f0:	74fb      	strb	r3, [r7, #19]
			fontIndex=0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]
			startPos=2;
 80060f6:	2302      	movs	r3, #2
 80060f8:	747b      	strb	r3, [r7, #17]
		break;
 80060fa:	e008      	b.n	800610e <DrowDigit+0x76>

		case LETTER:
			fontHeight=FONT_5X7_HEIGHT;
 80060fc:	2307      	movs	r3, #7
 80060fe:	753b      	strb	r3, [r7, #20]
			fontWidth=FONT_5X7_WIDTH;
 8006100:	2305      	movs	r3, #5
 8006102:	74fb      	strb	r3, [r7, #19]
			fontIndex=0;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
			startPos=3;
 8006108:	2303      	movs	r3, #3
 800610a:	747b      	strb	r3, [r7, #17]
		break;
 800610c:	bf00      	nop
	}

	matrixX=x;
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	75bb      	strb	r3, [r7, #22]
	matrixY=y;
 8006112:	79bb      	ldrb	r3, [r7, #6]
 8006114:	757b      	strb	r3, [r7, #21]

	for(uint8_t i=0;i<fontHeight;i++)
 8006116:	2300      	movs	r3, #0
 8006118:	743b      	strb	r3, [r7, #16]
 800611a:	e09c      	b.n	8006256 <DrowDigit+0x1be>
	{
		switch(Size)
 800611c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006120:	2b02      	cmp	r3, #2
 8006122:	d021      	beq.n	8006168 <DrowDigit+0xd0>
 8006124:	2b02      	cmp	r3, #2
 8006126:	dc2c      	bgt.n	8006182 <DrowDigit+0xea>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <DrowDigit+0x9a>
 800612c:	2b01      	cmp	r3, #1
 800612e:	d00d      	beq.n	800614c <DrowDigit+0xb4>
 8006130:	e027      	b.n	8006182 <DrowDigit+0xea>
		{
			case SMALL:
				data=FontTable4x7[digit+fontIndex][i];
 8006132:	797a      	ldrb	r2, [r7, #5]
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	441a      	add	r2, r3
 8006138:	7c39      	ldrb	r1, [r7, #16]
 800613a:	484c      	ldr	r0, [pc, #304]	@ (800626c <DrowDigit+0x1d4>)
 800613c:	4613      	mov	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	4403      	add	r3, r0
 8006144:	440b      	add	r3, r1
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	74bb      	strb	r3, [r7, #18]
			break;
 800614a:	e01a      	b.n	8006182 <DrowDigit+0xea>

			case BIG:
				data=FontTable6x12[digit+fontIndex][i];
 800614c:	797a      	ldrb	r2, [r7, #5]
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	441a      	add	r2, r3
 8006152:	7c39      	ldrb	r1, [r7, #16]
 8006154:	4846      	ldr	r0, [pc, #280]	@ (8006270 <DrowDigit+0x1d8>)
 8006156:	4613      	mov	r3, r2
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4403      	add	r3, r0
 8006160:	440b      	add	r3, r1
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	74bb      	strb	r3, [r7, #18]
			break;
 8006166:	e00c      	b.n	8006182 <DrowDigit+0xea>

			case LETTER:
				data=FontTable5x7[digit+fontIndex][i];
 8006168:	797a      	ldrb	r2, [r7, #5]
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	441a      	add	r2, r3
 800616e:	7c39      	ldrb	r1, [r7, #16]
 8006170:	4840      	ldr	r0, [pc, #256]	@ (8006274 <DrowDigit+0x1dc>)
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	4403      	add	r3, r0
 800617a:	440b      	add	r3, r1
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	74bb      	strb	r3, [r7, #18]
			break;
 8006180:	bf00      	nop
		}

		for(uint8_t j=0;j<fontWidth;j++)
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e038      	b.n	80061fa <DrowDigit+0x162>
		{
			if(data&(1<<(startPos+j)))
 8006188:	7cba      	ldrb	r2, [r7, #18]
 800618a:	7c79      	ldrb	r1, [r7, #17]
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	440b      	add	r3, r1
 8006190:	fa42 f303 	asr.w	r3, r2, r3
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <DrowDigit+0x112>
			{
				SetPixel(matrixX,matrixY,true);
 800619c:	7d79      	ldrb	r1, [r7, #21]
 800619e:	7dbb      	ldrb	r3, [r7, #22]
 80061a0:	2201      	movs	r2, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fe5e 	bl	8005e64 <SetPixel>
 80061a8:	e005      	b.n	80061b6 <DrowDigit+0x11e>
			}
			else
			{
				SetPixel(matrixX,matrixY,false);
 80061aa:	7d79      	ldrb	r1, [r7, #21]
 80061ac:	7dbb      	ldrb	r3, [r7, #22]
 80061ae:	2200      	movs	r2, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fe57 	bl	8005e64 <SetPixel>
			}

		    switch (rotation)
 80061b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d81a      	bhi.n	80061f4 <DrowDigit+0x15c>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <DrowDigit+0x12c>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061dd 	.word	0x080061dd
 80061cc:	080061e5 	.word	0x080061e5
 80061d0:	080061ed 	.word	0x080061ed
		    {
		      case ROTATION_0_DEGREES:
		         matrixY++;
 80061d4:	7d7b      	ldrb	r3, [r7, #21]
 80061d6:	3301      	adds	r3, #1
 80061d8:	757b      	strb	r3, [r7, #21]
		      break;
 80061da:	e00b      	b.n	80061f4 <DrowDigit+0x15c>

		      case ROTATION_90_DEGREES:
		        matrixX--;
 80061dc:	7dbb      	ldrb	r3, [r7, #22]
 80061de:	3b01      	subs	r3, #1
 80061e0:	75bb      	strb	r3, [r7, #22]
		      break;
 80061e2:	e007      	b.n	80061f4 <DrowDigit+0x15c>

		      case ROTATION_180_DEGREES:
		        matrixY--;
 80061e4:	7d7b      	ldrb	r3, [r7, #21]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	757b      	strb	r3, [r7, #21]
		      break;
 80061ea:	e003      	b.n	80061f4 <DrowDigit+0x15c>

		      case ROTATION_270_DEGREES:
		        matrixX++;
 80061ec:	7dbb      	ldrb	r3, [r7, #22]
 80061ee:	3301      	adds	r3, #1
 80061f0:	75bb      	strb	r3, [r7, #22]
		      break;
 80061f2:	bf00      	nop
		for(uint8_t j=0;j<fontWidth;j++)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	3301      	adds	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3c2      	bcc.n	8006188 <DrowDigit+0xf0>
		     }
		}

	    switch (rotation)
 8006202:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006206:	2b03      	cmp	r3, #3
 8006208:	d822      	bhi.n	8006250 <DrowDigit+0x1b8>
 800620a:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <DrowDigit+0x178>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006221 	.word	0x08006221
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006239 	.word	0x08006239
 800621c:	08006245 	.word	0x08006245
	    {
	      case ROTATION_0_DEGREES:
	        matrixX++;
 8006220:	7dbb      	ldrb	r3, [r7, #22]
 8006222:	3301      	adds	r3, #1
 8006224:	75bb      	strb	r3, [r7, #22]
	        matrixY=y;
 8006226:	79bb      	ldrb	r3, [r7, #6]
 8006228:	757b      	strb	r3, [r7, #21]
	      break;
 800622a:	e011      	b.n	8006250 <DrowDigit+0x1b8>

	       case ROTATION_90_DEGREES:
	          matrixY++;
 800622c:	7d7b      	ldrb	r3, [r7, #21]
 800622e:	3301      	adds	r3, #1
 8006230:	757b      	strb	r3, [r7, #21]
	          matrixX=x;
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	75bb      	strb	r3, [r7, #22]
	       break;
 8006236:	e00b      	b.n	8006250 <DrowDigit+0x1b8>

	      case ROTATION_180_DEGREES:
	        matrixX--;
 8006238:	7dbb      	ldrb	r3, [r7, #22]
 800623a:	3b01      	subs	r3, #1
 800623c:	75bb      	strb	r3, [r7, #22]
	        matrixY=y;
 800623e:	79bb      	ldrb	r3, [r7, #6]
 8006240:	757b      	strb	r3, [r7, #21]
	      break;
 8006242:	e005      	b.n	8006250 <DrowDigit+0x1b8>

	      case ROTATION_270_DEGREES:
	        matrixY--;
 8006244:	7d7b      	ldrb	r3, [r7, #21]
 8006246:	3b01      	subs	r3, #1
 8006248:	757b      	strb	r3, [r7, #21]
	        matrixX=x;
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	75bb      	strb	r3, [r7, #22]
	      break;
 800624e:	bf00      	nop
	for(uint8_t i=0;i<fontHeight;i++)
 8006250:	7c3b      	ldrb	r3, [r7, #16]
 8006252:	3301      	adds	r3, #1
 8006254:	743b      	strb	r3, [r7, #16]
 8006256:	7c3a      	ldrb	r2, [r7, #16]
 8006258:	7d3b      	ldrb	r3, [r7, #20]
 800625a:	429a      	cmp	r2, r3
 800625c:	f4ff af5e 	bcc.w	800611c <DrowDigit+0x84>
	    }
	}
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd90      	pop	{r4, r7, pc}
 800626a:	bf00      	nop
 800626c:	0800e188 	.word	0x0800e188
 8006270:	0800e24c 	.word	0x0800e24c
 8006274:	0800e214 	.word	0x0800e214

08006278 <SetIntensivity>:

void SetIntensivity(uint8_t intensivity)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
	if((intensivity>=0)&&(intensivity<=15))
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	2b0f      	cmp	r3, #15
 8006286:	d823      	bhi.n	80062d0 <SetIntensivity+0x58>
	{
		while(SPI_2.status!= SPI_IDLE){};
 8006288:	bf00      	nop
 800628a:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <SetIntensivity+0x60>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1fb      	bne.n	800628a <SetIntensivity+0x12>
		for(uint8_t i=0;i<8;i++)
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]
 8006296:	e00f      	b.n	80062b8 <SetIntensivity+0x40>
		{
			SPI_2.transmitBuffer[i*2]=OP_INTENSITY;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	4a0e      	ldr	r2, [pc, #56]	@ (80062d8 <SetIntensivity+0x60>)
 800629e:	4413      	add	r3, r2
 80062a0:	220a      	movs	r2, #10
 80062a2:	705a      	strb	r2, [r3, #1]
			SPI_2.transmitBuffer[i*2+1]=intensivity;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	3301      	adds	r3, #1
 80062aa:	4a0b      	ldr	r2, [pc, #44]	@ (80062d8 <SetIntensivity+0x60>)
 80062ac:	4413      	add	r3, r2
 80062ae:	79fa      	ldrb	r2, [r7, #7]
 80062b0:	705a      	strb	r2, [r3, #1]
		for(uint8_t i=0;i<8;i++)
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	3301      	adds	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b07      	cmp	r3, #7
 80062bc:	d9ec      	bls.n	8006298 <SetIntensivity+0x20>
		}
		SPI_2.count=16;
 80062be:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <SetIntensivity+0x60>)
 80062c0:	2210      	movs	r2, #16
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		SPI_2_Transmit();
 80062c6:	f006 fb3f 	bl	800c948 <SPI_2_Transmit>
		HAL_Delay(1);
 80062ca:	2001      	movs	r0, #1
 80062cc:	f002 f8d0 	bl	8008470 <HAL_Delay>
	}
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200003f8 	.word	0x200003f8

080062dc <CalcCrc>:
 */

#include "MP3_Player.h"

uint16_t CalcCrc(uint8_t buf[],uint8_t count)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
uint16_t	result=0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	81fb      	strh	r3, [r7, #14]
uint8_t		i=0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	737b      	strb	r3, [r7, #13]
	for(i=0;i<count;i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	737b      	strb	r3, [r7, #13]
 80062f4:	e00b      	b.n	800630e <CalcCrc+0x32>
	{
		result=result-buf[i+1];
 80062f6:	7b7b      	ldrb	r3, [r7, #13]
 80062f8:	3301      	adds	r3, #1
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	89fb      	ldrh	r3, [r7, #14]
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	81fb      	strh	r3, [r7, #14]
	for(i=0;i<count;i++)
 8006308:	7b7b      	ldrb	r3, [r7, #13]
 800630a:	3301      	adds	r3, #1
 800630c:	737b      	strb	r3, [r7, #13]
 800630e:	7b7a      	ldrb	r2, [r7, #13]
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	429a      	cmp	r2, r3
 8006314:	d3ef      	bcc.n	80062f6 <CalcCrc+0x1a>
	}

	return result;
 8006316:	89fb      	ldrh	r3, [r7, #14]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
	...

08006324 <SayTime>:


void SayTime(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
	MP3_Player.function=SAY_TIME;
 8006328:	4b04      	ldr	r3, [pc, #16]	@ (800633c <SayTime+0x18>)
 800632a:	2201      	movs	r2, #1
 800632c:	705a      	strb	r2, [r3, #1]
	MP3_Player.delay=1;
 800632e:	4b03      	ldr	r3, [pc, #12]	@ (800633c <SayTime+0x18>)
 8006330:	2201      	movs	r2, #1
 8006332:	719a      	strb	r2, [r3, #6]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	20000210 	.word	0x20000210

08006340 <MP3_Task>:

void MP3_Task(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
static bool done=false;
static uint16_t trackNumber=0;

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1)
 8006344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006348:	488d      	ldr	r0, [pc, #564]	@ (8006580 <MP3_Task+0x240>)
 800634a:	f003 f801 	bl	8009350 <HAL_GPIO_ReadPin>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d111      	bne.n	8006378 <MP3_Task+0x38>
	{
		MP3_Player.state=MP3_IDLE;
 8006354:	4b8b      	ldr	r3, [pc, #556]	@ (8006584 <MP3_Task+0x244>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
		if(Application.rouserDefinition.isSignalEnabled==true)
 800635a:	4b8b      	ldr	r3, [pc, #556]	@ (8006588 <MP3_Task+0x248>)
 800635c:	7f5b      	ldrb	r3, [r3, #29]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <MP3_Task+0x28>
		{
			MP3_PlayTrack(ROUSER_SIGNAL);
 8006362:	20a7      	movs	r0, #167	@ 0xa7
 8006364:	f000 fa6c 	bl	8006840 <MP3_PlayTrack>
		}

		if(Application.timerDefinition.isSignalEnabled==true)
 8006368:	4b87      	ldr	r3, [pc, #540]	@ (8006588 <MP3_Task+0x248>)
 800636a:	7c1b      	ldrb	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <MP3_Task+0x4c>
		{
			MP3_PlayTrack(TIMER_SIGNAL);
 8006370:	20ad      	movs	r0, #173	@ 0xad
 8006372:	f000 fa65 	bl	8006840 <MP3_PlayTrack>
 8006376:	e009      	b.n	800638c <MP3_Task+0x4c>
		}

	}
	else
	{
		MP3_Player.state=MP3_BYSY;
 8006378:	4b82      	ldr	r3, [pc, #520]	@ (8006584 <MP3_Task+0x244>)
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
		if(MP3_Player.isPaused==true)
 800637e:	4b81      	ldr	r3, [pc, #516]	@ (8006584 <MP3_Task+0x244>)
 8006380:	79db      	ldrb	r3, [r3, #7]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <MP3_Task+0x4c>
		{
			MP3_Player.isPaused=false;
 8006386:	4b7f      	ldr	r3, [pc, #508]	@ (8006584 <MP3_Task+0x244>)
 8006388:	2200      	movs	r2, #0
 800638a:	71da      	strb	r2, [r3, #7]
		}
	}

	if((MP3_Player.function==SAY_TIME)||(MP3_Player.function==SAY_DATE))
 800638c:	4b7d      	ldr	r3, [pc, #500]	@ (8006584 <MP3_Task+0x244>)
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d003      	beq.n	800639c <MP3_Task+0x5c>
 8006394:	4b7b      	ldr	r3, [pc, #492]	@ (8006584 <MP3_Task+0x244>)
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d117      	bne.n	80063cc <MP3_Task+0x8c>
	{
		if(MP3_Player.delay!=0)
 800639c:	4b79      	ldr	r3, [pc, #484]	@ (8006584 <MP3_Task+0x244>)
 800639e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <MP3_Task+0x7a>
		{
			MP3_Player.delay--;
 80063a6:	4b77      	ldr	r3, [pc, #476]	@ (8006584 <MP3_Task+0x244>)
 80063a8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	4b73      	ldr	r3, [pc, #460]	@ (8006584 <MP3_Task+0x244>)
 80063b6:	719a      	strb	r2, [r3, #6]
 80063b8:	e008      	b.n	80063cc <MP3_Task+0x8c>
		}
		else
		{
			MP3_Player.phase++;
 80063ba:	4b72      	ldr	r3, [pc, #456]	@ (8006584 <MP3_Task+0x244>)
 80063bc:	795b      	ldrb	r3, [r3, #5]
 80063be:	3301      	adds	r3, #1
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	4b70      	ldr	r3, [pc, #448]	@ (8006584 <MP3_Task+0x244>)
 80063c4:	715a      	strb	r2, [r3, #5]
			done=false;
 80063c6:	4b71      	ldr	r3, [pc, #452]	@ (800658c <MP3_Task+0x24c>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (MP3_Player.function==SAY_DATE)
 80063cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006584 <MP3_Task+0x244>)
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d16f      	bne.n	80064b4 <MP3_Task+0x174>
	{
		if(done==false)
 80063d4:	4b6d      	ldr	r3, [pc, #436]	@ (800658c <MP3_Task+0x24c>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f083 0301 	eor.w	r3, r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d068      	beq.n	80064b4 <MP3_Task+0x174>
		{
			switch(MP3_Player.phase)
 80063e2:	4b68      	ldr	r3, [pc, #416]	@ (8006584 <MP3_Task+0x244>)
 80063e4:	795b      	ldrb	r3, [r3, #5]
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d864      	bhi.n	80064b4 <MP3_Task+0x174>
 80063ea:	a201      	add	r2, pc, #4	@ (adr r2, 80063f0 <MP3_Task+0xb0>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006409 	.word	0x08006409
 80063f4:	08006425 	.word	0x08006425
 80063f8:	08006441 	.word	0x08006441
 80063fc:	0800645d 	.word	0x0800645d
 8006400:	08006471 	.word	0x08006471
 8006404:	0800648f 	.word	0x0800648f
			{
				case 0:
					MP3_PlayTrack(RTC_data.DayOfWeek+DAY_OF_WEEK_OFFSET-1);
 8006408:	4b61      	ldr	r3, [pc, #388]	@ (8006590 <MP3_Task+0x250>)
 800640a:	7a1b      	ldrb	r3, [r3, #8]
 800640c:	3354      	adds	r3, #84	@ 0x54
 800640e:	b29b      	uxth	r3, r3
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fa15 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.delay=0;	//10*100 ms=1000 ms= 1s
 8006416:	4b5b      	ldr	r3, [pc, #364]	@ (8006584 <MP3_Task+0x244>)
 8006418:	2200      	movs	r2, #0
 800641a:	719a      	strb	r2, [r3, #6]
					done=true;
 800641c:	4b5b      	ldr	r3, [pc, #364]	@ (800658c <MP3_Task+0x24c>)
 800641e:	2201      	movs	r2, #1
 8006420:	701a      	strb	r2, [r3, #0]
				break;
 8006422:	e047      	b.n	80064b4 <MP3_Task+0x174>
				case 1:
					MP3_PlayTrack(RTC_data.Day+DAY_OFFSET-1);
 8006424:	4b5a      	ldr	r3, [pc, #360]	@ (8006590 <MP3_Task+0x250>)
 8006426:	78db      	ldrb	r3, [r3, #3]
 8006428:	335b      	adds	r3, #91	@ 0x5b
 800642a:	b29b      	uxth	r3, r3
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fa07 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.delay=0;	//10*100 ms=1000 ms= 1s
 8006432:	4b54      	ldr	r3, [pc, #336]	@ (8006584 <MP3_Task+0x244>)
 8006434:	2200      	movs	r2, #0
 8006436:	719a      	strb	r2, [r3, #6]
					done=true;
 8006438:	4b54      	ldr	r3, [pc, #336]	@ (800658c <MP3_Task+0x24c>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
				break;
 800643e:	e039      	b.n	80064b4 <MP3_Task+0x174>
				case 2:
					MP3_PlayTrack(RTC_data.Mounth+MOUNTH_OFFSET-1);
 8006440:	4b53      	ldr	r3, [pc, #332]	@ (8006590 <MP3_Task+0x250>)
 8006442:	791b      	ldrb	r3, [r3, #4]
 8006444:	337a      	adds	r3, #122	@ 0x7a
 8006446:	b29b      	uxth	r3, r3
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f9f9 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.delay=0;	//10*100 ms=1000 ms= 1s
 800644e:	4b4d      	ldr	r3, [pc, #308]	@ (8006584 <MP3_Task+0x244>)
 8006450:	2200      	movs	r2, #0
 8006452:	719a      	strb	r2, [r3, #6]
					done=true;
 8006454:	4b4d      	ldr	r3, [pc, #308]	@ (800658c <MP3_Task+0x24c>)
 8006456:	2201      	movs	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
				break;
 800645a:	e02b      	b.n	80064b4 <MP3_Task+0x174>
				case 3:
					MP3_PlayTrack(_2000_TRACK_NUMBER);
 800645c:	2087      	movs	r0, #135	@ 0x87
 800645e:	f000 f9ef 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.delay=0;	//10*100 ms=1000 ms= 1s
 8006462:	4b48      	ldr	r3, [pc, #288]	@ (8006584 <MP3_Task+0x244>)
 8006464:	2200      	movs	r2, #0
 8006466:	719a      	strb	r2, [r3, #6]
					done=true;
 8006468:	4b48      	ldr	r3, [pc, #288]	@ (800658c <MP3_Task+0x24c>)
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]
				break;
 800646e:	e021      	b.n	80064b4 <MP3_Task+0x174>
				case 4:
					MP3_PlayTrack(RTC_data.Year+YEAR_OFFSET-2025);
 8006470:	4b47      	ldr	r3, [pc, #284]	@ (8006590 <MP3_Task+0x250>)
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	f2a3 735f 	subw	r3, r3, #1887	@ 0x75f
 8006478:	b29b      	uxth	r3, r3
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f9e0 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.delay=0;	//10*100 ms=1000 ms= 1s
 8006480:	4b40      	ldr	r3, [pc, #256]	@ (8006584 <MP3_Task+0x244>)
 8006482:	2200      	movs	r2, #0
 8006484:	719a      	strb	r2, [r3, #6]
					done=true;
 8006486:	4b41      	ldr	r3, [pc, #260]	@ (800658c <MP3_Task+0x24c>)
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
				break;
 800648c:	e012      	b.n	80064b4 <MP3_Task+0x174>
				case 5:
					MP3_PlayTrack(_YEAR_TRACK_NUMBER);
 800648e:	2089      	movs	r0, #137	@ 0x89
 8006490:	f000 f9d6 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.phase=0;
 8006494:	4b3b      	ldr	r3, [pc, #236]	@ (8006584 <MP3_Task+0x244>)
 8006496:	2200      	movs	r2, #0
 8006498:	715a      	strb	r2, [r3, #5]
					MP3_Player.function=NO_SOUND;
 800649a:	4b3a      	ldr	r3, [pc, #232]	@ (8006584 <MP3_Task+0x244>)
 800649c:	2200      	movs	r2, #0
 800649e:	705a      	strb	r2, [r3, #1]
					Application.volume=Application.saved_volume;
 80064a0:	4b39      	ldr	r3, [pc, #228]	@ (8006588 <MP3_Task+0x248>)
 80064a2:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80064a6:	4b38      	ldr	r3, [pc, #224]	@ (8006588 <MP3_Task+0x248>)
 80064a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					done=false;
 80064ac:	4b37      	ldr	r3, [pc, #220]	@ (800658c <MP3_Task+0x24c>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
				break;
 80064b2:	bf00      	nop
			}
		}
	}

	if (MP3_Player.function==SAY_TIME)
 80064b4:	4b33      	ldr	r3, [pc, #204]	@ (8006584 <MP3_Task+0x244>)
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d12c      	bne.n	8006516 <MP3_Task+0x1d6>
	{
		if(done==false)
 80064bc:	4b33      	ldr	r3, [pc, #204]	@ (800658c <MP3_Task+0x24c>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f083 0301 	eor.w	r3, r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d025      	beq.n	8006516 <MP3_Task+0x1d6>
		{
			switch(MP3_Player.phase)
 80064ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006584 <MP3_Task+0x244>)
 80064cc:	795b      	ldrb	r3, [r3, #5]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <MP3_Task+0x198>
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d00e      	beq.n	80064f4 <MP3_Task+0x1b4>
 80064d6:	e01e      	b.n	8006516 <MP3_Task+0x1d6>
			{
				case 0:
					MP3_PlayTrack(RTC_data.Hours+HOURS_OFFSET);
 80064d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006590 <MP3_Task+0x250>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	3301      	adds	r3, #1
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f9ad 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.delay=1;	//10*100 ms=1000 ms= 1s
 80064e6:	4b27      	ldr	r3, [pc, #156]	@ (8006584 <MP3_Task+0x244>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	719a      	strb	r2, [r3, #6]
					done=true;
 80064ec:	4b27      	ldr	r3, [pc, #156]	@ (800658c <MP3_Task+0x24c>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
				break;
 80064f2:	e010      	b.n	8006516 <MP3_Task+0x1d6>
				case 1:
					MP3_PlayTrack(RTC_data.Minutes+MINUTES_OFFSET);
 80064f4:	4b26      	ldr	r3, [pc, #152]	@ (8006590 <MP3_Task+0x250>)
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	3319      	adds	r3, #25
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f99f 	bl	8006840 <MP3_PlayTrack>
					MP3_Player.phase=0;
 8006502:	4b20      	ldr	r3, [pc, #128]	@ (8006584 <MP3_Task+0x244>)
 8006504:	2200      	movs	r2, #0
 8006506:	715a      	strb	r2, [r3, #5]
					MP3_Player.function=NO_SOUND;
 8006508:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <MP3_Task+0x244>)
 800650a:	2200      	movs	r2, #0
 800650c:	705a      	strb	r2, [r3, #1]
					done=false;
 800650e:	4b1f      	ldr	r3, [pc, #124]	@ (800658c <MP3_Task+0x24c>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
				break;
 8006514:	bf00      	nop
			}
		}
	}

	if(Application.mode==MP3_PLAYER)
 8006516:	4b1c      	ldr	r3, [pc, #112]	@ (8006588 <MP3_Task+0x248>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d119      	bne.n	8006552 <MP3_Task+0x212>
	{
		if(MP3_Player.state==MP3_IDLE)
 800651e:	4b19      	ldr	r3, [pc, #100]	@ (8006584 <MP3_Task+0x244>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d115      	bne.n	8006552 <MP3_Task+0x212>
		{
			if(MP3_Player.isPaused==false)
 8006526:	4b17      	ldr	r3, [pc, #92]	@ (8006584 <MP3_Task+0x244>)
 8006528:	79db      	ldrb	r3, [r3, #7]
 800652a:	f083 0301 	eor.w	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <MP3_Task+0x212>
			{
				Application.mp3_PlayerDefinition.prevTrack=MP3_Player.trackNumber;
 8006534:	4b13      	ldr	r3, [pc, #76]	@ (8006584 <MP3_Task+0x244>)
 8006536:	885a      	ldrh	r2, [r3, #2]
 8006538:	4b13      	ldr	r3, [pc, #76]	@ (8006588 <MP3_Task+0x248>)
 800653a:	859a      	strh	r2, [r3, #44]	@ 0x2c
				trackNumber=GenarateTrack();
 800653c:	f000 f82c 	bl	8006598 <GenarateTrack>
 8006540:	4603      	mov	r3, r0
 8006542:	461a      	mov	r2, r3
 8006544:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <MP3_Task+0x254>)
 8006546:	801a      	strh	r2, [r3, #0]
				MP3_PlayTrack(trackNumber);
 8006548:	4b12      	ldr	r3, [pc, #72]	@ (8006594 <MP3_Task+0x254>)
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f977 	bl	8006840 <MP3_PlayTrack>

		}
	}


	if(Application.mode==TETRIS)
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <MP3_Task+0x248>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b05      	cmp	r3, #5
 8006558:	d110      	bne.n	800657c <MP3_Task+0x23c>
	{
		if(MP3_Player.state==MP3_IDLE)
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <MP3_Task+0x244>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <MP3_Task+0x23c>
		{
			if(Application.tetrisDefinition.isSoundEnabled==true)
 8006562:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <MP3_Task+0x248>)
 8006564:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <MP3_Task+0x23c>
			{
				MP3_PlayTrack(TETRIS_OFFSET+Application.tetrisDefinition.Melody);
 800656c:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <MP3_Task+0x248>)
 800656e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006572:	33b3      	adds	r3, #179	@ 0xb3
 8006574:	b29b      	uxth	r3, r3
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f962 	bl	8006840 <MP3_PlayTrack>
			}

		}
	}
}
 800657c:	bf00      	nop
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40010c00 	.word	0x40010c00
 8006584:	20000210 	.word	0x20000210
 8006588:	20000138 	.word	0x20000138
 800658c:	200002bc 	.word	0x200002bc
 8006590:	200001a0 	.word	0x200001a0
 8006594:	200002be 	.word	0x200002be

08006598 <GenarateTrack>:

uint16_t GenarateTrack(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
	uint16_t result;

	result=Random(MUSIC_START, MUSIC_END);
 800659e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80065a2:	20bd      	movs	r0, #189	@ 0xbd
 80065a4:	f7fb fec2 	bl	800232c <Random>
 80065a8:	4603      	mov	r3, r0
 80065aa:	80fb      	strh	r3, [r7, #6]

	return result;
 80065ac:	88fb      	ldrh	r3, [r7, #6]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <MP3_SetVolume>:

void MP3_SetVolume(uint8_t volume)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
uint16_t	crc;

	while(UART_1.status!=UART_IDLE){};
 80065c2:	bf00      	nop
 80065c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006630 <MP3_SetVolume+0x78>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1fb      	bne.n	80065c4 <MP3_SetVolume+0xc>

	UART_1.transmitBuffer[0]=0x7E;
 80065cc:	4b18      	ldr	r3, [pc, #96]	@ (8006630 <MP3_SetVolume+0x78>)
 80065ce:	227e      	movs	r2, #126	@ 0x7e
 80065d0:	705a      	strb	r2, [r3, #1]
	UART_1.transmitBuffer[1]=0xFF;
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <MP3_SetVolume+0x78>)
 80065d4:	22ff      	movs	r2, #255	@ 0xff
 80065d6:	709a      	strb	r2, [r3, #2]
	UART_1.transmitBuffer[2]=0x06;
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <MP3_SetVolume+0x78>)
 80065da:	2206      	movs	r2, #6
 80065dc:	70da      	strb	r2, [r3, #3]
	UART_1.transmitBuffer[3]=0x06;
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <MP3_SetVolume+0x78>)
 80065e0:	2206      	movs	r2, #6
 80065e2:	711a      	strb	r2, [r3, #4]
	UART_1.transmitBuffer[4]=0x00;
 80065e4:	4b12      	ldr	r3, [pc, #72]	@ (8006630 <MP3_SetVolume+0x78>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	715a      	strb	r2, [r3, #5]
	UART_1.transmitBuffer[5]=0x00;
 80065ea:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <MP3_SetVolume+0x78>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	719a      	strb	r2, [r3, #6]
	UART_1.transmitBuffer[6]=volume;
 80065f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006630 <MP3_SetVolume+0x78>)
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	71d3      	strb	r3, [r2, #7]
	crc=CalcCrc(UART_1.transmitBuffer,6);
 80065f6:	2106      	movs	r1, #6
 80065f8:	480e      	ldr	r0, [pc, #56]	@ (8006634 <MP3_SetVolume+0x7c>)
 80065fa:	f7ff fe6f 	bl	80062dc <CalcCrc>
 80065fe:	4603      	mov	r3, r0
 8006600:	81fb      	strh	r3, [r7, #14]
	UART_1.transmitBuffer[7]=(crc&HIGHT_BYTE_MASK)>>8;;
 8006602:	89fb      	ldrh	r3, [r7, #14]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	b29b      	uxth	r3, r3
 8006608:	b2da      	uxtb	r2, r3
 800660a:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <MP3_SetVolume+0x78>)
 800660c:	721a      	strb	r2, [r3, #8]
	UART_1.transmitBuffer[8]=(uint8_t)(crc&LOW_BYTE_MASK);
 800660e:	89fb      	ldrh	r3, [r7, #14]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <MP3_SetVolume+0x78>)
 8006614:	725a      	strb	r2, [r3, #9]
	UART_1.transmitBuffer[9]=0xEF;
 8006616:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <MP3_SetVolume+0x78>)
 8006618:	22ef      	movs	r2, #239	@ 0xef
 800661a:	729a      	strb	r2, [r3, #10]
	UART_1.count=10;
 800661c:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <MP3_SetVolume+0x78>)
 800661e:	220a      	movs	r2, #10
 8006620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	UART_1_Transmit();
 8006624:	f006 f9f4 	bl	800ca10 <UART_1_Transmit>
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	2000043c 	.word	0x2000043c
 8006634:	2000043d 	.word	0x2000043d

08006638 <MP3_Pause>:

void MP3_Pause(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
uint16_t	crc;

	while(UART_1.status!=UART_IDLE){};
 800663e:	bf00      	nop
 8006640:	4b1c      	ldr	r3, [pc, #112]	@ (80066b4 <MP3_Pause+0x7c>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1fb      	bne.n	8006640 <MP3_Pause+0x8>

	MP3_Player.isPaused=true;
 8006648:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <MP3_Pause+0x80>)
 800664a:	2201      	movs	r2, #1
 800664c:	71da      	strb	r2, [r3, #7]
	UART_1.transmitBuffer[0]=0x7E;
 800664e:	4b19      	ldr	r3, [pc, #100]	@ (80066b4 <MP3_Pause+0x7c>)
 8006650:	227e      	movs	r2, #126	@ 0x7e
 8006652:	705a      	strb	r2, [r3, #1]
	UART_1.transmitBuffer[1]=0xFF;
 8006654:	4b17      	ldr	r3, [pc, #92]	@ (80066b4 <MP3_Pause+0x7c>)
 8006656:	22ff      	movs	r2, #255	@ 0xff
 8006658:	709a      	strb	r2, [r3, #2]
	UART_1.transmitBuffer[2]=0x06;
 800665a:	4b16      	ldr	r3, [pc, #88]	@ (80066b4 <MP3_Pause+0x7c>)
 800665c:	2206      	movs	r2, #6
 800665e:	70da      	strb	r2, [r3, #3]
	UART_1.transmitBuffer[3]=0x0E;
 8006660:	4b14      	ldr	r3, [pc, #80]	@ (80066b4 <MP3_Pause+0x7c>)
 8006662:	220e      	movs	r2, #14
 8006664:	711a      	strb	r2, [r3, #4]
	UART_1.transmitBuffer[4]=0x00;
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <MP3_Pause+0x7c>)
 8006668:	2200      	movs	r2, #0
 800666a:	715a      	strb	r2, [r3, #5]
	UART_1.transmitBuffer[5]=0x00;
 800666c:	4b11      	ldr	r3, [pc, #68]	@ (80066b4 <MP3_Pause+0x7c>)
 800666e:	2200      	movs	r2, #0
 8006670:	719a      	strb	r2, [r3, #6]
	UART_1.transmitBuffer[6]=0x00;
 8006672:	4b10      	ldr	r3, [pc, #64]	@ (80066b4 <MP3_Pause+0x7c>)
 8006674:	2200      	movs	r2, #0
 8006676:	71da      	strb	r2, [r3, #7]
	crc=CalcCrc(UART_1.transmitBuffer,6);
 8006678:	2106      	movs	r1, #6
 800667a:	4810      	ldr	r0, [pc, #64]	@ (80066bc <MP3_Pause+0x84>)
 800667c:	f7ff fe2e 	bl	80062dc <CalcCrc>
 8006680:	4603      	mov	r3, r0
 8006682:	80fb      	strh	r3, [r7, #6]
	UART_1.transmitBuffer[7]=(crc&HIGHT_BYTE_MASK)>>8;
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	b29b      	uxth	r3, r3
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <MP3_Pause+0x7c>)
 800668e:	721a      	strb	r2, [r3, #8]
	UART_1.transmitBuffer[8]=(uint8_t)(crc&LOW_BYTE_MASK);
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <MP3_Pause+0x7c>)
 8006696:	725a      	strb	r2, [r3, #9]
	UART_1.transmitBuffer[9]=0xEF;
 8006698:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <MP3_Pause+0x7c>)
 800669a:	22ef      	movs	r2, #239	@ 0xef
 800669c:	729a      	strb	r2, [r3, #10]
	UART_1.count=10;
 800669e:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <MP3_Pause+0x7c>)
 80066a0:	220a      	movs	r2, #10
 80066a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	UART_1_Transmit();
 80066a6:	f006 f9b3 	bl	800ca10 <UART_1_Transmit>
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	2000043c 	.word	0x2000043c
 80066b8:	20000210 	.word	0x20000210
 80066bc:	2000043d 	.word	0x2000043d

080066c0 <MP3_Play>:

void MP3_Play(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
uint16_t	crc;

	while(UART_1.status!=UART_IDLE){};
 80066c6:	bf00      	nop
 80066c8:	4b1c      	ldr	r3, [pc, #112]	@ (800673c <MP3_Play+0x7c>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1fb      	bne.n	80066c8 <MP3_Play+0x8>
	MP3_Player.isPaused=false;
 80066d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <MP3_Play+0x80>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	71da      	strb	r2, [r3, #7]
	UART_1.transmitBuffer[0]=0x7E;
 80066d6:	4b19      	ldr	r3, [pc, #100]	@ (800673c <MP3_Play+0x7c>)
 80066d8:	227e      	movs	r2, #126	@ 0x7e
 80066da:	705a      	strb	r2, [r3, #1]
	UART_1.transmitBuffer[1]=0xFF;
 80066dc:	4b17      	ldr	r3, [pc, #92]	@ (800673c <MP3_Play+0x7c>)
 80066de:	22ff      	movs	r2, #255	@ 0xff
 80066e0:	709a      	strb	r2, [r3, #2]
	UART_1.transmitBuffer[2]=0x06;
 80066e2:	4b16      	ldr	r3, [pc, #88]	@ (800673c <MP3_Play+0x7c>)
 80066e4:	2206      	movs	r2, #6
 80066e6:	70da      	strb	r2, [r3, #3]
	UART_1.transmitBuffer[3]=0x0D;
 80066e8:	4b14      	ldr	r3, [pc, #80]	@ (800673c <MP3_Play+0x7c>)
 80066ea:	220d      	movs	r2, #13
 80066ec:	711a      	strb	r2, [r3, #4]
	UART_1.transmitBuffer[4]=0x00;
 80066ee:	4b13      	ldr	r3, [pc, #76]	@ (800673c <MP3_Play+0x7c>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	715a      	strb	r2, [r3, #5]
	UART_1.transmitBuffer[5]=0x00;
 80066f4:	4b11      	ldr	r3, [pc, #68]	@ (800673c <MP3_Play+0x7c>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	719a      	strb	r2, [r3, #6]
	UART_1.transmitBuffer[6]=0x00;
 80066fa:	4b10      	ldr	r3, [pc, #64]	@ (800673c <MP3_Play+0x7c>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	71da      	strb	r2, [r3, #7]
	crc=CalcCrc(UART_1.transmitBuffer,6);
 8006700:	2106      	movs	r1, #6
 8006702:	4810      	ldr	r0, [pc, #64]	@ (8006744 <MP3_Play+0x84>)
 8006704:	f7ff fdea 	bl	80062dc <CalcCrc>
 8006708:	4603      	mov	r3, r0
 800670a:	80fb      	strh	r3, [r7, #6]
	UART_1.transmitBuffer[7]=(crc&HIGHT_BYTE_MASK)>>8;;
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	b29b      	uxth	r3, r3
 8006712:	b2da      	uxtb	r2, r3
 8006714:	4b09      	ldr	r3, [pc, #36]	@ (800673c <MP3_Play+0x7c>)
 8006716:	721a      	strb	r2, [r3, #8]
	UART_1.transmitBuffer[8]=(uint8_t)(crc&LOW_BYTE_MASK);
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	b2da      	uxtb	r2, r3
 800671c:	4b07      	ldr	r3, [pc, #28]	@ (800673c <MP3_Play+0x7c>)
 800671e:	725a      	strb	r2, [r3, #9]
	UART_1.transmitBuffer[9]=0xEF;
 8006720:	4b06      	ldr	r3, [pc, #24]	@ (800673c <MP3_Play+0x7c>)
 8006722:	22ef      	movs	r2, #239	@ 0xef
 8006724:	729a      	strb	r2, [r3, #10]
	UART_1.count=10;
 8006726:	4b05      	ldr	r3, [pc, #20]	@ (800673c <MP3_Play+0x7c>)
 8006728:	220a      	movs	r2, #10
 800672a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	UART_1_Transmit();
 800672e:	f006 f96f 	bl	800ca10 <UART_1_Transmit>
}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000043c 	.word	0x2000043c
 8006740:	20000210 	.word	0x20000210
 8006744:	2000043d 	.word	0x2000043d

08006748 <MP3_Stop>:

void MP3_Stop(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
uint16_t	crc;

	while(UART_1.status!=UART_IDLE){};
 800674e:	bf00      	nop
 8006750:	4b1a      	ldr	r3, [pc, #104]	@ (80067bc <MP3_Stop+0x74>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1fb      	bne.n	8006750 <MP3_Stop+0x8>

	UART_1.transmitBuffer[0]=0x7E;
 8006758:	4b18      	ldr	r3, [pc, #96]	@ (80067bc <MP3_Stop+0x74>)
 800675a:	227e      	movs	r2, #126	@ 0x7e
 800675c:	705a      	strb	r2, [r3, #1]
	UART_1.transmitBuffer[1]=0xFF;
 800675e:	4b17      	ldr	r3, [pc, #92]	@ (80067bc <MP3_Stop+0x74>)
 8006760:	22ff      	movs	r2, #255	@ 0xff
 8006762:	709a      	strb	r2, [r3, #2]
	UART_1.transmitBuffer[2]=0x06;
 8006764:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <MP3_Stop+0x74>)
 8006766:	2206      	movs	r2, #6
 8006768:	70da      	strb	r2, [r3, #3]
	UART_1.transmitBuffer[3]=0x16;
 800676a:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <MP3_Stop+0x74>)
 800676c:	2216      	movs	r2, #22
 800676e:	711a      	strb	r2, [r3, #4]
	UART_1.transmitBuffer[4]=0x00;
 8006770:	4b12      	ldr	r3, [pc, #72]	@ (80067bc <MP3_Stop+0x74>)
 8006772:	2200      	movs	r2, #0
 8006774:	715a      	strb	r2, [r3, #5]
	UART_1.transmitBuffer[5]=0x00;
 8006776:	4b11      	ldr	r3, [pc, #68]	@ (80067bc <MP3_Stop+0x74>)
 8006778:	2200      	movs	r2, #0
 800677a:	719a      	strb	r2, [r3, #6]
	UART_1.transmitBuffer[6]=0x00;
 800677c:	4b0f      	ldr	r3, [pc, #60]	@ (80067bc <MP3_Stop+0x74>)
 800677e:	2200      	movs	r2, #0
 8006780:	71da      	strb	r2, [r3, #7]
	crc=CalcCrc(UART_1.transmitBuffer,6);
 8006782:	2106      	movs	r1, #6
 8006784:	480e      	ldr	r0, [pc, #56]	@ (80067c0 <MP3_Stop+0x78>)
 8006786:	f7ff fda9 	bl	80062dc <CalcCrc>
 800678a:	4603      	mov	r3, r0
 800678c:	80fb      	strh	r3, [r7, #6]
	UART_1.transmitBuffer[7]=(crc&HIGHT_BYTE_MASK)>>8;;
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	0a1b      	lsrs	r3, r3, #8
 8006792:	b29b      	uxth	r3, r3
 8006794:	b2da      	uxtb	r2, r3
 8006796:	4b09      	ldr	r3, [pc, #36]	@ (80067bc <MP3_Stop+0x74>)
 8006798:	721a      	strb	r2, [r3, #8]
	UART_1.transmitBuffer[8]=(uint8_t)(crc&LOW_BYTE_MASK);
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	4b07      	ldr	r3, [pc, #28]	@ (80067bc <MP3_Stop+0x74>)
 80067a0:	725a      	strb	r2, [r3, #9]
	UART_1.transmitBuffer[9]=0xEF;
 80067a2:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <MP3_Stop+0x74>)
 80067a4:	22ef      	movs	r2, #239	@ 0xef
 80067a6:	729a      	strb	r2, [r3, #10]
	UART_1.count=10;
 80067a8:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <MP3_Stop+0x74>)
 80067aa:	220a      	movs	r2, #10
 80067ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	UART_1_Transmit();
 80067b0:	f006 f92e 	bl	800ca10 <UART_1_Transmit>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	2000043c 	.word	0x2000043c
 80067c0:	2000043d 	.word	0x2000043d

080067c4 <MP3_Reset>:


void MP3_Reset(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
uint16_t	crc;

	while(UART_1.status!=UART_IDLE){};
 80067ca:	bf00      	nop
 80067cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006838 <MP3_Reset+0x74>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1fb      	bne.n	80067cc <MP3_Reset+0x8>

	UART_1.transmitBuffer[0]=0x7E;
 80067d4:	4b18      	ldr	r3, [pc, #96]	@ (8006838 <MP3_Reset+0x74>)
 80067d6:	227e      	movs	r2, #126	@ 0x7e
 80067d8:	705a      	strb	r2, [r3, #1]
	UART_1.transmitBuffer[1]=0xFF;
 80067da:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <MP3_Reset+0x74>)
 80067dc:	22ff      	movs	r2, #255	@ 0xff
 80067de:	709a      	strb	r2, [r3, #2]
	UART_1.transmitBuffer[2]=0x06;
 80067e0:	4b15      	ldr	r3, [pc, #84]	@ (8006838 <MP3_Reset+0x74>)
 80067e2:	2206      	movs	r2, #6
 80067e4:	70da      	strb	r2, [r3, #3]
	UART_1.transmitBuffer[3]=0x0C;
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <MP3_Reset+0x74>)
 80067e8:	220c      	movs	r2, #12
 80067ea:	711a      	strb	r2, [r3, #4]
	UART_1.transmitBuffer[4]=0x00;
 80067ec:	4b12      	ldr	r3, [pc, #72]	@ (8006838 <MP3_Reset+0x74>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	715a      	strb	r2, [r3, #5]
	UART_1.transmitBuffer[5]=0x00;
 80067f2:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <MP3_Reset+0x74>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	719a      	strb	r2, [r3, #6]
	UART_1.transmitBuffer[6]=0x00;
 80067f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006838 <MP3_Reset+0x74>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	71da      	strb	r2, [r3, #7]
	crc=CalcCrc(UART_1.transmitBuffer,6);
 80067fe:	2106      	movs	r1, #6
 8006800:	480e      	ldr	r0, [pc, #56]	@ (800683c <MP3_Reset+0x78>)
 8006802:	f7ff fd6b 	bl	80062dc <CalcCrc>
 8006806:	4603      	mov	r3, r0
 8006808:	80fb      	strh	r3, [r7, #6]
	UART_1.transmitBuffer[7]=(crc&HIGHT_BYTE_MASK)>>8;;
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	b29b      	uxth	r3, r3
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <MP3_Reset+0x74>)
 8006814:	721a      	strb	r2, [r3, #8]
	UART_1.transmitBuffer[8]=(uint8_t)(crc&LOW_BYTE_MASK);
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	4b07      	ldr	r3, [pc, #28]	@ (8006838 <MP3_Reset+0x74>)
 800681c:	725a      	strb	r2, [r3, #9]
	UART_1.transmitBuffer[9]=0xEF;
 800681e:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <MP3_Reset+0x74>)
 8006820:	22ef      	movs	r2, #239	@ 0xef
 8006822:	729a      	strb	r2, [r3, #10]
	UART_1.count=10;
 8006824:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <MP3_Reset+0x74>)
 8006826:	220a      	movs	r2, #10
 8006828:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	UART_1_Transmit();
 800682c:	f006 f8f0 	bl	800ca10 <UART_1_Transmit>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	2000043c 	.word	0x2000043c
 800683c:	2000043d 	.word	0x2000043d

08006840 <MP3_PlayTrack>:

void MP3_PlayTrack(uint16_t number)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	80fb      	strh	r3, [r7, #6]
uint16_t	crc;

	while(UART_1.status!=UART_IDLE){};
 800684a:	bf00      	nop
 800684c:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <MP3_PlayTrack+0x88>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1fb      	bne.n	800684c <MP3_PlayTrack+0xc>

	MP3_Player.trackNumber=number;
 8006854:	4a1d      	ldr	r2, [pc, #116]	@ (80068cc <MP3_PlayTrack+0x8c>)
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	8053      	strh	r3, [r2, #2]

	UART_1.transmitBuffer[0]=0x7E;
 800685a:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <MP3_PlayTrack+0x88>)
 800685c:	227e      	movs	r2, #126	@ 0x7e
 800685e:	705a      	strb	r2, [r3, #1]
	UART_1.transmitBuffer[1]=0xFF;
 8006860:	4b19      	ldr	r3, [pc, #100]	@ (80068c8 <MP3_PlayTrack+0x88>)
 8006862:	22ff      	movs	r2, #255	@ 0xff
 8006864:	709a      	strb	r2, [r3, #2]
	UART_1.transmitBuffer[2]=0x06;
 8006866:	4b18      	ldr	r3, [pc, #96]	@ (80068c8 <MP3_PlayTrack+0x88>)
 8006868:	2206      	movs	r2, #6
 800686a:	70da      	strb	r2, [r3, #3]
	UART_1.transmitBuffer[3]=0x12;
 800686c:	4b16      	ldr	r3, [pc, #88]	@ (80068c8 <MP3_PlayTrack+0x88>)
 800686e:	2212      	movs	r2, #18
 8006870:	711a      	strb	r2, [r3, #4]
	UART_1.transmitBuffer[4]=0x00;
 8006872:	4b15      	ldr	r3, [pc, #84]	@ (80068c8 <MP3_PlayTrack+0x88>)
 8006874:	2200      	movs	r2, #0
 8006876:	715a      	strb	r2, [r3, #5]
	UART_1.transmitBuffer[5]=(number&HIGHT_BYTE_MASK)>>8;
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	0a1b      	lsrs	r3, r3, #8
 800687c:	b29b      	uxth	r3, r3
 800687e:	b2da      	uxtb	r2, r3
 8006880:	4b11      	ldr	r3, [pc, #68]	@ (80068c8 <MP3_PlayTrack+0x88>)
 8006882:	719a      	strb	r2, [r3, #6]
	UART_1.transmitBuffer[6]=(uint8_t)(number&LOW_BYTE_MASK);
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <MP3_PlayTrack+0x88>)
 800688a:	71da      	strb	r2, [r3, #7]
	crc=CalcCrc(UART_1.transmitBuffer,6);
 800688c:	2106      	movs	r1, #6
 800688e:	4810      	ldr	r0, [pc, #64]	@ (80068d0 <MP3_PlayTrack+0x90>)
 8006890:	f7ff fd24 	bl	80062dc <CalcCrc>
 8006894:	4603      	mov	r3, r0
 8006896:	81fb      	strh	r3, [r7, #14]
	UART_1.transmitBuffer[7]=(crc&HIGHT_BYTE_MASK)>>8;;
 8006898:	89fb      	ldrh	r3, [r7, #14]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	b29b      	uxth	r3, r3
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	4b09      	ldr	r3, [pc, #36]	@ (80068c8 <MP3_PlayTrack+0x88>)
 80068a2:	721a      	strb	r2, [r3, #8]
	UART_1.transmitBuffer[8]=(uint8_t)(crc&LOW_BYTE_MASK);
 80068a4:	89fb      	ldrh	r3, [r7, #14]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <MP3_PlayTrack+0x88>)
 80068aa:	725a      	strb	r2, [r3, #9]
	UART_1.transmitBuffer[9]=0xEF;
 80068ac:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <MP3_PlayTrack+0x88>)
 80068ae:	22ef      	movs	r2, #239	@ 0xef
 80068b0:	729a      	strb	r2, [r3, #10]
	UART_1.count=10;
 80068b2:	4b05      	ldr	r3, [pc, #20]	@ (80068c8 <MP3_PlayTrack+0x88>)
 80068b4:	220a      	movs	r2, #10
 80068b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	UART_1_Transmit();
 80068ba:	f006 f8a9 	bl	800ca10 <UART_1_Transmit>
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000043c 	.word	0x2000043c
 80068cc:	20000210 	.word	0x20000210
 80068d0:	2000043d 	.word	0x2000043d

080068d4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af04      	add	r7, sp, #16
 80068da:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80068dc:	2364      	movs	r3, #100	@ 0x64
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	2301      	movs	r3, #1
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	f107 030f 	add.w	r3, r7, #15
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	2301      	movs	r3, #1
 80068ec:	2275      	movs	r2, #117	@ 0x75
 80068ee:	21d2      	movs	r1, #210	@ 0xd2
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f003 fb05 	bl	8009f00 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b68      	cmp	r3, #104	@ 0x68
 80068fa:	d13d      	bne.n	8006978 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8006900:	2364      	movs	r3, #100	@ 0x64
 8006902:	9302      	str	r3, [sp, #8]
 8006904:	2301      	movs	r3, #1
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	f107 030e 	add.w	r3, r7, #14
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	2301      	movs	r3, #1
 8006910:	226b      	movs	r2, #107	@ 0x6b
 8006912:	21d2      	movs	r1, #210	@ 0xd2
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f003 f9f9 	bl	8009d0c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800691a:	2307      	movs	r3, #7
 800691c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800691e:	2364      	movs	r3, #100	@ 0x64
 8006920:	9302      	str	r3, [sp, #8]
 8006922:	2301      	movs	r3, #1
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	f107 030e 	add.w	r3, r7, #14
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2301      	movs	r3, #1
 800692e:	2219      	movs	r2, #25
 8006930:	21d2      	movs	r1, #210	@ 0xd2
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f003 f9ea 	bl	8009d0c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8006938:	2300      	movs	r3, #0
 800693a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800693c:	2364      	movs	r3, #100	@ 0x64
 800693e:	9302      	str	r3, [sp, #8]
 8006940:	2301      	movs	r3, #1
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f107 030e 	add.w	r3, r7, #14
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	2301      	movs	r3, #1
 800694c:	221c      	movs	r2, #28
 800694e:	21d2      	movs	r1, #210	@ 0xd2
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f003 f9db 	bl	8009d0c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8006956:	2300      	movs	r3, #0
 8006958:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800695a:	2364      	movs	r3, #100	@ 0x64
 800695c:	9302      	str	r3, [sp, #8]
 800695e:	2301      	movs	r3, #1
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	f107 030e 	add.w	r3, r7, #14
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	2301      	movs	r3, #1
 800696a:	221b      	movs	r2, #27
 800696c:	21d2      	movs	r1, #210	@ 0xd2
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f003 f9cc 	bl	8009d0c <HAL_I2C_Mem_Write>
        return 0;
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <MPU6050_Init+0xa6>
    }
    return 1;
 8006978:	2301      	movs	r3, #1
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	0000      	movs	r0, r0
 8006984:	0000      	movs	r0, r0
	...

08006988 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8006988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800698c:	b094      	sub	sp, #80	@ 0x50
 800698e:	af04      	add	r7, sp, #16
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8006994:	2364      	movs	r3, #100	@ 0x64
 8006996:	9302      	str	r3, [sp, #8]
 8006998:	230e      	movs	r3, #14
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	2301      	movs	r3, #1
 80069a4:	223b      	movs	r2, #59	@ 0x3b
 80069a6:	21d2      	movs	r1, #210	@ 0xd2
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f003 faa9 	bl	8009f00 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80069ae:	7a3b      	ldrb	r3, [r7, #8]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	b21a      	sxth	r2, r3
 80069b4:	7a7b      	ldrb	r3, [r7, #9]
 80069b6:	b21b      	sxth	r3, r3
 80069b8:	4313      	orrs	r3, r2
 80069ba:	b21a      	sxth	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80069c0:	7abb      	ldrb	r3, [r7, #10]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	b21a      	sxth	r2, r3
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	b21b      	sxth	r3, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b21a      	sxth	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80069d2:	7b3b      	ldrb	r3, [r7, #12]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	b21a      	sxth	r2, r3
 80069d8:	7b7b      	ldrb	r3, [r7, #13]
 80069da:	b21b      	sxth	r3, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	b21a      	sxth	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	b21a      	sxth	r2, r3
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	b21b      	sxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80069f2:	7c3b      	ldrb	r3, [r7, #16]
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	b21a      	sxth	r2, r3
 80069f8:	7c7b      	ldrb	r3, [r7, #17]
 80069fa:	b21b      	sxth	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b21a      	sxth	r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8006a04:	7cbb      	ldrb	r3, [r7, #18]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b21a      	sxth	r2, r3
 8006a0a:	7cfb      	ldrb	r3, [r7, #19]
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b21a      	sxth	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8006a16:	7d3b      	ldrb	r3, [r7, #20]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	b21a      	sxth	r2, r3
 8006a1c:	7d7b      	ldrb	r3, [r7, #21]
 8006a1e:	b21b      	sxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b21a      	sxth	r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7f9 fce0 	bl	80003f4 <__aeabi_i2d>
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	4b93      	ldr	r3, [pc, #588]	@ (8006c88 <MPU6050_Read_All+0x300>)
 8006a3a:	f7f9 fe6f 	bl	800071c <__aeabi_ddiv>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7f9 fcd0 	bl	80003f4 <__aeabi_i2d>
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	4b8b      	ldr	r3, [pc, #556]	@ (8006c88 <MPU6050_Read_All+0x300>)
 8006a5a:	f7f9 fe5f 	bl	800071c <__aeabi_ddiv>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7f9 fcc0 	bl	80003f4 <__aeabi_i2d>
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	4b83      	ldr	r3, [pc, #524]	@ (8006c88 <MPU6050_Read_All+0x300>)
 8006a7a:	f7f9 fe4f 	bl	800071c <__aeabi_ddiv>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8006a88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fa f885 	bl	8000b9c <__aeabi_i2f>
 8006a92:	4603      	mov	r3, r0
 8006a94:	497d      	ldr	r1, [pc, #500]	@ (8006c8c <MPU6050_Read_All+0x304>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fa f988 	bl	8000dac <__aeabi_fdiv>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	497c      	ldr	r1, [pc, #496]	@ (8006c90 <MPU6050_Read_All+0x308>)
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7f9 ffc7 	bl	8000a34 <__addsf3>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7f9 fc9d 	bl	80003f4 <__aeabi_i2d>
 8006aba:	a36f      	add	r3, pc, #444	@ (adr r3, 8006c78 <MPU6050_Read_All+0x2f0>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fe2c 	bl	800071c <__aeabi_ddiv>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7f9 fc8d 	bl	80003f4 <__aeabi_i2d>
 8006ada:	a367      	add	r3, pc, #412	@ (adr r3, 8006c78 <MPU6050_Read_All+0x2f0>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fe1c 	bl	800071c <__aeabi_ddiv>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7f9 fc7d 	bl	80003f4 <__aeabi_i2d>
 8006afa:	a35f      	add	r3, pc, #380	@ (adr r3, 8006c78 <MPU6050_Read_All+0x2f0>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fe0c 	bl	800071c <__aeabi_ddiv>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8006b0e:	f001 fca5 	bl	800845c <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	4b5f      	ldr	r3, [pc, #380]	@ (8006c94 <MPU6050_Read_All+0x30c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7f9 fc5a 	bl	80003d4 <__aeabi_ui2d>
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	4b5c      	ldr	r3, [pc, #368]	@ (8006c98 <MPU6050_Read_All+0x310>)
 8006b26:	f7f9 fdf9 	bl	800071c <__aeabi_ddiv>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8006b32:	f001 fc93 	bl	800845c <HAL_GetTick>
 8006b36:	4603      	mov	r3, r0
 8006b38:	4a56      	ldr	r2, [pc, #344]	@ (8006c94 <MPU6050_Read_All+0x30c>)
 8006b3a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b42:	461a      	mov	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4a:	fb03 f202 	mul.w	r2, r3, r2
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b54:	4619      	mov	r1, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7f9 fc46 	bl	80003f4 <__aeabi_i2d>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f006 ff98 	bl	800daa4 <sqrt>
 8006b74:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b84:	f7f9 ff08 	bl	8000998 <__aeabi_dcmpeq>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d119      	bne.n	8006bc2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fc2d 	bl	80003f4 <__aeabi_i2d>
 8006b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b9e:	f7f9 fdbd 	bl	800071c <__aeabi_ddiv>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f006 ffa1 	bl	800daf0 <atan>
 8006bae:	a334      	add	r3, pc, #208	@ (adr r3, 8006c80 <MPU6050_Read_All+0x2f8>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 fc88 	bl	80004c8 <__aeabi_dmul>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8006bc0:	e005      	b.n	8006bce <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7f9 fc0c 	bl	80003f4 <__aeabi_i2d>
 8006bdc:	4682      	mov	sl, r0
 8006bde:	468b      	mov	fp, r1
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fc04 	bl	80003f4 <__aeabi_i2d>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	4659      	mov	r1, fp
 8006bf4:	f006 ff54 	bl	800daa0 <atan2>
 8006bf8:	a321      	add	r3, pc, #132	@ (adr r3, 8006c80 <MPU6050_Read_All+0x2f8>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fc63 	bl	80004c8 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	4b23      	ldr	r3, [pc, #140]	@ (8006c9c <MPU6050_Read_All+0x314>)
 8006c10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c14:	f7f9 feca 	bl	80009ac <__aeabi_dcmplt>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <MPU6050_Read_All+0x2ac>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca0 <MPU6050_Read_All+0x318>)
 8006c2a:	f7f9 fedd 	bl	80009e8 <__aeabi_dcmpgt>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d114      	bne.n	8006c5e <MPU6050_Read_All+0x2d6>
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	4b19      	ldr	r3, [pc, #100]	@ (8006ca0 <MPU6050_Read_All+0x318>)
 8006c3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c3e:	f7f9 fed3 	bl	80009e8 <__aeabi_dcmpgt>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02f      	beq.n	8006ca8 <MPU6050_Read_All+0x320>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	4b12      	ldr	r3, [pc, #72]	@ (8006c9c <MPU6050_Read_All+0x314>)
 8006c54:	f7f9 feaa 	bl	80009ac <__aeabi_dcmplt>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d024      	beq.n	8006ca8 <MPU6050_Read_All+0x320>
    {
        KalmanY.angle = pitch;
 8006c5e:	4911      	ldr	r1, [pc, #68]	@ (8006ca4 <MPU6050_Read_All+0x31c>)
 8006c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c64:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8006c72:	e02c      	b.n	8006cce <MPU6050_Read_All+0x346>
 8006c74:	f3af 8000 	nop.w
 8006c78:	00000000 	.word	0x00000000
 8006c7c:	40606000 	.word	0x40606000
 8006c80:	1a63c1f8 	.word	0x1a63c1f8
 8006c84:	404ca5dc 	.word	0x404ca5dc
 8006c88:	40d00000 	.word	0x40d00000
 8006c8c:	43aa0000 	.word	0x43aa0000
 8006c90:	42121eb8 	.word	0x42121eb8
 8006c94:	200002c0 	.word	0x200002c0
 8006c98:	408f4000 	.word	0x408f4000
 8006c9c:	c0568000 	.word	0xc0568000
 8006ca0:	40568000 	.word	0x40568000
 8006ca4:	20000050 	.word	0x20000050
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8006cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cbe:	481c      	ldr	r0, [pc, #112]	@ (8006d30 <MPU6050_Read_All+0x3a8>)
 8006cc0:	f000 f83c 	bl	8006d3c <Kalman_getAngle>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006cd4:	4690      	mov	r8, r2
 8006cd6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	4b15      	ldr	r3, [pc, #84]	@ (8006d34 <MPU6050_Read_All+0x3ac>)
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	f7f9 fe80 	bl	80009e8 <__aeabi_dcmpgt>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <MPU6050_Read_All+0x378>
        DataStruct->Gx = -DataStruct->Gx;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d0e:	e9cd 2300 	strd	r2, r3, [sp]
 8006d12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d16:	4808      	ldr	r0, [pc, #32]	@ (8006d38 <MPU6050_Read_All+0x3b0>)
 8006d18:	f000 f810 	bl	8006d3c <Kalman_getAngle>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8006d26:	bf00      	nop
 8006d28:	3740      	adds	r7, #64	@ 0x40
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d30:	20000050 	.word	0x20000050
 8006d34:	40568000 	.word	0x40568000
 8006d38:	20000008 	.word	0x20000008

08006d3c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8006d3c:	b5b0      	push	{r4, r5, r7, lr}
 8006d3e:	b092      	sub	sp, #72	@ 0x48
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8006d52:	f7f9 fa01 	bl	8000158 <__aeabi_dsub>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8006d6c:	f7f9 fbac 	bl	80004c8 <__aeabi_dmul>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7f9 f9f0 	bl	800015c <__adddf3>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	68f9      	ldr	r1, [r7, #12]
 8006d82:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006d92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006d96:	f7f9 fb97 	bl	80004c8 <__aeabi_dmul>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4619      	mov	r1, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006da8:	f7f9 f9d6 	bl	8000158 <__aeabi_dsub>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4610      	mov	r0, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006dba:	f7f9 f9cd 	bl	8000158 <__aeabi_dsub>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 f9c6 	bl	800015c <__adddf3>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006ddc:	f7f9 fb74 	bl	80004c8 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 f9b8 	bl	800015c <__adddf3>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006e02:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006e06:	f7f9 fb5f 	bl	80004c8 <__aeabi_dmul>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 f9a1 	bl	8000158 <__aeabi_dsub>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006e2c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006e30:	f7f9 fb4a 	bl	80004c8 <__aeabi_dmul>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f7f9 f98c 	bl	8000158 <__aeabi_dsub>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006e56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006e5a:	f7f9 fb35 	bl	80004c8 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4620      	mov	r0, r4
 8006e64:	4629      	mov	r1, r5
 8006e66:	f7f9 f979 	bl	800015c <__adddf3>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006e80:	f7f9 f96c 	bl	800015c <__adddf3>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006e92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e96:	f7f9 fc41 	bl	800071c <__aeabi_ddiv>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8006ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006eac:	f7f9 fc36 	bl	800071c <__aeabi_ddiv>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ec2:	f7f9 f949 	bl	8000158 <__aeabi_dsub>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006ed4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ed8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006edc:	f7f9 faf4 	bl	80004c8 <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 f938 	bl	800015c <__adddf3>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006efc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006f04:	f7f9 fae0 	bl	80004c8 <__aeabi_dmul>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 f924 	bl	800015c <__adddf3>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006f24:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006f2e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8006f38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f40:	f7f9 fac2 	bl	80004c8 <__aeabi_dmul>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	f7f9 f904 	bl	8000158 <__aeabi_dsub>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	68f9      	ldr	r1, [r7, #12]
 8006f56:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8006f60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f68:	f7f9 faae 	bl	80004c8 <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f8f0 	bl	8000158 <__aeabi_dsub>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	68f9      	ldr	r1, [r7, #12]
 8006f7e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8006f88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f90:	f7f9 fa9a 	bl	80004c8 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	f7f9 f8dc 	bl	8000158 <__aeabi_dsub>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8006fb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006fb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fb8:	f7f9 fa86 	bl	80004c8 <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	f7f9 f8c8 	bl	8000158 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	68f9      	ldr	r1, [r7, #12]
 8006fce:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	3748      	adds	r7, #72	@ 0x48
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bdb0      	pop	{r4, r5, r7, pc}

08006fe2 <DS3231_Collect_data>:
#endif

I2C_HandleTypeDef *_ds3231_ui2c;

void DS3231_Collect_data(RTC_t *data)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
	data->Hours=DS3231_GetHour();
 8006fea:	f000 f967 	bl	80072bc <DS3231_GetHour>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	701a      	strb	r2, [r3, #0]
	data->Minutes=DS3231_GetMinute();
 8006ff6:	f000 f96d 	bl	80072d4 <DS3231_GetMinute>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	705a      	strb	r2, [r3, #1]
	data->Secounds=DS3231_GetSecond();
 8007002:	f000 f973 	bl	80072ec <DS3231_GetSecond>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	709a      	strb	r2, [r3, #2]
	data->Day=DS3231_GetDate();
 800700e:	f000 f912 	bl	8007236 <DS3231_GetDate>
 8007012:	4603      	mov	r3, r0
 8007014:	461a      	mov	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	70da      	strb	r2, [r3, #3]
	data->Mounth=DS3231_GetMonth();
 800701a:	f000 f918 	bl	800724e <DS3231_GetMonth>
 800701e:	4603      	mov	r3, r0
 8007020:	461a      	mov	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	711a      	strb	r2, [r3, #4]
	data->Year=DS3231_GetYear();
 8007026:	f000 f921 	bl	800726c <DS3231_GetYear>
 800702a:	4603      	mov	r3, r0
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	80da      	strh	r2, [r3, #6]
	data->DayOfWeek=DS3231_GetDayOfWeek();
 8007032:	f000 f8f4 	bl	800721e <DS3231_GetDayOfWeek>
 8007036:	4603      	mov	r3, r0
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	721a      	strb	r2, [r3, #8]
	data->Day=11;
	data->Mounth=11;
	data->Year=2024;
	data->DayOfWeek=2;
	*/
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8007050:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <DS3231_Init+0x30>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8007056:	2000      	movs	r0, #0
 8007058:	f000 f8a9 	bl	80071ae <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800705c:	2000      	movs	r0, #0
 800705e:	f000 f86d 	bl	800713c <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8007062:	f000 f8c6 	bl	80071f2 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8007066:	f000 f88c 	bl	8007182 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800706a:	2001      	movs	r0, #1
 800706c:	f000 f846 	bl	80070fc <DS3231_SetInterruptMode>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	200002c4 	.word	0x200002c4

0800707c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af02      	add	r7, sp, #8
 8007082:	4603      	mov	r3, r0
 8007084:	460a      	mov	r2, r1
 8007086:	71fb      	strb	r3, [r7, #7]
 8007088:	4613      	mov	r3, r2
 800708a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	733b      	strb	r3, [r7, #12]
 8007090:	79bb      	ldrb	r3, [r7, #6]
 8007092:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8007094:	4b07      	ldr	r3, [pc, #28]	@ (80070b4 <DS3231_SetRegByte+0x38>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	f107 020c 	add.w	r2, r7, #12
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	2302      	movs	r3, #2
 80070a4:	21d0      	movs	r1, #208	@ 0xd0
 80070a6:	f002 fac7 	bl	8009638 <HAL_I2C_Master_Transmit>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	200002c4 	.word	0x200002c4

080070b8 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af02      	add	r7, sp, #8
 80070be:	4603      	mov	r3, r0
 80070c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80070c2:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <DS3231_GetRegByte+0x40>)
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	1dfa      	adds	r2, r7, #7
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2301      	movs	r3, #1
 80070d0:	21d0      	movs	r1, #208	@ 0xd0
 80070d2:	f002 fab1 	bl	8009638 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80070d6:	4b08      	ldr	r3, [pc, #32]	@ (80070f8 <DS3231_GetRegByte+0x40>)
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	f107 020f 	add.w	r2, r7, #15
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2301      	movs	r3, #1
 80070e6:	21d0      	movs	r1, #208	@ 0xd0
 80070e8:	f002 fba4 	bl	8009834 <HAL_I2C_Master_Receive>
	return val;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200002c4 	.word	0x200002c4

080070fc <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8007106:	200e      	movs	r0, #14
 8007108:	f7ff ffd6 	bl	80070b8 <DS3231_GetRegByte>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8007110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007114:	f023 0304 	bic.w	r3, r3, #4
 8007118:	b25a      	sxtb	r2, r3
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	b25b      	sxtb	r3, r3
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	b25b      	sxtb	r3, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	b25b      	sxtb	r3, r3
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	200e      	movs	r0, #14
 8007130:	f7ff ffa4 	bl	800707c <DS3231_SetRegByte>
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8007146:	200e      	movs	r0, #14
 8007148:	f7ff ffb6 	bl	80070b8 <DS3231_GetRegByte>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8007150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007154:	f023 0302 	bic.w	r3, r3, #2
 8007158:	b25a      	sxtb	r2, r3
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	b25b      	sxtb	r3, r3
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	b25b      	sxtb	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b25b      	sxtb	r3, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4619      	mov	r1, r3
 800716e:	200e      	movs	r0, #14
 8007170:	f7ff ff84 	bl	800707c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8007174:	2001      	movs	r0, #1
 8007176:	f7ff ffc1 	bl	80070fc <DS3231_SetInterruptMode>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8007188:	200f      	movs	r0, #15
 800718a:	f7ff ff95 	bl	80070b8 <DS3231_GetRegByte>
 800718e:	4603      	mov	r3, r0
 8007190:	f023 0302 	bic.w	r3, r3, #2
 8007194:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	f023 0302 	bic.w	r3, r3, #2
 800719c:	b2db      	uxtb	r3, r3
 800719e:	4619      	mov	r1, r3
 80071a0:	200f      	movs	r0, #15
 80071a2:	f7ff ff6b 	bl	800707c <DS3231_SetRegByte>
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	4603      	mov	r3, r0
 80071b6:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80071b8:	200e      	movs	r0, #14
 80071ba:	f7ff ff7d 	bl	80070b8 <DS3231_GetRegByte>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80071c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	b25a      	sxtb	r2, r3
 80071cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	4313      	orrs	r3, r2
 80071d8:	b25b      	sxtb	r3, r3
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	200e      	movs	r0, #14
 80071e0:	f7ff ff4c 	bl	800707c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f7ff ff89 	bl	80070fc <DS3231_SetInterruptMode>
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80071f8:	200f      	movs	r0, #15
 80071fa:	f7ff ff5d 	bl	80070b8 <DS3231_GetRegByte>
 80071fe:	4603      	mov	r3, r0
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	b2db      	uxtb	r3, r3
 800720e:	4619      	mov	r1, r3
 8007210:	200f      	movs	r0, #15
 8007212:	f7ff ff33 	bl	800707c <DS3231_SetRegByte>
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800721e:	b580      	push	{r7, lr}
 8007220:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8007222:	2003      	movs	r0, #3
 8007224:	f7ff ff48 	bl	80070b8 <DS3231_GetRegByte>
 8007228:	4603      	mov	r3, r0
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f8bc 	bl	80073a8 <DS3231_DecodeBCD>
 8007230:	4603      	mov	r3, r0
}
 8007232:	4618      	mov	r0, r3
 8007234:	bd80      	pop	{r7, pc}

08007236 <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8007236:	b580      	push	{r7, lr}
 8007238:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 800723a:	2004      	movs	r0, #4
 800723c:	f7ff ff3c 	bl	80070b8 <DS3231_GetRegByte>
 8007240:	4603      	mov	r3, r0
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f8b0 	bl	80073a8 <DS3231_DecodeBCD>
 8007248:	4603      	mov	r3, r0
}
 800724a:	4618      	mov	r0, r3
 800724c:	bd80      	pop	{r7, pc}

0800724e <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 800724e:	b580      	push	{r7, lr}
 8007250:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8007252:	2005      	movs	r0, #5
 8007254:	f7ff ff30 	bl	80070b8 <DS3231_GetRegByte>
 8007258:	4603      	mov	r3, r0
 800725a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f8a1 	bl	80073a8 <DS3231_DecodeBCD>
 8007266:	4603      	mov	r3, r0
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}

0800726c <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8007272:	2006      	movs	r0, #6
 8007274:	f7ff ff20 	bl	80070b8 <DS3231_GetRegByte>
 8007278:	4603      	mov	r3, r0
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f894 	bl	80073a8 <DS3231_DecodeBCD>
 8007280:	4603      	mov	r3, r0
 8007282:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8007284:	2005      	movs	r0, #5
 8007286:	f7ff ff17 	bl	80070b8 <DS3231_GetRegByte>
 800728a:	4603      	mov	r3, r0
 800728c:	09db      	lsrs	r3, r3, #7
 800728e:	b2db      	uxtb	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	0092      	lsls	r2, r2, #2
 8007294:	4413      	add	r3, r2
 8007296:	461a      	mov	r2, r3
 8007298:	0091      	lsls	r1, r2, #2
 800729a:	461a      	mov	r2, r3
 800729c:	460b      	mov	r3, r1
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80072a8:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	88bb      	ldrh	r3, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	b29b      	uxth	r3, r3
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 80072c0:	2002      	movs	r0, #2
 80072c2:	f7ff fef9 	bl	80070b8 <DS3231_GetRegByte>
 80072c6:	4603      	mov	r3, r0
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 f86d 	bl	80073a8 <DS3231_DecodeBCD>
 80072ce:	4603      	mov	r3, r0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80072d8:	2001      	movs	r0, #1
 80072da:	f7ff feed 	bl	80070b8 <DS3231_GetRegByte>
 80072de:	4603      	mov	r3, r0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f861 	bl	80073a8 <DS3231_DecodeBCD>
 80072e6:	4603      	mov	r3, r0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}

080072ec <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 80072f0:	2000      	movs	r0, #0
 80072f2:	f7ff fee1 	bl	80070b8 <DS3231_GetRegByte>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 f855 	bl	80073a8 <DS3231_DecodeBCD>
 80072fe:	4603      	mov	r3, r0
}
 8007300:	4618      	mov	r0, r3
 8007302:	bd80      	pop	{r7, pc}

08007304 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f85e 	bl	80073d8 <DS3231_EncodeBCD>
 800731c:	4603      	mov	r3, r0
 800731e:	4619      	mov	r1, r3
 8007320:	2002      	movs	r0, #2
 8007322:	f7ff feab 	bl	800707c <DS3231_SetRegByte>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	4603      	mov	r3, r0
 8007336:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f84c 	bl	80073d8 <DS3231_EncodeBCD>
 8007340:	4603      	mov	r3, r0
 8007342:	4619      	mov	r1, r3
 8007344:	2001      	movs	r0, #1
 8007346:	f7ff fe99 	bl	800707c <DS3231_SetRegByte>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	4603      	mov	r3, r0
 800735a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f83a 	bl	80073d8 <DS3231_EncodeBCD>
 8007364:	4603      	mov	r3, r0
 8007366:	4619      	mov	r1, r3
 8007368:	2000      	movs	r0, #0
 800736a:	f7ff fe87 	bl	800707c <DS3231_SetRegByte>
}
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	4603      	mov	r3, r0
 800737e:	71fb      	strb	r3, [r7, #7]
 8007380:	460b      	mov	r3, r1
 8007382:	71bb      	strb	r3, [r7, #6]
 8007384:	4613      	mov	r3, r2
 8007386:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ffba 	bl	8007304 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8007390:	79bb      	ldrb	r3, [r7, #6]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ffcb 	bl	800732e <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8007398:	797b      	ldrb	r3, [r7, #5]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff ffd9 	bl	8007352 <DS3231_SetSecond>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	0092      	lsls	r2, r2, #2
 80073bc:	4413      	add	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	b2db      	uxtb	r3, r3
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80073e2:	79fa      	ldrb	r2, [r7, #7]
 80073e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <DS3231_EncodeBCD+0x40>)
 80073e6:	fba3 1302 	umull	r1, r3, r3, r2
 80073ea:	08d9      	lsrs	r1, r3, #3
 80073ec:	460b      	mov	r3, r1
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	4907      	ldr	r1, [pc, #28]	@ (8007418 <DS3231_EncodeBCD+0x40>)
 80073fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	b2db      	uxtb	r3, r3
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	4413      	add	r3, r2
 800740a:	b2db      	uxtb	r3, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	cccccccd 	.word	0xcccccccd

0800741c <RestartGame>:
  }
};


void RestartGame(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
	MP3_Stop();
 8007420:	f7ff f992 	bl	8006748 <MP3_Stop>
	HAL_Delay(500);
 8007424:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007428:	f001 f822 	bl	8008470 <HAL_Delay>
	MP3_PlayTrack(TETRIS_END_GAME);
 800742c:	20b0      	movs	r0, #176	@ 0xb0
 800742e:	f7ff fa07 	bl	8006840 <MP3_PlayTrack>
	HAL_Delay(500);
 8007432:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007436:	f001 f81b 	bl	8008470 <HAL_Delay>
	ClearMax7219();
 800743a:	f7fe fcf9 	bl	8005e30 <ClearMax7219>
	WriteScore(Application.tetrisDefinition.score,Application.rotation,true);
 800743e:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <RestartGame+0x48>)
 8007440:	8c1b      	ldrh	r3, [r3, #32]
 8007442:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <RestartGame+0x48>)
 8007444:	7911      	ldrb	r1, [r2, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f7fc f957 	bl	80036fc <WriteScore>
	UpdateMax7219();
 800744e:	f7fe fd71 	bl	8005f34 <UpdateMax7219>
	HAL_Delay(3000);
 8007452:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007456:	f001 f80b 	bl	8008470 <HAL_Delay>
	StartGame();
 800745a:	f000 f805 	bl	8007468 <StartGame>

}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000138 	.word	0x20000138

08007468 <StartGame>:

void StartGame(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
uint16_t seed;
uint8_t i;

seed= getSeed();
 800746e:	f000 f859 	bl	8007524 <getSeed>
 8007472:	4603      	mov	r3, r0
 8007474:	80bb      	strh	r3, [r7, #4]
	srand(seed);
 8007476:	88bb      	ldrh	r3, [r7, #4]
 8007478:	4618      	mov	r0, r3
 800747a:	f005 fafb 	bl	800ca74 <srand>
	Application.tetrisDefinition.score=0;
 800747e:	4b26      	ldr	r3, [pc, #152]	@ (8007518 <StartGame+0xb0>)
 8007480:	2200      	movs	r2, #0
 8007482:	841a      	strh	r2, [r3, #32]
	Application.tetrisDefinition.speed=Application.tetrisDefinition.Startspeed;
 8007484:	4b24      	ldr	r3, [pc, #144]	@ (8007518 <StartGame+0xb0>)
 8007486:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800748a:	4b23      	ldr	r3, [pc, #140]	@ (8007518 <StartGame+0xb0>)
 800748c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	for(i=0;i<=22;i++)
 8007490:	2300      	movs	r3, #0
 8007492:	71fb      	strb	r3, [r7, #7]
 8007494:	e007      	b.n	80074a6 <StartGame+0x3e>
	{
		fixedFigures[i]=0;
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	4a20      	ldr	r2, [pc, #128]	@ (800751c <StartGame+0xb4>)
 800749a:	2100      	movs	r1, #0
 800749c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<=22;i++)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	3301      	adds	r3, #1
 80074a4:	71fb      	strb	r3, [r7, #7]
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	2b16      	cmp	r3, #22
 80074aa:	d9f4      	bls.n	8007496 <StartGame+0x2e>
	}
	for(i=0;i<4;i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	71fb      	strb	r3, [r7, #7]
 80074b0:	e013      	b.n	80074da <StartGame+0x72>
	{
		queue[i].figure=Random(0, 6);
 80074b2:	2106      	movs	r1, #6
 80074b4:	2000      	movs	r0, #0
 80074b6:	f7fa ff39 	bl	800232c <Random>
 80074ba:	4603      	mov	r3, r0
 80074bc:	461a      	mov	r2, r3
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	b2d1      	uxtb	r1, r2
 80074c2:	4a17      	ldr	r2, [pc, #92]	@ (8007520 <StartGame+0xb8>)
 80074c4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		queue[i].angle=0;
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	4a15      	ldr	r2, [pc, #84]	@ (8007520 <StartGame+0xb8>)
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	2200      	movs	r2, #0
 80074d2:	705a      	strb	r2, [r3, #1]
	for(i=0;i<4;i++)
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	3301      	adds	r3, #1
 80074d8:	71fb      	strb	r3, [r7, #7]
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d9e8      	bls.n	80074b2 <StartGame+0x4a>
	}
	RestartRound();
 80074e0:	f7fb fe82 	bl	80031e8 <RestartRound>
	Application.forceUpdate=true;
 80074e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007518 <StartGame+0xb0>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	ClearMax7219();
 80074ec:	f7fe fca0 	bl	8005e30 <ClearMax7219>
	MP3_PlayTrack(TETRIS_START_GAME);
 80074f0:	20b2      	movs	r0, #178	@ 0xb2
 80074f2:	f7ff f9a5 	bl	8006840 <MP3_PlayTrack>
	CreateImage();
 80074f6:	f7fa f9af 	bl	8001858 <CreateImage>
	UpdateMax7219();
 80074fa:	f7fe fd1b 	bl	8005f34 <UpdateMax7219>
	HAL_Delay(3000);
 80074fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007502:	f000 ffb5 	bl	8008470 <HAL_Delay>
	Application.forceUpdate=false;
 8007506:	4b04      	ldr	r3, [pc, #16]	@ (8007518 <StartGame+0xb0>)
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000138 	.word	0x20000138
 800751c:	20000248 	.word	0x20000248
 8007520:	20000240 	.word	0x20000240

08007524 <getSeed>:

uint16_t getSeed(void)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
uint16_t result;
	result=(Get_Timer_1_ms()+1)*(Get_Timer_10_ms()+1)*(Get_Timer_100_ms()+1)*(Get_Timer_1_s()+1);
 800752a:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <getSeed+0x44>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	4a0d      	ldr	r2, [pc, #52]	@ (8007568 <getSeed+0x44>)
 8007534:	7852      	ldrb	r2, [r2, #1]
 8007536:	3201      	adds	r2, #1
 8007538:	b292      	uxth	r2, r2
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	b29b      	uxth	r3, r3
 8007540:	4a09      	ldr	r2, [pc, #36]	@ (8007568 <getSeed+0x44>)
 8007542:	7892      	ldrb	r2, [r2, #2]
 8007544:	3201      	adds	r2, #1
 8007546:	b292      	uxth	r2, r2
 8007548:	fb02 f303 	mul.w	r3, r2, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	4a06      	ldr	r2, [pc, #24]	@ (8007568 <getSeed+0x44>)
 8007550:	6852      	ldr	r2, [r2, #4]
 8007552:	3201      	adds	r2, #1
 8007554:	b292      	uxth	r2, r2
 8007556:	fb02 f303 	mul.w	r3, r2, r3
 800755a:	80fb      	strh	r3, [r7, #6]
return result;
 800755c:	88fb      	ldrh	r3, [r7, #6]
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr
 8007568:	2000012c 	.word	0x2000012c

0800756c <ClearLines>:

void ClearLines(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
int8_t i,j,k,linesForClear=0,startLine,score;
 8007572:	2300      	movs	r3, #0
 8007574:	733b      	strb	r3, [r7, #12]
uint8_t linesForClearIndex[4]={48,48,48,48};
 8007576:	f04f 3330 	mov.w	r3, #808464432	@ 0x30303030
 800757a:	607b      	str	r3, [r7, #4]
	for(i=22;i>=0;i--)
 800757c:	2316      	movs	r3, #22
 800757e:	73fb      	strb	r3, [r7, #15]
 8007580:	e01b      	b.n	80075ba <ClearLines+0x4e>
	{
		if(fixedFigures[i]==FULL_LINE)
 8007582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007586:	4a88      	ldr	r2, [pc, #544]	@ (80077a8 <ClearLines+0x23c>)
 8007588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800758c:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 8007590:	4293      	cmp	r3, r2
 8007592:	d10c      	bne.n	80075ae <ClearLines+0x42>
		{
			linesForClearIndex[linesForClear]=i;
 8007594:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007598:	7bfa      	ldrb	r2, [r7, #15]
 800759a:	3310      	adds	r3, #16
 800759c:	443b      	add	r3, r7
 800759e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			linesForClear++;
 80075a2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	3301      	adds	r3, #1
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	733b      	strb	r3, [r7, #12]
	for(i=22;i>=0;i--)
 80075ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dadf      	bge.n	8007582 <ClearLines+0x16>
		}
	}

	if(linesForClear!=0)
 80075c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d051      	beq.n	800766e <ClearLines+0x102>
	{
		for(j=0;j<2;j++)
 80075ca:	2300      	movs	r3, #0
 80075cc:	73bb      	strb	r3, [r7, #14]
 80075ce:	e04a      	b.n	8007666 <ClearLines+0xfa>
		{
			for(i=0;i<linesForClear;i++)
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
 80075d4:	e010      	b.n	80075f8 <ClearLines+0x8c>
			{
				fixedFigures[linesForClearIndex[i]]=0;
 80075d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075da:	3310      	adds	r3, #16
 80075dc:	443b      	add	r3, r7
 80075de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80075e2:	461a      	mov	r2, r3
 80075e4:	4b70      	ldr	r3, [pc, #448]	@ (80077a8 <ClearLines+0x23c>)
 80075e6:	2100      	movs	r1, #0
 80075e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(i=0;i<linesForClear;i++)
 80075ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	3301      	adds	r3, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	73fb      	strb	r3, [r7, #15]
 80075f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80075fc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007600:	429a      	cmp	r2, r3
 8007602:	dbe8      	blt.n	80075d6 <ClearLines+0x6a>
			}
			WriteFixedFigures();
 8007604:	f7fb fdc4 	bl	8003190 <WriteFixedFigures>
			UpdateMax7219();
 8007608:	f7fe fc94 	bl	8005f34 <UpdateMax7219>
			HAL_Delay(500);
 800760c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007610:	f000 ff2e 	bl	8008470 <HAL_Delay>
			for(i=0;i<linesForClear;i++)
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
 8007618:	e011      	b.n	800763e <ClearLines+0xd2>
			{
				fixedFigures[linesForClearIndex[i]]=FULL_LINE;
 800761a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800761e:	3310      	adds	r3, #16
 8007620:	443b      	add	r3, r7
 8007622:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007626:	461a      	mov	r2, r3
 8007628:	4b5f      	ldr	r3, [pc, #380]	@ (80077a8 <ClearLines+0x23c>)
 800762a:	f64f 71c0 	movw	r1, #65472	@ 0xffc0
 800762e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(i=0;i<linesForClear;i++)
 8007632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	3301      	adds	r3, #1
 800763a:	b2db      	uxtb	r3, r3
 800763c:	73fb      	strb	r3, [r7, #15]
 800763e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007642:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007646:	429a      	cmp	r2, r3
 8007648:	dbe7      	blt.n	800761a <ClearLines+0xae>
			}
			WriteFixedFigures();
 800764a:	f7fb fda1 	bl	8003190 <WriteFixedFigures>
			UpdateMax7219();
 800764e:	f7fe fc71 	bl	8005f34 <UpdateMax7219>
			HAL_Delay(500);
 8007652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007656:	f000 ff0b 	bl	8008470 <HAL_Delay>
		for(j=0;j<2;j++)
 800765a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	3301      	adds	r3, #1
 8007662:	b2db      	uxtb	r3, r3
 8007664:	73bb      	strb	r3, [r7, #14]
 8007666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800766a:	2b01      	cmp	r3, #1
 800766c:	ddb0      	ble.n	80075d0 <ClearLines+0x64>
		}
	}

	for(i=0;i<linesForClear;i++)
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
 8007672:	e010      	b.n	8007696 <ClearLines+0x12a>
	{
		fixedFigures[linesForClearIndex[i]]=0;
 8007674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007678:	3310      	adds	r3, #16
 800767a:	443b      	add	r3, r7
 800767c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007680:	461a      	mov	r2, r3
 8007682:	4b49      	ldr	r3, [pc, #292]	@ (80077a8 <ClearLines+0x23c>)
 8007684:	2100      	movs	r1, #0
 8007686:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0;i<linesForClear;i++)
 800768a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	3301      	adds	r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800769a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800769e:	429a      	cmp	r2, r3
 80076a0:	dbe8      	blt.n	8007674 <ClearLines+0x108>
	}

	WriteFixedFigures();
 80076a2:	f7fb fd75 	bl	8003190 <WriteFixedFigures>
	UpdateMax7219();
 80076a6:	f7fe fc45 	bl	8005f34 <UpdateMax7219>
	HAL_Delay(500);
 80076aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80076ae:	f000 fedf 	bl	8008470 <HAL_Delay>

	if(linesForClear!=0)
 80076b2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d037      	beq.n	800772a <ClearLines+0x1be>
	{
		for(i=22;i>=0;i--)
 80076ba:	2316      	movs	r3, #22
 80076bc:	73fb      	strb	r3, [r7, #15]
 80076be:	e030      	b.n	8007722 <ClearLines+0x1b6>
		{
			if(linesForClearIndex[k]==i)
 80076c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80076c4:	3310      	adds	r3, #16
 80076c6:	443b      	add	r3, r7
 80076c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80076cc:	461a      	mov	r2, r3
 80076ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d11f      	bne.n	8007716 <ClearLines+0x1aa>
			{
				startLine=i;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	72bb      	strb	r3, [r7, #10]
				k++;
 80076da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	3301      	adds	r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	737b      	strb	r3, [r7, #13]
				for(j=startLine;j<22;j++)
 80076e6:	7abb      	ldrb	r3, [r7, #10]
 80076e8:	73bb      	strb	r3, [r7, #14]
 80076ea:	e010      	b.n	800770e <ClearLines+0x1a2>
				{
					fixedFigures[j]=fixedFigures[j+1];
 80076ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f6:	492c      	ldr	r1, [pc, #176]	@ (80077a8 <ClearLines+0x23c>)
 80076f8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80076fc:	4a2a      	ldr	r2, [pc, #168]	@ (80077a8 <ClearLines+0x23c>)
 80076fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(j=startLine;j<22;j++)
 8007702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	3301      	adds	r3, #1
 800770a:	b2db      	uxtb	r3, r3
 800770c:	73bb      	strb	r3, [r7, #14]
 800770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007712:	2b15      	cmp	r3, #21
 8007714:	ddea      	ble.n	80076ec <ClearLines+0x180>
		for(i=22;i>=0;i--)
 8007716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b2db      	uxtb	r3, r3
 8007720:	73fb      	strb	r3, [r7, #15]
 8007722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	daca      	bge.n	80076c0 <ClearLines+0x154>
				}
			}
		}
	}

	if(linesForClear!=0)
 800772a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d031      	beq.n	8007796 <ClearLines+0x22a>
	{
		switch(linesForClear)
 8007732:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007736:	3b01      	subs	r3, #1
 8007738:	2b03      	cmp	r3, #3
 800773a:	d817      	bhi.n	800776c <ClearLines+0x200>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <ClearLines+0x1d8>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007755 	.word	0x08007755
 8007748:	0800775b 	.word	0x0800775b
 800774c:	08007761 	.word	0x08007761
 8007750:	08007767 	.word	0x08007767
		{
			case 1: 	score=1; 	break;
 8007754:	2301      	movs	r3, #1
 8007756:	72fb      	strb	r3, [r7, #11]
 8007758:	e00b      	b.n	8007772 <ClearLines+0x206>
			case 2: 	score=4; 	break;
 800775a:	2304      	movs	r3, #4
 800775c:	72fb      	strb	r3, [r7, #11]
 800775e:	e008      	b.n	8007772 <ClearLines+0x206>
			case 3: 	score=12; 	break;
 8007760:	230c      	movs	r3, #12
 8007762:	72fb      	strb	r3, [r7, #11]
 8007764:	e005      	b.n	8007772 <ClearLines+0x206>
			case 4: 	score=32; 	break;
 8007766:	2320      	movs	r3, #32
 8007768:	72fb      	strb	r3, [r7, #11]
 800776a:	e002      	b.n	8007772 <ClearLines+0x206>
			default: 	score=0;	break;
 800776c:	2300      	movs	r3, #0
 800776e:	72fb      	strb	r3, [r7, #11]
 8007770:	bf00      	nop
		}

		Application.tetrisDefinition.score=Application.tetrisDefinition.score+score*(4-Application.tetrisDefinition.speed);
 8007772:	4b0e      	ldr	r3, [pc, #56]	@ (80077ac <ClearLines+0x240>)
 8007774:	8c1a      	ldrh	r2, [r3, #32]
 8007776:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800777a:	b29b      	uxth	r3, r3
 800777c:	490b      	ldr	r1, [pc, #44]	@ (80077ac <ClearLines+0x240>)
 800777e:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 8007782:	f1c1 0104 	rsb	r1, r1, #4
 8007786:	b289      	uxth	r1, r1
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	b29b      	uxth	r3, r3
 800778e:	4413      	add	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <ClearLines+0x240>)
 8007794:	841a      	strh	r2, [r3, #32]
	}

	WriteFixedFigures();
 8007796:	f7fb fcfb 	bl	8003190 <WriteFixedFigures>
	UpdateMax7219();
 800779a:	f7fe fbcb 	bl	8005f34 <UpdateMax7219>
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000248 	.word	0x20000248
 80077ac:	20000138 	.word	0x20000138

080077b0 <drawFigure>:

void drawFigure(int8_t figure, int8_t angle, int8_t x, int8_t y, bool State,t_rotation rotation)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4604      	mov	r4, r0
 80077b8:	4608      	mov	r0, r1
 80077ba:	4611      	mov	r1, r2
 80077bc:	461a      	mov	r2, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	71fb      	strb	r3, [r7, #7]
 80077c2:	4603      	mov	r3, r0
 80077c4:	71bb      	strb	r3, [r7, #6]
 80077c6:	460b      	mov	r3, r1
 80077c8:	717b      	strb	r3, [r7, #5]
 80077ca:	4613      	mov	r3, r2
 80077cc:	713b      	strb	r3, [r7, #4]
  SetPixel(x, y, State );        // рисуем точку начала координат фигуры
 80077ce:	797b      	ldrb	r3, [r7, #5]
 80077d0:	7939      	ldrb	r1, [r7, #4]
 80077d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fb44 	bl	8005e64 <SetPixel>
  int8_t X, Y;                      // вспомогательные
  for (int8_t i = 0; i < 3; i++) {    // рисуем 4 точки фигуры
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
 80077e0:	e04a      	b.n	8007878 <drawFigure+0xc8>
    // для этого идём в прогмем (функция pgm_read_byte)
    // обращаемся к массиву по адресу &figures
    // преобразовываем число в int8_t (так как progmem работает только с "unsigned"
    // angle * 3 + i - обращаемся к координатам согласно текущему углу поворота фигуры

    X = x + figures[figure][angle * 3 + i][0];
 80077e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80077e6:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80077ea:	460b      	mov	r3, r1
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4419      	add	r1, r3
 80077f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f4:	4419      	add	r1, r3
 80077f6:	4825      	ldr	r0, [pc, #148]	@ (800788c <drawFigure+0xdc>)
 80077f8:	4613      	mov	r3, r2
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	f910 3013 	ldrsb.w	r3, [r0, r3, lsl #1]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	797b      	ldrb	r3, [r7, #5]
 800780a:	4413      	add	r3, r2
 800780c:	b2db      	uxtb	r3, r3
 800780e:	73bb      	strb	r3, [r7, #14]
    Y = y + figures[figure][angle * 3 + i][1];
 8007810:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007814:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8007818:	460b      	mov	r3, r1
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	4419      	add	r1, r3
 800781e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007822:	4419      	add	r1, r3
 8007824:	4819      	ldr	r0, [pc, #100]	@ (800788c <drawFigure+0xdc>)
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4403      	add	r3, r0
 8007834:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007838:	b2da      	uxtb	r2, r3
 800783a:	793b      	ldrb	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	b2db      	uxtb	r3, r3
 8007840:	737b      	strb	r3, [r7, #13]

    if(rotation==ROTATION_90_DEGREES)
 8007842:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007846:	2b01      	cmp	r3, #1
 8007848:	d107      	bne.n	800785a <drawFigure+0xaa>
    {
    	if (Y < Application.tetrisDefinition.HEIGHT-1)
 800784a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800784e:	4b10      	ldr	r3, [pc, #64]	@ (8007890 <drawFigure+0xe0>)
 8007850:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007854:	3b01      	subs	r3, #1
 8007856:	429a      	cmp	r2, r3
 8007858:	db07      	blt.n	800786a <drawFigure+0xba>
    		continue;   // если выходим за пределы поля, пропустить отрисовку
    }

    SetPixel(X, Y, State);
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	7b79      	ldrb	r1, [r7, #13]
 800785e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fafe 	bl	8005e64 <SetPixel>
 8007868:	e000      	b.n	800786c <drawFigure+0xbc>
    		continue;   // если выходим за пределы поля, пропустить отрисовку
 800786a:	bf00      	nop
  for (int8_t i = 0; i < 3; i++) {    // рисуем 4 точки фигуры
 800786c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	3301      	adds	r3, #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800787c:	2b02      	cmp	r3, #2
 800787e:	ddb0      	ble.n	80077e2 <drawFigure+0x32>
  }

  //UpdateMax7219();
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}
 800788a:	bf00      	nop
 800788c:	0800e2c4 	.word	0x0800e2c4
 8007890:	20000138 	.word	0x20000138

08007894 <checkArea>:
// 2 - проверка стенки слева и фигур при смещении фигуры в лево
// 3 - проверка стенки справа и фигур при смещении фигуры в право
// 4 - проверка при вращении

bool checkArea(uint8_t x_Pos,uint8_t y_Pos,CheckType_t check_type)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	71fb      	strb	r3, [r7, #7]
 800789e:	460b      	mov	r3, r1
 80078a0:	71bb      	strb	r3, [r7, #6]
 80078a2:	4613      	mov	r3, r2
 80078a4:	717b      	strb	r3, [r7, #5]
uint8_t X, Y, pos, height, this_ang,i;

pos 		= x_Pos;
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	733b      	strb	r3, [r7, #12]
height 		= y_Pos;
 80078aa:	79bb      	ldrb	r3, [r7, #6]
 80078ac:	72fb      	strb	r3, [r7, #11]
this_ang 	= Application.tetrisDefinition.angle;
 80078ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007a18 <checkArea+0x184>)
 80078b0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80078b4:	72bb      	strb	r3, [r7, #10]

	for(i=0;i<4;i++)
 80078b6:	2300      	movs	r3, #0
 80078b8:	737b      	strb	r3, [r7, #13]
 80078ba:	e0a3      	b.n	8007a04 <checkArea+0x170>
	{
	    if (i == 0)
 80078bc:	7b7b      	ldrb	r3, [r7, #13]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <checkArea+0x38>
	    { // стартовая точка фигуры (начало отсчёта)
	      Y = height;
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	73bb      	strb	r3, [r7, #14]
	      X = pos;
 80078c6:	7b3b      	ldrb	r3, [r7, #12]
 80078c8:	73fb      	strb	r3, [r7, #15]
 80078ca:	e02f      	b.n	800792c <checkArea+0x98>
	    }
	    else
	    { // остальные три точки
	      Y = height + (int8_t)figures[Application.tetrisDefinition.figure][this_ang * 3 + i - 1][1];
 80078cc:	4b52      	ldr	r3, [pc, #328]	@ (8007a18 <checkArea+0x184>)
 80078ce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80078d2:	4618      	mov	r0, r3
 80078d4:	7aba      	ldrb	r2, [r7, #10]
 80078d6:	4613      	mov	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	441a      	add	r2, r3
 80078dc:	7b7b      	ldrb	r3, [r7, #13]
 80078de:	4413      	add	r3, r2
 80078e0:	1e5a      	subs	r2, r3, #1
 80078e2:	494e      	ldr	r1, [pc, #312]	@ (8007a1c <checkArea+0x188>)
 80078e4:	4603      	mov	r3, r0
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4403      	add	r3, r0
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	440b      	add	r3, r1
 80078f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	4413      	add	r3, r2
 80078fc:	73bb      	strb	r3, [r7, #14]
	      X = pos + (int8_t)figures[Application.tetrisDefinition.figure][this_ang * 3 + i - 1][0];
 80078fe:	4b46      	ldr	r3, [pc, #280]	@ (8007a18 <checkArea+0x184>)
 8007900:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8007904:	4618      	mov	r0, r3
 8007906:	7aba      	ldrb	r2, [r7, #10]
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	441a      	add	r2, r3
 800790e:	7b7b      	ldrb	r3, [r7, #13]
 8007910:	4413      	add	r3, r2
 8007912:	1e5a      	subs	r2, r3, #1
 8007914:	4941      	ldr	r1, [pc, #260]	@ (8007a1c <checkArea+0x188>)
 8007916:	4603      	mov	r3, r0
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4403      	add	r3, r0
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	f911 3013 	ldrsb.w	r3, [r1, r3, lsl #1]
 8007924:	b2da      	uxtb	r2, r3
 8007926:	7b3b      	ldrb	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	73fb      	strb	r3, [r7, #15]
	    }

	    if (check_type == 0)
 800792c:	797b      	ldrb	r3, [r7, #5]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <checkArea+0xa8>
	    {
	      if (Y >= 31)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b1e      	cmp	r3, #30
 8007936:	d901      	bls.n	800793c <checkArea+0xa8>
	      {
	        return true;
 8007938:	2301      	movs	r3, #1
 800793a:	e068      	b.n	8007a0e <checkArea+0x17a>
	      }
	    }

	    if (check_type == 1)
 800793c:	797b      	ldrb	r3, [r7, #5]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d112      	bne.n	8007968 <checkArea+0xd4>
	    {
	      if (Y >= 31)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b1e      	cmp	r3, #30
 8007946:	d901      	bls.n	800794c <checkArea+0xb8>
	      {
	        return true;
 8007948:	2301      	movs	r3, #1
 800794a:	e060      	b.n	8007a0e <checkArea+0x17a>
	      }

	      if(GetFixedPixel((31-Y-1),X)==true)
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	f1c3 031e 	rsb	r3, r3, #30
 8007952:	b2db      	uxtb	r3, r3
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fb fbf5 	bl	8003148 <GetFixedPixel>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <checkArea+0xd4>
	      {
	    	  return true;
 8007964:	2301      	movs	r3, #1
 8007966:	e052      	b.n	8007a0e <checkArea+0x17a>
	      }
	    }

	    if (check_type == 2)
 8007968:	797b      	ldrb	r3, [r7, #5]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d114      	bne.n	8007998 <checkArea+0x104>
	    {
	      if (X <=0)
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <checkArea+0xe4>
	        return true;
 8007974:	2301      	movs	r3, #1
 8007976:	e04a      	b.n	8007a0e <checkArea+0x17a>

	      if(GetFixedPixel((31-Y),X-1)==true)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	f1c3 031f 	rsb	r3, r3, #31
 800797e:	b2da      	uxtb	r2, r3
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	3b01      	subs	r3, #1
 8007984:	b2db      	uxtb	r3, r3
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fb fbdd 	bl	8003148 <GetFixedPixel>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <checkArea+0x104>
	      {
	    	  return true;
 8007994:	2301      	movs	r3, #1
 8007996:	e03a      	b.n	8007a0e <checkArea+0x17a>
	      }
	    }

	    if (check_type == 3)
 8007998:	797b      	ldrb	r3, [r7, #5]
 800799a:	2b03      	cmp	r3, #3
 800799c:	d114      	bne.n	80079c8 <checkArea+0x134>
	    {
	      if (X >=9)
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d901      	bls.n	80079a8 <checkArea+0x114>
	        return true;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e032      	b.n	8007a0e <checkArea+0x17a>

	      if(GetFixedPixel((31-Y),X+1)==true)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	f1c3 031f 	rsb	r3, r3, #31
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	3301      	adds	r3, #1
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fb fbc5 	bl	8003148 <GetFixedPixel>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <checkArea+0x134>
	      {
	    	  return true;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e022      	b.n	8007a0e <checkArea+0x17a>
	      }
	    }

	    if (check_type == 4)
 80079c8:	797b      	ldrb	r3, [r7, #5]
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d117      	bne.n	80079fe <checkArea+0x16a>
	    {
	      if (X >=9)
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d901      	bls.n	80079d8 <checkArea+0x144>
	        return true;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e01a      	b.n	8007a0e <checkArea+0x17a>
	      if (X <=0)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <checkArea+0x14e>
	        return true;
 80079de:	2301      	movs	r3, #1
 80079e0:	e015      	b.n	8007a0e <checkArea+0x17a>
	      if(GetFixedPixel((31-Y),X)==true)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	f1c3 031f 	rsb	r3, r3, #31
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	7bfa      	ldrb	r2, [r7, #15]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fb fbaa 	bl	8003148 <GetFixedPixel>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <checkArea+0x16a>
	      {
	    	  return true;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e007      	b.n	8007a0e <checkArea+0x17a>
	for(i=0;i<4;i++)
 80079fe:	7b7b      	ldrb	r3, [r7, #13]
 8007a00:	3301      	adds	r3, #1
 8007a02:	737b      	strb	r3, [r7, #13]
 8007a04:	7b7b      	ldrb	r3, [r7, #13]
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	f67f af58 	bls.w	80078bc <checkArea+0x28>
	      }
	    }

	}
return false;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000138 	.word	0x20000138
 8007a1c:	0800e2c4 	.word	0x0800e2c4

08007a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a24:	f000 fcc2 	bl	80083ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a28:	f000 f80d 	bl	8007a46 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a2c:	f000 f928 	bl	8007c80 <MX_GPIO_Init>
  MX_SPI2_Init();
 8007a30:	f000 f8c6 	bl	8007bc0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8007a34:	f000 f896 	bl	8007b64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8007a38:	f000 f8f8 	bl	8007c2c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8007a3c:	f000 f854 	bl	8007ae8 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AppInit();
 8007a40:	f7f9 fa50 	bl	8000ee4 <AppInit>
 8007a44:	e7fc      	b.n	8007a40 <main+0x20>

08007a46 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b094      	sub	sp, #80	@ 0x50
 8007a4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a50:	2228      	movs	r2, #40	@ 0x28
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f005 f97e 	bl	800cd56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a5a:	f107 0314 	add.w	r3, r7, #20
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
 8007a64:	609a      	str	r2, [r3, #8]
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	605a      	str	r2, [r3, #4]
 8007a72:	609a      	str	r2, [r3, #8]
 8007a74:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007a76:	2302      	movs	r3, #2
 8007a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007a7e:	2310      	movs	r3, #16
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f003 f9b0 	bl	800adf0 <HAL_RCC_OscConfig>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <SystemClock_Config+0x54>
  {
    Error_Handler();
 8007a96:	f000 f97d 	bl	8007d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a9a:	230f      	movs	r3, #15
 8007a9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007aae:	f107 0314 	add.w	r3, r7, #20
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f003 fc1d 	bl	800b2f4 <HAL_RCC_ClockConfig>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8007ac0:	f000 f968 	bl	8007d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007acc:	1d3b      	adds	r3, r7, #4
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f003 fd9e 	bl	800b610 <HAL_RCCEx_PeriphCLKConfig>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007ada:	f000 f95b 	bl	8007d94 <Error_Handler>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3750      	adds	r7, #80	@ 0x50
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007af8:	4b18      	ldr	r3, [pc, #96]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007afa:	4a19      	ldr	r2, [pc, #100]	@ (8007b60 <MX_ADC1_Init+0x78>)
 8007afc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007afe:	4b17      	ldr	r3, [pc, #92]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007b04:	4b15      	ldr	r3, [pc, #84]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007b0a:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007b10:	4b12      	ldr	r3, [pc, #72]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b12:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8007b16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007b18:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007b24:	480d      	ldr	r0, [pc, #52]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b26:	f000 fcc7 	bl	80084b8 <HAL_ADC_Init>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8007b30:	f000 f930 	bl	8007d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007b34:	2302      	movs	r3, #2
 8007b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8007b3c:	2307      	movs	r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b40:	1d3b      	adds	r3, r7, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4805      	ldr	r0, [pc, #20]	@ (8007b5c <MX_ADC1_Init+0x74>)
 8007b46:	f000 ff23 	bl	8008990 <HAL_ADC_ConfigChannel>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8007b50:	f000 f920 	bl	8007d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	200002c8 	.word	0x200002c8
 8007b60:	40012400 	.word	0x40012400

08007b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b68:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b6a:	4a13      	ldr	r2, [pc, #76]	@ (8007bb8 <MX_I2C1_Init+0x54>)
 8007b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007b6e:	4b11      	ldr	r3, [pc, #68]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b70:	4a12      	ldr	r2, [pc, #72]	@ (8007bbc <MX_I2C1_Init+0x58>)
 8007b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007b74:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b80:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007b86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007b8e:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b94:	4b07      	ldr	r3, [pc, #28]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b9a:	4b06      	ldr	r3, [pc, #24]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007ba0:	4804      	ldr	r0, [pc, #16]	@ (8007bb4 <MX_I2C1_Init+0x50>)
 8007ba2:	f001 fc05 	bl	80093b0 <HAL_I2C_Init>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007bac:	f000 f8f2 	bl	8007d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007bb0:	bf00      	nop
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	200002f8 	.word	0x200002f8
 8007bb8:	40005400 	.word	0x40005400
 8007bbc:	00061a80 	.word	0x00061a80

08007bc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007bc4:	4b17      	ldr	r3, [pc, #92]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bc6:	4a18      	ldr	r2, [pc, #96]	@ (8007c28 <MX_SPI2_Init+0x68>)
 8007bc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007bca:	4b16      	ldr	r3, [pc, #88]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007bd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007bd2:	4b14      	ldr	r3, [pc, #80]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007bd8:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bde:	4b11      	ldr	r3, [pc, #68]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007be4:	4b0f      	ldr	r3, [pc, #60]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007bea:	4b0e      	ldr	r3, [pc, #56]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bf4:	2228      	movs	r2, #40	@ 0x28
 8007bf6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c04:	4b07      	ldr	r3, [pc, #28]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007c0a:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007c10:	4804      	ldr	r0, [pc, #16]	@ (8007c24 <MX_SPI2_Init+0x64>)
 8007c12:	f003 fdb3 	bl	800b77c <HAL_SPI_Init>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007c1c:	f000 f8ba 	bl	8007d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007c20:	bf00      	nop
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	2000034c 	.word	0x2000034c
 8007c28:	40003800 	.word	0x40003800

08007c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c30:	4b11      	ldr	r3, [pc, #68]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c32:	4a12      	ldr	r2, [pc, #72]	@ (8007c7c <MX_USART1_UART_Init+0x50>)
 8007c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007c36:	4b10      	ldr	r3, [pc, #64]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8007c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c44:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c50:	4b09      	ldr	r3, [pc, #36]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c52:	220c      	movs	r2, #12
 8007c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c56:	4b08      	ldr	r3, [pc, #32]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007c62:	4805      	ldr	r0, [pc, #20]	@ (8007c78 <MX_USART1_UART_Init+0x4c>)
 8007c64:	f004 f8ee 	bl	800be44 <HAL_UART_Init>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007c6e:	f000 f891 	bl	8007d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007c72:	bf00      	nop
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	200003a4 	.word	0x200003a4
 8007c7c:	40013800 	.word	0x40013800

08007c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c86:	f107 0310 	add.w	r3, r7, #16
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	609a      	str	r2, [r3, #8]
 8007c92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c94:	4b3b      	ldr	r3, [pc, #236]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	4a3a      	ldr	r2, [pc, #232]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007c9a:	f043 0310 	orr.w	r3, r3, #16
 8007c9e:	6193      	str	r3, [r2, #24]
 8007ca0:	4b38      	ldr	r3, [pc, #224]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cac:	4b35      	ldr	r3, [pc, #212]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	4a34      	ldr	r2, [pc, #208]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007cb2:	f043 0304 	orr.w	r3, r3, #4
 8007cb6:	6193      	str	r3, [r2, #24]
 8007cb8:	4b32      	ldr	r3, [pc, #200]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	60bb      	str	r3, [r7, #8]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007cca:	f043 0308 	orr.w	r3, r3, #8
 8007cce:	6193      	str	r3, [r2, #24]
 8007cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8007d84 <MX_GPIO_Init+0x104>)
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007ce2:	4829      	ldr	r0, [pc, #164]	@ (8007d88 <MX_GPIO_Init+0x108>)
 8007ce4:	f001 fb4b 	bl	800937e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAX7219_GPIO_Port, CS_MAX7219_Pin, GPIO_PIN_RESET);
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007cee:	4827      	ldr	r0, [pc, #156]	@ (8007d8c <MX_GPIO_Init+0x10c>)
 8007cf0:	f001 fb45 	bl	800937e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007cf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d02:	2302      	movs	r3, #2
 8007d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	481e      	ldr	r0, [pc, #120]	@ (8007d88 <MX_GPIO_Init+0x108>)
 8007d0e:	f001 f99b 	bl	8009048 <HAL_GPIO_Init>

  /*Configure GPIO pins : JoeStick_Button_Pin LEFT_Button_Pin UP_Button_Pin RIGHT_Button_Pin */
  GPIO_InitStruct.Pin = JoeStick_Button_Pin|LEFT_Button_Pin|UP_Button_Pin|RIGHT_Button_Pin;
 8007d12:	f649 0308 	movw	r3, #38920	@ 0x9808
 8007d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d20:	f107 0310 	add.w	r3, r7, #16
 8007d24:	4619      	mov	r1, r3
 8007d26:	481a      	ldr	r0, [pc, #104]	@ (8007d90 <MX_GPIO_Init+0x110>)
 8007d28:	f001 f98e 	bl	8009048 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MAX7219_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin;
 8007d2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_MAX7219_GPIO_Port, &GPIO_InitStruct);
 8007d3e:	f107 0310 	add.w	r3, r7, #16
 8007d42:	4619      	mov	r1, r3
 8007d44:	4811      	ldr	r0, [pc, #68]	@ (8007d8c <MX_GPIO_Init+0x10c>)
 8007d46:	f001 f97f 	bl	8009048 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_Button_Pin MENU_Button_Pin PB5 */
  GPIO_InitStruct.Pin = DOWN_Button_Pin|MENU_Button_Pin|GPIO_PIN_5;
 8007d4a:	2338      	movs	r3, #56	@ 0x38
 8007d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d52:	2301      	movs	r3, #1
 8007d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	480b      	ldr	r0, [pc, #44]	@ (8007d8c <MX_GPIO_Init+0x10c>)
 8007d5e:	f001 f973 	bl	8009048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MP3_Busy_Pin */
  GPIO_InitStruct.Pin = MP3_Busy_Pin;
 8007d62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MP3_Busy_GPIO_Port, &GPIO_InitStruct);
 8007d70:	f107 0310 	add.w	r3, r7, #16
 8007d74:	4619      	mov	r1, r3
 8007d76:	4805      	ldr	r0, [pc, #20]	@ (8007d8c <MX_GPIO_Init+0x10c>)
 8007d78:	f001 f966 	bl	8009048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007d7c:	bf00      	nop
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40021000 	.word	0x40021000
 8007d88:	40011000 	.word	0x40011000
 8007d8c:	40010c00 	.word	0x40010c00
 8007d90:	40010800 	.word	0x40010800

08007d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007d98:	b672      	cpsid	i
}
 8007d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007d9c:	bf00      	nop
 8007d9e:	e7fd      	b.n	8007d9c <Error_Handler+0x8>

08007da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007da6:	4b15      	ldr	r3, [pc, #84]	@ (8007dfc <HAL_MspInit+0x5c>)
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	4a14      	ldr	r2, [pc, #80]	@ (8007dfc <HAL_MspInit+0x5c>)
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	6193      	str	r3, [r2, #24]
 8007db2:	4b12      	ldr	r3, [pc, #72]	@ (8007dfc <HAL_MspInit+0x5c>)
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007dfc <HAL_MspInit+0x5c>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8007dfc <HAL_MspInit+0x5c>)
 8007dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc8:	61d3      	str	r3, [r2, #28]
 8007dca:	4b0c      	ldr	r3, [pc, #48]	@ (8007dfc <HAL_MspInit+0x5c>)
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	607b      	str	r3, [r7, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e00 <HAL_MspInit+0x60>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	4a04      	ldr	r2, [pc, #16]	@ (8007e00 <HAL_MspInit+0x60>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	40010000 	.word	0x40010000

08007e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e0c:	f107 0310 	add.w	r3, r7, #16
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	605a      	str	r2, [r3, #4]
 8007e16:	609a      	str	r2, [r3, #8]
 8007e18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a18      	ldr	r2, [pc, #96]	@ (8007e80 <HAL_ADC_MspInit+0x7c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d129      	bne.n	8007e78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007e24:	4b17      	ldr	r3, [pc, #92]	@ (8007e84 <HAL_ADC_MspInit+0x80>)
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	4a16      	ldr	r2, [pc, #88]	@ (8007e84 <HAL_ADC_MspInit+0x80>)
 8007e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e2e:	6193      	str	r3, [r2, #24]
 8007e30:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <HAL_ADC_MspInit+0x80>)
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e3c:	4b11      	ldr	r3, [pc, #68]	@ (8007e84 <HAL_ADC_MspInit+0x80>)
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	4a10      	ldr	r2, [pc, #64]	@ (8007e84 <HAL_ADC_MspInit+0x80>)
 8007e42:	f043 0304 	orr.w	r3, r3, #4
 8007e46:	6193      	str	r3, [r2, #24]
 8007e48:	4b0e      	ldr	r3, [pc, #56]	@ (8007e84 <HAL_ADC_MspInit+0x80>)
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8007e54:	2307      	movs	r3, #7
 8007e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e5c:	f107 0310 	add.w	r3, r7, #16
 8007e60:	4619      	mov	r1, r3
 8007e62:	4809      	ldr	r0, [pc, #36]	@ (8007e88 <HAL_ADC_MspInit+0x84>)
 8007e64:	f001 f8f0 	bl	8009048 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	2012      	movs	r0, #18
 8007e6e:	f001 f802 	bl	8008e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8007e72:	2012      	movs	r0, #18
 8007e74:	f001 f81b 	bl	8008eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007e78:	bf00      	nop
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	40012400 	.word	0x40012400
 8007e84:	40021000 	.word	0x40021000
 8007e88:	40010800 	.word	0x40010800

08007e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e94:	f107 0310 	add.w	r3, r7, #16
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a15      	ldr	r2, [pc, #84]	@ (8007efc <HAL_I2C_MspInit+0x70>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d123      	bne.n	8007ef4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eac:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <HAL_I2C_MspInit+0x74>)
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	4a13      	ldr	r2, [pc, #76]	@ (8007f00 <HAL_I2C_MspInit+0x74>)
 8007eb2:	f043 0308 	orr.w	r3, r3, #8
 8007eb6:	6193      	str	r3, [r2, #24]
 8007eb8:	4b11      	ldr	r3, [pc, #68]	@ (8007f00 <HAL_I2C_MspInit+0x74>)
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ec4:	23c0      	movs	r3, #192	@ 0xc0
 8007ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ec8:	2312      	movs	r3, #18
 8007eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ed0:	f107 0310 	add.w	r3, r7, #16
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	480b      	ldr	r0, [pc, #44]	@ (8007f04 <HAL_I2C_MspInit+0x78>)
 8007ed8:	f001 f8b6 	bl	8009048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007edc:	4b08      	ldr	r3, [pc, #32]	@ (8007f00 <HAL_I2C_MspInit+0x74>)
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	4a07      	ldr	r2, [pc, #28]	@ (8007f00 <HAL_I2C_MspInit+0x74>)
 8007ee2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ee6:	61d3      	str	r3, [r2, #28]
 8007ee8:	4b05      	ldr	r3, [pc, #20]	@ (8007f00 <HAL_I2C_MspInit+0x74>)
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007ef4:	bf00      	nop
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40005400 	.word	0x40005400
 8007f00:	40021000 	.word	0x40021000
 8007f04:	40010c00 	.word	0x40010c00

08007f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f10:	f107 0310 	add.w	r3, r7, #16
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	609a      	str	r2, [r3, #8]
 8007f1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1a      	ldr	r2, [pc, #104]	@ (8007f8c <HAL_SPI_MspInit+0x84>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d12c      	bne.n	8007f82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f28:	4b19      	ldr	r3, [pc, #100]	@ (8007f90 <HAL_SPI_MspInit+0x88>)
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4a18      	ldr	r2, [pc, #96]	@ (8007f90 <HAL_SPI_MspInit+0x88>)
 8007f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f32:	61d3      	str	r3, [r2, #28]
 8007f34:	4b16      	ldr	r3, [pc, #88]	@ (8007f90 <HAL_SPI_MspInit+0x88>)
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f40:	4b13      	ldr	r3, [pc, #76]	@ (8007f90 <HAL_SPI_MspInit+0x88>)
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	4a12      	ldr	r2, [pc, #72]	@ (8007f90 <HAL_SPI_MspInit+0x88>)
 8007f46:	f043 0308 	orr.w	r3, r3, #8
 8007f4a:	6193      	str	r3, [r2, #24]
 8007f4c:	4b10      	ldr	r3, [pc, #64]	@ (8007f90 <HAL_SPI_MspInit+0x88>)
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = CLK_MAX7219_Pin|Din_MAX7219_Pin;
 8007f58:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8007f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f62:	2303      	movs	r3, #3
 8007f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f66:	f107 0310 	add.w	r3, r7, #16
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4809      	ldr	r0, [pc, #36]	@ (8007f94 <HAL_SPI_MspInit+0x8c>)
 8007f6e:	f001 f86b 	bl	8009048 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007f72:	2200      	movs	r2, #0
 8007f74:	2100      	movs	r1, #0
 8007f76:	2024      	movs	r0, #36	@ 0x24
 8007f78:	f000 ff7d 	bl	8008e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007f7c:	2024      	movs	r0, #36	@ 0x24
 8007f7e:	f000 ff96 	bl	8008eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007f82:	bf00      	nop
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40003800 	.word	0x40003800
 8007f90:	40021000 	.word	0x40021000
 8007f94:	40010c00 	.word	0x40010c00

08007f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fa0:	f107 0310 	add.w	r3, r7, #16
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	605a      	str	r2, [r3, #4]
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a20      	ldr	r2, [pc, #128]	@ (8008034 <HAL_UART_MspInit+0x9c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d139      	bne.n	800802c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8008038 <HAL_UART_MspInit+0xa0>)
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8008038 <HAL_UART_MspInit+0xa0>)
 8007fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fc2:	6193      	str	r3, [r2, #24]
 8007fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8008038 <HAL_UART_MspInit+0xa0>)
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd0:	4b19      	ldr	r3, [pc, #100]	@ (8008038 <HAL_UART_MspInit+0xa0>)
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	4a18      	ldr	r2, [pc, #96]	@ (8008038 <HAL_UART_MspInit+0xa0>)
 8007fd6:	f043 0304 	orr.w	r3, r3, #4
 8007fda:	6193      	str	r3, [r2, #24]
 8007fdc:	4b16      	ldr	r3, [pc, #88]	@ (8008038 <HAL_UART_MspInit+0xa0>)
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ff6:	f107 0310 	add.w	r3, r7, #16
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	480f      	ldr	r0, [pc, #60]	@ (800803c <HAL_UART_MspInit+0xa4>)
 8007ffe:	f001 f823 	bl	8009048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008010:	f107 0310 	add.w	r3, r7, #16
 8008014:	4619      	mov	r1, r3
 8008016:	4809      	ldr	r0, [pc, #36]	@ (800803c <HAL_UART_MspInit+0xa4>)
 8008018:	f001 f816 	bl	8009048 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	2025      	movs	r0, #37	@ 0x25
 8008022:	f000 ff28 	bl	8008e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008026:	2025      	movs	r0, #37	@ 0x25
 8008028:	f000 ff41 	bl	8008eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800802c:	bf00      	nop
 800802e:	3720      	adds	r7, #32
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40013800 	.word	0x40013800
 8008038:	40021000 	.word	0x40021000
 800803c:	40010800 	.word	0x40010800

08008040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <NMI_Handler+0x4>

08008048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008048:	b480      	push	{r7}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800804c:	bf00      	nop
 800804e:	e7fd      	b.n	800804c <HardFault_Handler+0x4>

08008050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <MemManage_Handler+0x4>

08008058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <BusFault_Handler+0x4>

08008060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <UsageFault_Handler+0x4>

08008068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800806c:	bf00      	nop
 800806e:	46bd      	mov	sp, r7
 8008070:	bc80      	pop	{r7}
 8008072:	4770      	bx	lr

08008074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008078:	bf00      	nop
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008084:	bf00      	nop
 8008086:	46bd      	mov	sp, r7
 8008088:	bc80      	pop	{r7}
 800808a:	4770      	bx	lr

0800808c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Timers.Timer_1_ms++;
 8008090:	4b04      	ldr	r3, [pc, #16]	@ (80080a4 <SysTick_Handler+0x18>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	b2da      	uxtb	r2, r3
 8008098:	4b02      	ldr	r3, [pc, #8]	@ (80080a4 <SysTick_Handler+0x18>)
 800809a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800809c:	f000 f9cc 	bl	8008438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080a0:	bf00      	nop
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	2000012c 	.word	0x2000012c

080080a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80080ae:	483a      	ldr	r0, [pc, #232]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 80080b0:	f000 fb9c 	bl	80087ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  ADC_ChannelConfTypeDef sConfig;
	  if(chanalIndex==0)
 80080b4:	4b39      	ldr	r3, [pc, #228]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d111      	bne.n	80080e0 <ADC1_2_IRQHandler+0x38>
	  {
		  Joestick.ADC_Data_X=HAL_ADC_GetValue(&hadc1);
 80080bc:	4836      	ldr	r0, [pc, #216]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 80080be:	f000 fb89 	bl	80087d4 <HAL_ADC_GetValue>
 80080c2:	4603      	mov	r3, r0
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	4b36      	ldr	r3, [pc, #216]	@ (80081a0 <ADC1_2_IRQHandler+0xf8>)
 80080c8:	801a      	strh	r2, [r3, #0]
		  sConfig.Channel = ADC_CHANNEL_1;
 80080ca:	2301      	movs	r3, #1
 80080cc:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 80080ce:	2301      	movs	r3, #1
 80080d0:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80080d2:	2307      	movs	r3, #7
 80080d4:	60fb      	str	r3, [r7, #12]
		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80080d6:	1d3b      	adds	r3, r7, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	482f      	ldr	r0, [pc, #188]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 80080dc:	f000 fc58 	bl	8008990 <HAL_ADC_ConfigChannel>
	  }

	  if(chanalIndex==1)
 80080e0:	4b2e      	ldr	r3, [pc, #184]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d111      	bne.n	800810c <ADC1_2_IRQHandler+0x64>
	  {
		Joestick.ADC_Data_Y=HAL_ADC_GetValue(&hadc1);
 80080e8:	482b      	ldr	r0, [pc, #172]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 80080ea:	f000 fb73 	bl	80087d4 <HAL_ADC_GetValue>
 80080ee:	4603      	mov	r3, r0
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	4b2b      	ldr	r3, [pc, #172]	@ (80081a0 <ADC1_2_IRQHandler+0xf8>)
 80080f4:	805a      	strh	r2, [r3, #2]
		sConfig.Channel = ADC_CHANNEL_2;
 80080f6:	2302      	movs	r3, #2
 80080f8:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80080fa:	2301      	movs	r3, #1
 80080fc:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80080fe:	2307      	movs	r3, #7
 8008100:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4824      	ldr	r0, [pc, #144]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 8008108:	f000 fc42 	bl	8008990 <HAL_ADC_ConfigChannel>
	  }

	  if(chanalIndex==2)
 800810c:	4b23      	ldr	r3, [pc, #140]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d12c      	bne.n	800816e <ADC1_2_IRQHandler+0xc6>
	  {
		if(Light_Sensor.isDataReady==false)
 8008114:	4b23      	ldr	r3, [pc, #140]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 8008116:	7e1b      	ldrb	r3, [r3, #24]
 8008118:	f083 0301 	eor.w	r3, r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d010      	beq.n	8008144 <ADC1_2_IRQHandler+0x9c>
		{
			Light_Sensor.data[Light_Sensor.dataIndex]=HAL_ADC_GetValue(&hadc1);
 8008122:	481d      	ldr	r0, [pc, #116]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 8008124:	f000 fb56 	bl	80087d4 <HAL_ADC_GetValue>
 8008128:	4601      	mov	r1, r0
 800812a:	4b1e      	ldr	r3, [pc, #120]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 800812c:	7ddb      	ldrb	r3, [r3, #23]
 800812e:	461a      	mov	r2, r3
 8008130:	b289      	uxth	r1, r1
 8008132:	4b1c      	ldr	r3, [pc, #112]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 8008134:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			Light_Sensor.dataIndex++;
 8008138:	4b1a      	ldr	r3, [pc, #104]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 800813a:	7ddb      	ldrb	r3, [r3, #23]
 800813c:	3301      	adds	r3, #1
 800813e:	b2da      	uxtb	r2, r3
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 8008142:	75da      	strb	r2, [r3, #23]
		}
		if(Light_Sensor.dataIndex==10)
 8008144:	4b17      	ldr	r3, [pc, #92]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 8008146:	7ddb      	ldrb	r3, [r3, #23]
 8008148:	2b0a      	cmp	r3, #10
 800814a:	d105      	bne.n	8008158 <ADC1_2_IRQHandler+0xb0>
		{
			Light_Sensor.isDataReady=true;
 800814c:	4b15      	ldr	r3, [pc, #84]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 800814e:	2201      	movs	r2, #1
 8008150:	761a      	strb	r2, [r3, #24]
			Light_Sensor.dataIndex=0;
 8008152:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <ADC1_2_IRQHandler+0xfc>)
 8008154:	2200      	movs	r2, #0
 8008156:	75da      	strb	r2, [r3, #23]
		}
		sConfig.Channel = ADC_CHANNEL_0;
 8008158:	2300      	movs	r3, #0
 800815a:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800815c:	2301      	movs	r3, #1
 800815e:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8008160:	2307      	movs	r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	4619      	mov	r1, r3
 8008168:	480b      	ldr	r0, [pc, #44]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 800816a:	f000 fc11 	bl	8008990 <HAL_ADC_ConfigChannel>
	  }
	  chanalIndex++;
 800816e:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	b2da      	uxtb	r2, r3
 8008176:	4b09      	ldr	r3, [pc, #36]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 8008178:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_IT(&hadc1);
 800817a:	4807      	ldr	r0, [pc, #28]	@ (8008198 <ADC1_2_IRQHandler+0xf0>)
 800817c:	f000 fa74 	bl	8008668 <HAL_ADC_Start_IT>

	  if(chanalIndex==3)
 8008180:	4b06      	ldr	r3, [pc, #24]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b03      	cmp	r3, #3
 8008186:	d102      	bne.n	800818e <ADC1_2_IRQHandler+0xe6>
		chanalIndex=0;
 8008188:	4b04      	ldr	r3, [pc, #16]	@ (800819c <ADC1_2_IRQHandler+0xf4>)
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 1 */
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200002c8 	.word	0x200002c8
 800819c:	200003ec 	.word	0x200003ec
 80081a0:	20000218 	.word	0x20000218
 80081a4:	20000220 	.word	0x20000220

080081a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80081ac:	4802      	ldr	r0, [pc, #8]	@ (80081b8 <SPI2_IRQHandler+0x10>)
 80081ae:	f003 fbed 	bl	800b98c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80081b2:	bf00      	nop
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	2000034c 	.word	0x2000034c

080081bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80081c0:	4802      	ldr	r0, [pc, #8]	@ (80081cc <USART1_IRQHandler+0x10>)
 80081c2:	f003 fec5 	bl	800bf50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200003a4 	.word	0x200003a4

080081d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  return 1;
 80081d4:	2301      	movs	r3, #1
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <_kill>:

int _kill(int pid, int sig)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80081e8:	f004 fe04 	bl	800cdf4 <__errno>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2216      	movs	r2, #22
 80081f0:	601a      	str	r2, [r3, #0]
  return -1;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <_exit>:

void _exit (int status)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008206:	f04f 31ff 	mov.w	r1, #4294967295
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff ffe7 	bl	80081de <_kill>
  while (1) {}    /* Make sure we hang here */
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <_exit+0x12>

08008214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008220:	2300      	movs	r3, #0
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e00a      	b.n	800823c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008226:	f3af 8000 	nop.w
 800822a:	4601      	mov	r1, r0
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	60ba      	str	r2, [r7, #8]
 8008232:	b2ca      	uxtb	r2, r1
 8008234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	3301      	adds	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	dbf0      	blt.n	8008226 <_read+0x12>
  }

  return len;
 8008244:	687b      	ldr	r3, [r7, #4]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e009      	b.n	8008274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	60ba      	str	r2, [r7, #8]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	3301      	adds	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	429a      	cmp	r2, r3
 800827a:	dbf1      	blt.n	8008260 <_write+0x12>
  }
  return len;
 800827c:	687b      	ldr	r3, [r7, #4]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <_close>:

int _close(int file)
{
 8008286:	b480      	push	{r7}
 8008288:	b083      	sub	sp, #12
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80082ac:	605a      	str	r2, [r3, #4]
  return 0;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr

080082ba <_isatty>:

int _isatty(int file)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80082c2:	2301      	movs	r3, #1
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b085      	sub	sp, #20
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr
	...

080082e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082f0:	4a14      	ldr	r2, [pc, #80]	@ (8008344 <_sbrk+0x5c>)
 80082f2:	4b15      	ldr	r3, [pc, #84]	@ (8008348 <_sbrk+0x60>)
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082fc:	4b13      	ldr	r3, [pc, #76]	@ (800834c <_sbrk+0x64>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008304:	4b11      	ldr	r3, [pc, #68]	@ (800834c <_sbrk+0x64>)
 8008306:	4a12      	ldr	r2, [pc, #72]	@ (8008350 <_sbrk+0x68>)
 8008308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800830a:	4b10      	ldr	r3, [pc, #64]	@ (800834c <_sbrk+0x64>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	429a      	cmp	r2, r3
 8008316:	d207      	bcs.n	8008328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008318:	f004 fd6c 	bl	800cdf4 <__errno>
 800831c:	4603      	mov	r3, r0
 800831e:	220c      	movs	r2, #12
 8008320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008322:	f04f 33ff 	mov.w	r3, #4294967295
 8008326:	e009      	b.n	800833c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008328:	4b08      	ldr	r3, [pc, #32]	@ (800834c <_sbrk+0x64>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <_sbrk+0x64>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4413      	add	r3, r2
 8008336:	4a05      	ldr	r2, [pc, #20]	@ (800834c <_sbrk+0x64>)
 8008338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800833a:	68fb      	ldr	r3, [r7, #12]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20005000 	.word	0x20005000
 8008348:	00000400 	.word	0x00000400
 800834c:	200003f0 	.word	0x200003f0
 8008350:	200005b0 	.word	0x200005b0

08008354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008358:	bf00      	nop
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008360:	f7ff fff8 	bl	8008354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008364:	480b      	ldr	r0, [pc, #44]	@ (8008394 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008366:	490c      	ldr	r1, [pc, #48]	@ (8008398 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008368:	4a0c      	ldr	r2, [pc, #48]	@ (800839c <LoopFillZerobss+0x16>)
  movs r3, #0
 800836a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800836c:	e002      	b.n	8008374 <LoopCopyDataInit>

0800836e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800836e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008372:	3304      	adds	r3, #4

08008374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008378:	d3f9      	bcc.n	800836e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800837a:	4a09      	ldr	r2, [pc, #36]	@ (80083a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800837c:	4c09      	ldr	r4, [pc, #36]	@ (80083a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800837e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008380:	e001      	b.n	8008386 <LoopFillZerobss>

08008382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008384:	3204      	adds	r2, #4

08008386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008388:	d3fb      	bcc.n	8008382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800838a:	f004 fd39 	bl	800ce00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800838e:	f7ff fb47 	bl	8007a20 <main>
  bx lr
 8008392:	4770      	bx	lr
  ldr r0, =_sdata
 8008394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008398:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800839c:	0800e4f0 	.word	0x0800e4f0
  ldr r2, =_sbss
 80083a0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80083a4:	200005ac 	.word	0x200005ac

080083a8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80083a8:	e7fe      	b.n	80083a8 <CAN1_RX1_IRQHandler>
	...

080083ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083b0:	4b08      	ldr	r3, [pc, #32]	@ (80083d4 <HAL_Init+0x28>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a07      	ldr	r2, [pc, #28]	@ (80083d4 <HAL_Init+0x28>)
 80083b6:	f043 0310 	orr.w	r3, r3, #16
 80083ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083bc:	2003      	movs	r0, #3
 80083be:	f000 fd4f 	bl	8008e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083c2:	200f      	movs	r0, #15
 80083c4:	f000 f808 	bl	80083d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80083c8:	f7ff fcea 	bl	8007da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40022000 	.word	0x40022000

080083d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083e0:	4b12      	ldr	r3, [pc, #72]	@ (800842c <HAL_InitTick+0x54>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4b12      	ldr	r3, [pc, #72]	@ (8008430 <HAL_InitTick+0x58>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80083f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fd67 	bl	8008eca <HAL_SYSTICK_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e00e      	b.n	8008424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b0f      	cmp	r3, #15
 800840a:	d80a      	bhi.n	8008422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800840c:	2200      	movs	r2, #0
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	f000 fd2f 	bl	8008e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008418:	4a06      	ldr	r2, [pc, #24]	@ (8008434 <HAL_InitTick+0x5c>)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e000      	b.n	8008424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20000098 	.word	0x20000098
 8008430:	200000a0 	.word	0x200000a0
 8008434:	2000009c 	.word	0x2000009c

08008438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800843c:	4b05      	ldr	r3, [pc, #20]	@ (8008454 <HAL_IncTick+0x1c>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	4b05      	ldr	r3, [pc, #20]	@ (8008458 <HAL_IncTick+0x20>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4413      	add	r3, r2
 8008448:	4a03      	ldr	r2, [pc, #12]	@ (8008458 <HAL_IncTick+0x20>)
 800844a:	6013      	str	r3, [r2, #0]
}
 800844c:	bf00      	nop
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr
 8008454:	200000a0 	.word	0x200000a0
 8008458:	200003f4 	.word	0x200003f4

0800845c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  return uwTick;
 8008460:	4b02      	ldr	r3, [pc, #8]	@ (800846c <HAL_GetTick+0x10>)
 8008462:	681b      	ldr	r3, [r3, #0]
}
 8008464:	4618      	mov	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	200003f4 	.word	0x200003f4

08008470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008478:	f7ff fff0 	bl	800845c <HAL_GetTick>
 800847c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008488:	d005      	beq.n	8008496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800848a:	4b0a      	ldr	r3, [pc, #40]	@ (80084b4 <HAL_Delay+0x44>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008496:	bf00      	nop
 8008498:	f7ff ffe0 	bl	800845c <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d8f7      	bhi.n	8008498 <HAL_Delay+0x28>
  {
  }
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200000a0 	.word	0x200000a0

080084b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e0be      	b.n	8008658 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff fc84 	bl	8007e04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fb99 	bl	8008c34 <ADC_ConversionStop_Disable>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 8099 	bne.w	8008646 <HAL_ADC_Init+0x18e>
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8095 	bne.w	8008646 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008520:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008524:	f023 0302 	bic.w	r3, r3, #2
 8008528:	f043 0202 	orr.w	r2, r3, #2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008538:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	7b1b      	ldrb	r3, [r3, #12]
 800853e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008540:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	4313      	orrs	r3, r2
 8008546:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008550:	d003      	beq.n	800855a <HAL_ADC_Init+0xa2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d102      	bne.n	8008560 <HAL_ADC_Init+0xa8>
 800855a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800855e:	e000      	b.n	8008562 <HAL_ADC_Init+0xaa>
 8008560:	2300      	movs	r3, #0
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d119      	bne.n	80085a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	7b1b      	ldrb	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d109      	bne.n	800858c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	3b01      	subs	r3, #1
 800857e:	035a      	lsls	r2, r3, #13
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	e00b      	b.n	80085a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008590:	f043 0220 	orr.w	r2, r3, #32
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	f043 0201 	orr.w	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	4b28      	ldr	r3, [pc, #160]	@ (8008660 <HAL_ADC_Init+0x1a8>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d4:	d003      	beq.n	80085de <HAL_ADC_Init+0x126>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d104      	bne.n	80085e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	051b      	lsls	r3, r3, #20
 80085e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	4b18      	ldr	r3, [pc, #96]	@ (8008664 <HAL_ADC_Init+0x1ac>)
 8008604:	4013      	ands	r3, r2
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d10b      	bne.n	8008624 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	f043 0201 	orr.w	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008622:	e018      	b.n	8008656 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008628:	f023 0312 	bic.w	r3, r3, #18
 800862c:	f043 0210 	orr.w	r2, r3, #16
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	f043 0201 	orr.w	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008644:	e007      	b.n	8008656 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864a:	f043 0210 	orr.w	r2, r3, #16
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	ffe1f7fd 	.word	0xffe1f7fd
 8008664:	ff1f0efe 	.word	0xff1f0efe

08008668 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_ADC_Start_IT+0x1a>
 800867e:	2302      	movs	r3, #2
 8008680:	e0a0      	b.n	80087c4 <HAL_ADC_Start_IT+0x15c>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa78 	bl	8008b80 <ADC_Enable>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 808f 	bne.w	80087ba <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086a4:	f023 0301 	bic.w	r3, r3, #1
 80086a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a45      	ldr	r2, [pc, #276]	@ (80087cc <HAL_ADC_Start_IT+0x164>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d105      	bne.n	80086c6 <HAL_ADC_Start_IT+0x5e>
 80086ba:	4b45      	ldr	r3, [pc, #276]	@ (80087d0 <HAL_ADC_Start_IT+0x168>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d115      	bne.n	80086f2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d026      	beq.n	800872e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80086e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80086f0:	e01d      	b.n	800872e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a33      	ldr	r2, [pc, #204]	@ (80087d0 <HAL_ADC_Start_IT+0x168>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d004      	beq.n	8008712 <HAL_ADC_Start_IT+0xaa>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2f      	ldr	r2, [pc, #188]	@ (80087cc <HAL_ADC_Start_IT+0x164>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d10d      	bne.n	800872e <HAL_ADC_Start_IT+0xc6>
 8008712:	4b2f      	ldr	r3, [pc, #188]	@ (80087d0 <HAL_ADC_Start_IT+0x168>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008722:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008726:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d006      	beq.n	8008748 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873e:	f023 0206 	bic.w	r2, r3, #6
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008746:	e002      	b.n	800874e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f06f 0202 	mvn.w	r2, #2
 800875e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0220 	orr.w	r2, r2, #32
 800876e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800877a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800877e:	d113      	bne.n	80087a8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008784:	4a11      	ldr	r2, [pc, #68]	@ (80087cc <HAL_ADC_Start_IT+0x164>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d105      	bne.n	8008796 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800878a:	4b11      	ldr	r3, [pc, #68]	@ (80087d0 <HAL_ADC_Start_IT+0x168>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008792:	2b00      	cmp	r3, #0
 8008794:	d108      	bne.n	80087a8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80087a4:	609a      	str	r2, [r3, #8]
 80087a6:	e00c      	b.n	80087c2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	e003      	b.n	80087c2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40012800 	.word	0x40012800
 80087d0:	40012400 	.word	0x40012400

080087d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d03e      	beq.n	800888c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d039      	beq.n	800888c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800883a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800883e:	d11d      	bne.n	800887c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008844:	2b00      	cmp	r3, #0
 8008846:	d119      	bne.n	800887c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0220 	bic.w	r2, r2, #32
 8008856:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	f043 0201 	orr.w	r2, r3, #1
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f874 	bl	800896a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f06f 0212 	mvn.w	r2, #18
 800888a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008892:	2b00      	cmp	r3, #0
 8008894:	d04d      	beq.n	8008932 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d048      	beq.n	8008932 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a4:	f003 0310 	and.w	r3, r3, #16
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d105      	bne.n	80088b8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80088c2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80088c6:	d012      	beq.n	80088ee <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d125      	bne.n	8008922 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80088e0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80088e4:	d11d      	bne.n	8008922 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d119      	bne.n	8008922 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088fc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008902:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d105      	bne.n	8008922 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	f043 0201 	orr.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f9c7 	bl	8008cb6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f06f 020c 	mvn.w	r2, #12
 8008930:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	d012      	beq.n	8008962 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00d      	beq.n	8008962 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f812 	bl	800897c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f06f 0201 	mvn.w	r2, #1
 8008960:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr
	...

08008990 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d101      	bne.n	80089b0 <HAL_ADC_ConfigChannel+0x20>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e0dc      	b.n	8008b6a <HAL_ADC_ConfigChannel+0x1da>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b06      	cmp	r3, #6
 80089be:	d81c      	bhi.n	80089fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	3b05      	subs	r3, #5
 80089d2:	221f      	movs	r2, #31
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	43db      	mvns	r3, r3
 80089da:	4019      	ands	r1, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	3b05      	subs	r3, #5
 80089ec:	fa00 f203 	lsl.w	r2, r0, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80089f8:	e03c      	b.n	8008a74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2b0c      	cmp	r3, #12
 8008a00:	d81c      	bhi.n	8008a3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	3b23      	subs	r3, #35	@ 0x23
 8008a14:	221f      	movs	r2, #31
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	4019      	ands	r1, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	3b23      	subs	r3, #35	@ 0x23
 8008a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a3a:	e01b      	b.n	8008a74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	3b41      	subs	r3, #65	@ 0x41
 8008a4e:	221f      	movs	r2, #31
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	43db      	mvns	r3, r3
 8008a56:	4019      	ands	r1, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	6818      	ldr	r0, [r3, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	4613      	mov	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	3b41      	subs	r3, #65	@ 0x41
 8008a68:	fa00 f203 	lsl.w	r2, r0, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b09      	cmp	r3, #9
 8008a7a:	d91c      	bls.n	8008ab6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68d9      	ldr	r1, [r3, #12]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4613      	mov	r3, r2
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3b1e      	subs	r3, #30
 8008a8e:	2207      	movs	r2, #7
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	43db      	mvns	r3, r3
 8008a96:	4019      	ands	r1, r3
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	6898      	ldr	r0, [r3, #8]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3b1e      	subs	r3, #30
 8008aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	60da      	str	r2, [r3, #12]
 8008ab4:	e019      	b.n	8008aea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6919      	ldr	r1, [r3, #16]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	4413      	add	r3, r2
 8008ac6:	2207      	movs	r2, #7
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	43db      	mvns	r3, r3
 8008ace:	4019      	ands	r1, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6898      	ldr	r0, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	4413      	add	r3, r2
 8008ade:	fa00 f203 	lsl.w	r2, r0, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d003      	beq.n	8008afa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008af6:	2b11      	cmp	r3, #17
 8008af8:	d132      	bne.n	8008b60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a1d      	ldr	r2, [pc, #116]	@ (8008b74 <HAL_ADC_ConfigChannel+0x1e4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d125      	bne.n	8008b50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d126      	bne.n	8008b60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008b20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d11a      	bne.n	8008b60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008b2a:	4b13      	ldr	r3, [pc, #76]	@ (8008b78 <HAL_ADC_ConfigChannel+0x1e8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a13      	ldr	r2, [pc, #76]	@ (8008b7c <HAL_ADC_ConfigChannel+0x1ec>)
 8008b30:	fba2 2303 	umull	r2, r3, r2, r3
 8008b34:	0c9a      	lsrs	r2, r3, #18
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008b40:	e002      	b.n	8008b48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f9      	bne.n	8008b42 <HAL_ADC_ConfigChannel+0x1b2>
 8008b4e:	e007      	b.n	8008b60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	f043 0220 	orr.w	r2, r3, #32
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr
 8008b74:	40012400 	.word	0x40012400
 8008b78:	20000098 	.word	0x20000098
 8008b7c:	431bde83 	.word	0x431bde83

08008b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d040      	beq.n	8008c20 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f042 0201 	orr.w	r2, r2, #1
 8008bac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008bae:	4b1f      	ldr	r3, [pc, #124]	@ (8008c2c <ADC_Enable+0xac>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008c30 <ADC_Enable+0xb0>)
 8008bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb8:	0c9b      	lsrs	r3, r3, #18
 8008bba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008bbc:	e002      	b.n	8008bc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f9      	bne.n	8008bbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008bca:	f7ff fc47 	bl	800845c <HAL_GetTick>
 8008bce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008bd0:	e01f      	b.n	8008c12 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008bd2:	f7ff fc43 	bl	800845c <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d918      	bls.n	8008c12 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d011      	beq.n	8008c12 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf2:	f043 0210 	orr.w	r2, r3, #16
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	f043 0201 	orr.w	r2, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e007      	b.n	8008c22 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d1d8      	bne.n	8008bd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000098 	.word	0x20000098
 8008c30:	431bde83 	.word	0x431bde83

08008c34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d12e      	bne.n	8008cac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0201 	bic.w	r2, r2, #1
 8008c5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008c5e:	f7ff fbfd 	bl	800845c <HAL_GetTick>
 8008c62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008c64:	e01b      	b.n	8008c9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008c66:	f7ff fbf9 	bl	800845c <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d914      	bls.n	8008c9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d10d      	bne.n	8008c9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c86:	f043 0210 	orr.w	r2, r3, #16
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	f043 0201 	orr.w	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e007      	b.n	8008cae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d0dc      	beq.n	8008c66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bc80      	pop	{r7}
 8008cc6:	4770      	bx	lr

08008cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <__NVIC_SetPriorityGrouping+0x44>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cfa:	4a04      	ldr	r2, [pc, #16]	@ (8008d0c <__NVIC_SetPriorityGrouping+0x44>)
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	60d3      	str	r3, [r2, #12]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	e000ed00 	.word	0xe000ed00

08008d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d14:	4b04      	ldr	r3, [pc, #16]	@ (8008d28 <__NVIC_GetPriorityGrouping+0x18>)
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	f003 0307 	and.w	r3, r3, #7
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	e000ed00 	.word	0xe000ed00

08008d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db0b      	blt.n	8008d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	f003 021f 	and.w	r2, r3, #31
 8008d44:	4906      	ldr	r1, [pc, #24]	@ (8008d60 <__NVIC_EnableIRQ+0x34>)
 8008d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8008d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr
 8008d60:	e000e100 	.word	0xe000e100

08008d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db0a      	blt.n	8008d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	490c      	ldr	r1, [pc, #48]	@ (8008db0 <__NVIC_SetPriority+0x4c>)
 8008d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d82:	0112      	lsls	r2, r2, #4
 8008d84:	b2d2      	uxtb	r2, r2
 8008d86:	440b      	add	r3, r1
 8008d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d8c:	e00a      	b.n	8008da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	4908      	ldr	r1, [pc, #32]	@ (8008db4 <__NVIC_SetPriority+0x50>)
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	0112      	lsls	r2, r2, #4
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	440b      	add	r3, r1
 8008da2:	761a      	strb	r2, [r3, #24]
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	e000e100 	.word	0xe000e100
 8008db4:	e000ed00 	.word	0xe000ed00

08008db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b089      	sub	sp, #36	@ 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f1c3 0307 	rsb	r3, r3, #7
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	bf28      	it	cs
 8008dd6:	2304      	movcs	r3, #4
 8008dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	2b06      	cmp	r3, #6
 8008de0:	d902      	bls.n	8008de8 <NVIC_EncodePriority+0x30>
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	3b03      	subs	r3, #3
 8008de6:	e000      	b.n	8008dea <NVIC_EncodePriority+0x32>
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	fa02 f303 	lsl.w	r3, r2, r3
 8008df6:	43da      	mvns	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	401a      	ands	r2, r3
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e00:	f04f 31ff 	mov.w	r1, #4294967295
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0a:	43d9      	mvns	r1, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e10:	4313      	orrs	r3, r2
         );
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3724      	adds	r7, #36	@ 0x24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr

08008e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e2c:	d301      	bcc.n	8008e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e00f      	b.n	8008e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e32:	4a0a      	ldr	r2, [pc, #40]	@ (8008e5c <SysTick_Config+0x40>)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e3a:	210f      	movs	r1, #15
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	f7ff ff90 	bl	8008d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e44:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <SysTick_Config+0x40>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e4a:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <SysTick_Config+0x40>)
 8008e4c:	2207      	movs	r2, #7
 8008e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	e000e010 	.word	0xe000e010

08008e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff ff2d 	bl	8008cc8 <__NVIC_SetPriorityGrouping>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e88:	f7ff ff42 	bl	8008d10 <__NVIC_GetPriorityGrouping>
 8008e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	6978      	ldr	r0, [r7, #20]
 8008e94:	f7ff ff90 	bl	8008db8 <NVIC_EncodePriority>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff ff5f 	bl	8008d64 <__NVIC_SetPriority>
}
 8008ea6:	bf00      	nop
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff ff35 	bl	8008d2c <__NVIC_EnableIRQ>
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff ffa2 	bl	8008e1c <SysTick_Config>
 8008ed8:	4603      	mov	r3, r0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d008      	beq.n	8008f0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e020      	b.n	8008f4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 020e 	bic.w	r2, r2, #14
 8008f1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0201 	bic.w	r2, r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f34:	2101      	movs	r1, #1
 8008f36:	fa01 f202 	lsl.w	r2, r1, r2
 8008f3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr

08008f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d005      	beq.n	8008f7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2204      	movs	r2, #4
 8008f74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
 8008f7a:	e051      	b.n	8009020 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 020e 	bic.w	r2, r2, #14
 8008f8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0201 	bic.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a22      	ldr	r2, [pc, #136]	@ (800902c <HAL_DMA_Abort_IT+0xd4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d029      	beq.n	8008ffa <HAL_DMA_Abort_IT+0xa2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a21      	ldr	r2, [pc, #132]	@ (8009030 <HAL_DMA_Abort_IT+0xd8>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d022      	beq.n	8008ff6 <HAL_DMA_Abort_IT+0x9e>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8009034 <HAL_DMA_Abort_IT+0xdc>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d01a      	beq.n	8008ff0 <HAL_DMA_Abort_IT+0x98>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8009038 <HAL_DMA_Abort_IT+0xe0>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d012      	beq.n	8008fea <HAL_DMA_Abort_IT+0x92>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800903c <HAL_DMA_Abort_IT+0xe4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_DMA_Abort_IT+0x8c>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8009040 <HAL_DMA_Abort_IT+0xe8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d102      	bne.n	8008fde <HAL_DMA_Abort_IT+0x86>
 8008fd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008fdc:	e00e      	b.n	8008ffc <HAL_DMA_Abort_IT+0xa4>
 8008fde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008fe2:	e00b      	b.n	8008ffc <HAL_DMA_Abort_IT+0xa4>
 8008fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008fe8:	e008      	b.n	8008ffc <HAL_DMA_Abort_IT+0xa4>
 8008fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fee:	e005      	b.n	8008ffc <HAL_DMA_Abort_IT+0xa4>
 8008ff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ff4:	e002      	b.n	8008ffc <HAL_DMA_Abort_IT+0xa4>
 8008ff6:	2310      	movs	r3, #16
 8008ff8:	e000      	b.n	8008ffc <HAL_DMA_Abort_IT+0xa4>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4a11      	ldr	r2, [pc, #68]	@ (8009044 <HAL_DMA_Abort_IT+0xec>)
 8008ffe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
    } 
  }
  return status;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40020008 	.word	0x40020008
 8009030:	4002001c 	.word	0x4002001c
 8009034:	40020030 	.word	0x40020030
 8009038:	40020044 	.word	0x40020044
 800903c:	40020058 	.word	0x40020058
 8009040:	4002006c 	.word	0x4002006c
 8009044:	40020000 	.word	0x40020000

08009048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009048:	b480      	push	{r7}
 800904a:	b08b      	sub	sp, #44	@ 0x2c
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009052:	2300      	movs	r3, #0
 8009054:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009056:	2300      	movs	r3, #0
 8009058:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800905a:	e169      	b.n	8009330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800905c:	2201      	movs	r2, #1
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	4013      	ands	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	429a      	cmp	r2, r3
 8009076:	f040 8158 	bne.w	800932a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	4a9a      	ldr	r2, [pc, #616]	@ (80092e8 <HAL_GPIO_Init+0x2a0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d05e      	beq.n	8009142 <HAL_GPIO_Init+0xfa>
 8009084:	4a98      	ldr	r2, [pc, #608]	@ (80092e8 <HAL_GPIO_Init+0x2a0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d875      	bhi.n	8009176 <HAL_GPIO_Init+0x12e>
 800908a:	4a98      	ldr	r2, [pc, #608]	@ (80092ec <HAL_GPIO_Init+0x2a4>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d058      	beq.n	8009142 <HAL_GPIO_Init+0xfa>
 8009090:	4a96      	ldr	r2, [pc, #600]	@ (80092ec <HAL_GPIO_Init+0x2a4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d86f      	bhi.n	8009176 <HAL_GPIO_Init+0x12e>
 8009096:	4a96      	ldr	r2, [pc, #600]	@ (80092f0 <HAL_GPIO_Init+0x2a8>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d052      	beq.n	8009142 <HAL_GPIO_Init+0xfa>
 800909c:	4a94      	ldr	r2, [pc, #592]	@ (80092f0 <HAL_GPIO_Init+0x2a8>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d869      	bhi.n	8009176 <HAL_GPIO_Init+0x12e>
 80090a2:	4a94      	ldr	r2, [pc, #592]	@ (80092f4 <HAL_GPIO_Init+0x2ac>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d04c      	beq.n	8009142 <HAL_GPIO_Init+0xfa>
 80090a8:	4a92      	ldr	r2, [pc, #584]	@ (80092f4 <HAL_GPIO_Init+0x2ac>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d863      	bhi.n	8009176 <HAL_GPIO_Init+0x12e>
 80090ae:	4a92      	ldr	r2, [pc, #584]	@ (80092f8 <HAL_GPIO_Init+0x2b0>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d046      	beq.n	8009142 <HAL_GPIO_Init+0xfa>
 80090b4:	4a90      	ldr	r2, [pc, #576]	@ (80092f8 <HAL_GPIO_Init+0x2b0>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d85d      	bhi.n	8009176 <HAL_GPIO_Init+0x12e>
 80090ba:	2b12      	cmp	r3, #18
 80090bc:	d82a      	bhi.n	8009114 <HAL_GPIO_Init+0xcc>
 80090be:	2b12      	cmp	r3, #18
 80090c0:	d859      	bhi.n	8009176 <HAL_GPIO_Init+0x12e>
 80090c2:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <HAL_GPIO_Init+0x80>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	08009143 	.word	0x08009143
 80090cc:	0800911d 	.word	0x0800911d
 80090d0:	0800912f 	.word	0x0800912f
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009177 	.word	0x08009177
 80090dc:	08009177 	.word	0x08009177
 80090e0:	08009177 	.word	0x08009177
 80090e4:	08009177 	.word	0x08009177
 80090e8:	08009177 	.word	0x08009177
 80090ec:	08009177 	.word	0x08009177
 80090f0:	08009177 	.word	0x08009177
 80090f4:	08009177 	.word	0x08009177
 80090f8:	08009177 	.word	0x08009177
 80090fc:	08009177 	.word	0x08009177
 8009100:	08009177 	.word	0x08009177
 8009104:	08009177 	.word	0x08009177
 8009108:	08009177 	.word	0x08009177
 800910c:	08009125 	.word	0x08009125
 8009110:	08009139 	.word	0x08009139
 8009114:	4a79      	ldr	r2, [pc, #484]	@ (80092fc <HAL_GPIO_Init+0x2b4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800911a:	e02c      	b.n	8009176 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	623b      	str	r3, [r7, #32]
          break;
 8009122:	e029      	b.n	8009178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	3304      	adds	r3, #4
 800912a:	623b      	str	r3, [r7, #32]
          break;
 800912c:	e024      	b.n	8009178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	3308      	adds	r3, #8
 8009134:	623b      	str	r3, [r7, #32]
          break;
 8009136:	e01f      	b.n	8009178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	330c      	adds	r3, #12
 800913e:	623b      	str	r3, [r7, #32]
          break;
 8009140:	e01a      	b.n	8009178 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800914a:	2304      	movs	r3, #4
 800914c:	623b      	str	r3, [r7, #32]
          break;
 800914e:	e013      	b.n	8009178 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d105      	bne.n	8009164 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009158:	2308      	movs	r3, #8
 800915a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	611a      	str	r2, [r3, #16]
          break;
 8009162:	e009      	b.n	8009178 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009164:	2308      	movs	r3, #8
 8009166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	615a      	str	r2, [r3, #20]
          break;
 800916e:	e003      	b.n	8009178 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009170:	2300      	movs	r3, #0
 8009172:	623b      	str	r3, [r7, #32]
          break;
 8009174:	e000      	b.n	8009178 <HAL_GPIO_Init+0x130>
          break;
 8009176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2bff      	cmp	r3, #255	@ 0xff
 800917c:	d801      	bhi.n	8009182 <HAL_GPIO_Init+0x13a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	e001      	b.n	8009186 <HAL_GPIO_Init+0x13e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3304      	adds	r3, #4
 8009186:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	2bff      	cmp	r3, #255	@ 0xff
 800918c:	d802      	bhi.n	8009194 <HAL_GPIO_Init+0x14c>
 800918e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	e002      	b.n	800919a <HAL_GPIO_Init+0x152>
 8009194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009196:	3b08      	subs	r3, #8
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	210f      	movs	r1, #15
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	fa01 f303 	lsl.w	r3, r1, r3
 80091a8:	43db      	mvns	r3, r3
 80091aa:	401a      	ands	r2, r3
 80091ac:	6a39      	ldr	r1, [r7, #32]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	fa01 f303 	lsl.w	r3, r1, r3
 80091b4:	431a      	orrs	r2, r3
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80b1 	beq.w	800932a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80091c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009300 <HAL_GPIO_Init+0x2b8>)
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	4a4c      	ldr	r2, [pc, #304]	@ (8009300 <HAL_GPIO_Init+0x2b8>)
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	6193      	str	r3, [r2, #24]
 80091d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009300 <HAL_GPIO_Init+0x2b8>)
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	60bb      	str	r3, [r7, #8]
 80091de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80091e0:	4a48      	ldr	r2, [pc, #288]	@ (8009304 <HAL_GPIO_Init+0x2bc>)
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	089b      	lsrs	r3, r3, #2
 80091e6:	3302      	adds	r3, #2
 80091e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	f003 0303 	and.w	r3, r3, #3
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	220f      	movs	r2, #15
 80091f8:	fa02 f303 	lsl.w	r3, r2, r3
 80091fc:	43db      	mvns	r3, r3
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4013      	ands	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a40      	ldr	r2, [pc, #256]	@ (8009308 <HAL_GPIO_Init+0x2c0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <HAL_GPIO_Init+0x1ec>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a3f      	ldr	r2, [pc, #252]	@ (800930c <HAL_GPIO_Init+0x2c4>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d00d      	beq.n	8009230 <HAL_GPIO_Init+0x1e8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a3e      	ldr	r2, [pc, #248]	@ (8009310 <HAL_GPIO_Init+0x2c8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d007      	beq.n	800922c <HAL_GPIO_Init+0x1e4>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a3d      	ldr	r2, [pc, #244]	@ (8009314 <HAL_GPIO_Init+0x2cc>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d101      	bne.n	8009228 <HAL_GPIO_Init+0x1e0>
 8009224:	2303      	movs	r3, #3
 8009226:	e006      	b.n	8009236 <HAL_GPIO_Init+0x1ee>
 8009228:	2304      	movs	r3, #4
 800922a:	e004      	b.n	8009236 <HAL_GPIO_Init+0x1ee>
 800922c:	2302      	movs	r3, #2
 800922e:	e002      	b.n	8009236 <HAL_GPIO_Init+0x1ee>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <HAL_GPIO_Init+0x1ee>
 8009234:	2300      	movs	r3, #0
 8009236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009238:	f002 0203 	and.w	r2, r2, #3
 800923c:	0092      	lsls	r2, r2, #2
 800923e:	4093      	lsls	r3, r2
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009246:	492f      	ldr	r1, [pc, #188]	@ (8009304 <HAL_GPIO_Init+0x2bc>)
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	089b      	lsrs	r3, r3, #2
 800924c:	3302      	adds	r3, #2
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d006      	beq.n	800926e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009260:	4b2d      	ldr	r3, [pc, #180]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	492c      	ldr	r1, [pc, #176]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	4313      	orrs	r3, r2
 800926a:	608b      	str	r3, [r1, #8]
 800926c:	e006      	b.n	800927c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800926e:	4b2a      	ldr	r3, [pc, #168]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	43db      	mvns	r3, r3
 8009276:	4928      	ldr	r1, [pc, #160]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 8009278:	4013      	ands	r3, r2
 800927a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d006      	beq.n	8009296 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009288:	4b23      	ldr	r3, [pc, #140]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	4922      	ldr	r1, [pc, #136]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	4313      	orrs	r3, r2
 8009292:	60cb      	str	r3, [r1, #12]
 8009294:	e006      	b.n	80092a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009296:	4b20      	ldr	r3, [pc, #128]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	43db      	mvns	r3, r3
 800929e:	491e      	ldr	r1, [pc, #120]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d006      	beq.n	80092be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80092b0:	4b19      	ldr	r3, [pc, #100]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	4918      	ldr	r1, [pc, #96]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	604b      	str	r3, [r1, #4]
 80092bc:	e006      	b.n	80092cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80092be:	4b16      	ldr	r3, [pc, #88]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	43db      	mvns	r3, r3
 80092c6:	4914      	ldr	r1, [pc, #80]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092c8:	4013      	ands	r3, r2
 80092ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d021      	beq.n	800931c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80092d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	490e      	ldr	r1, [pc, #56]	@ (8009318 <HAL_GPIO_Init+0x2d0>)
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	600b      	str	r3, [r1, #0]
 80092e4:	e021      	b.n	800932a <HAL_GPIO_Init+0x2e2>
 80092e6:	bf00      	nop
 80092e8:	10320000 	.word	0x10320000
 80092ec:	10310000 	.word	0x10310000
 80092f0:	10220000 	.word	0x10220000
 80092f4:	10210000 	.word	0x10210000
 80092f8:	10120000 	.word	0x10120000
 80092fc:	10110000 	.word	0x10110000
 8009300:	40021000 	.word	0x40021000
 8009304:	40010000 	.word	0x40010000
 8009308:	40010800 	.word	0x40010800
 800930c:	40010c00 	.word	0x40010c00
 8009310:	40011000 	.word	0x40011000
 8009314:	40011400 	.word	0x40011400
 8009318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800931c:	4b0b      	ldr	r3, [pc, #44]	@ (800934c <HAL_GPIO_Init+0x304>)
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	43db      	mvns	r3, r3
 8009324:	4909      	ldr	r1, [pc, #36]	@ (800934c <HAL_GPIO_Init+0x304>)
 8009326:	4013      	ands	r3, r2
 8009328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932c:	3301      	adds	r3, #1
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009336:	fa22 f303 	lsr.w	r3, r2, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	f47f ae8e 	bne.w	800905c <HAL_GPIO_Init+0x14>
  }
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	372c      	adds	r7, #44	@ 0x2c
 8009346:	46bd      	mov	sp, r7
 8009348:	bc80      	pop	{r7}
 800934a:	4770      	bx	lr
 800934c:	40010400 	.word	0x40010400

08009350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	4013      	ands	r3, r2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009368:	2301      	movs	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
 800936c:	e001      	b.n	8009372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	bc80      	pop	{r7}
 800937c:	4770      	bx	lr

0800937e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	807b      	strh	r3, [r7, #2]
 800938a:	4613      	mov	r3, r2
 800938c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800938e:	787b      	ldrb	r3, [r7, #1]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009394:	887a      	ldrh	r2, [r7, #2]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800939a:	e003      	b.n	80093a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800939c:	887b      	ldrh	r3, [r7, #2]
 800939e:	041a      	lsls	r2, r3, #16
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	611a      	str	r2, [r3, #16]
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr
	...

080093b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e12b      	b.n	800961a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7fe fd58 	bl	8007e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2224      	movs	r2, #36	@ 0x24
 80093e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009414:	f002 f8b6 	bl	800b584 <HAL_RCC_GetPCLK1Freq>
 8009418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4a81      	ldr	r2, [pc, #516]	@ (8009624 <HAL_I2C_Init+0x274>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d807      	bhi.n	8009434 <HAL_I2C_Init+0x84>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a80      	ldr	r2, [pc, #512]	@ (8009628 <HAL_I2C_Init+0x278>)
 8009428:	4293      	cmp	r3, r2
 800942a:	bf94      	ite	ls
 800942c:	2301      	movls	r3, #1
 800942e:	2300      	movhi	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	e006      	b.n	8009442 <HAL_I2C_Init+0x92>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a7d      	ldr	r2, [pc, #500]	@ (800962c <HAL_I2C_Init+0x27c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	bf94      	ite	ls
 800943c:	2301      	movls	r3, #1
 800943e:	2300      	movhi	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e0e7      	b.n	800961a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4a78      	ldr	r2, [pc, #480]	@ (8009630 <HAL_I2C_Init+0x280>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	0c9b      	lsrs	r3, r3, #18
 8009454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	4a6a      	ldr	r2, [pc, #424]	@ (8009624 <HAL_I2C_Init+0x274>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d802      	bhi.n	8009484 <HAL_I2C_Init+0xd4>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	3301      	adds	r3, #1
 8009482:	e009      	b.n	8009498 <HAL_I2C_Init+0xe8>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800948a:	fb02 f303 	mul.w	r3, r2, r3
 800948e:	4a69      	ldr	r2, [pc, #420]	@ (8009634 <HAL_I2C_Init+0x284>)
 8009490:	fba2 2303 	umull	r2, r3, r2, r3
 8009494:	099b      	lsrs	r3, r3, #6
 8009496:	3301      	adds	r3, #1
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	430b      	orrs	r3, r1
 800949e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80094aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	495c      	ldr	r1, [pc, #368]	@ (8009624 <HAL_I2C_Init+0x274>)
 80094b4:	428b      	cmp	r3, r1
 80094b6:	d819      	bhi.n	80094ec <HAL_I2C_Init+0x13c>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	1e59      	subs	r1, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80094c6:	1c59      	adds	r1, r3, #1
 80094c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80094cc:	400b      	ands	r3, r1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <HAL_I2C_Init+0x138>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1e59      	subs	r1, r3, #1
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80094e0:	3301      	adds	r3, #1
 80094e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094e6:	e051      	b.n	800958c <HAL_I2C_Init+0x1dc>
 80094e8:	2304      	movs	r3, #4
 80094ea:	e04f      	b.n	800958c <HAL_I2C_Init+0x1dc>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d111      	bne.n	8009518 <HAL_I2C_Init+0x168>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	1e58      	subs	r0, r3, #1
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6859      	ldr	r1, [r3, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	440b      	add	r3, r1
 8009502:	fbb0 f3f3 	udiv	r3, r0, r3
 8009506:	3301      	adds	r3, #1
 8009508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800950c:	2b00      	cmp	r3, #0
 800950e:	bf0c      	ite	eq
 8009510:	2301      	moveq	r3, #1
 8009512:	2300      	movne	r3, #0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	e012      	b.n	800953e <HAL_I2C_Init+0x18e>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	1e58      	subs	r0, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6859      	ldr	r1, [r3, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	0099      	lsls	r1, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	fbb0 f3f3 	udiv	r3, r0, r3
 800952e:	3301      	adds	r3, #1
 8009530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009534:	2b00      	cmp	r3, #0
 8009536:	bf0c      	ite	eq
 8009538:	2301      	moveq	r3, #1
 800953a:	2300      	movne	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_I2C_Init+0x196>
 8009542:	2301      	movs	r3, #1
 8009544:	e022      	b.n	800958c <HAL_I2C_Init+0x1dc>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10e      	bne.n	800956c <HAL_I2C_Init+0x1bc>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1e58      	subs	r0, r3, #1
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6859      	ldr	r1, [r3, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	440b      	add	r3, r1
 800955c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009560:	3301      	adds	r3, #1
 8009562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800956a:	e00f      	b.n	800958c <HAL_I2C_Init+0x1dc>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	1e58      	subs	r0, r3, #1
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6859      	ldr	r1, [r3, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	0099      	lsls	r1, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009582:	3301      	adds	r3, #1
 8009584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009588:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	6809      	ldr	r1, [r1, #0]
 8009590:	4313      	orrs	r3, r2
 8009592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69da      	ldr	r2, [r3, #28]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80095ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6911      	ldr	r1, [r2, #16]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	68d2      	ldr	r2, [r2, #12]
 80095c6:	4311      	orrs	r1, r2
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	695a      	ldr	r2, [r3, #20]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	000186a0 	.word	0x000186a0
 8009628:	001e847f 	.word	0x001e847f
 800962c:	003d08ff 	.word	0x003d08ff
 8009630:	431bde83 	.word	0x431bde83
 8009634:	10624dd3 	.word	0x10624dd3

08009638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	607a      	str	r2, [r7, #4]
 8009642:	461a      	mov	r2, r3
 8009644:	460b      	mov	r3, r1
 8009646:	817b      	strh	r3, [r7, #10]
 8009648:	4613      	mov	r3, r2
 800964a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800964c:	f7fe ff06 	bl	800845c <HAL_GetTick>
 8009650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b20      	cmp	r3, #32
 800965c:	f040 80e0 	bne.w	8009820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2319      	movs	r3, #25
 8009666:	2201      	movs	r2, #1
 8009668:	4970      	ldr	r1, [pc, #448]	@ (800982c <HAL_I2C_Master_Transmit+0x1f4>)
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f001 f98a 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009676:	2302      	movs	r3, #2
 8009678:	e0d3      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_I2C_Master_Transmit+0x50>
 8009684:	2302      	movs	r3, #2
 8009686:	e0cc      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b01      	cmp	r3, #1
 800969c:	d007      	beq.n	80096ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80096bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2221      	movs	r2, #33	@ 0x21
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2210      	movs	r2, #16
 80096ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	893a      	ldrh	r2, [r7, #8]
 80096de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a50      	ldr	r2, [pc, #320]	@ (8009830 <HAL_I2C_Master_Transmit+0x1f8>)
 80096ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80096f0:	8979      	ldrh	r1, [r7, #10]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	6a3a      	ldr	r2, [r7, #32]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fe76 	bl	800a3e8 <I2C_MasterRequestWrite>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e08d      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009706:	2300      	movs	r3, #0
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800971c:	e066      	b.n	80097ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	6a39      	ldr	r1, [r7, #32]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f001 fa48 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00d      	beq.n	800974a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009732:	2b04      	cmp	r3, #4
 8009734:	d107      	bne.n	8009746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e06b      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974e:	781a      	ldrb	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b04      	cmp	r3, #4
 8009786:	d11b      	bne.n	80097c0 <HAL_I2C_Master_Transmit+0x188>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009794:	781a      	ldrb	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	6a39      	ldr	r1, [r7, #32]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f001 fa3f 	bl	800ac48 <I2C_WaitOnBTFFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00d      	beq.n	80097ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d107      	bne.n	80097e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e01a      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d194      	bne.n	800971e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e000      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009820:	2302      	movs	r3, #2
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	00100002 	.word	0x00100002
 8009830:	ffff0000 	.word	0xffff0000

08009834 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08c      	sub	sp, #48	@ 0x30
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	607a      	str	r2, [r7, #4]
 800983e:	461a      	mov	r2, r3
 8009840:	460b      	mov	r3, r1
 8009842:	817b      	strh	r3, [r7, #10]
 8009844:	4613      	mov	r3, r2
 8009846:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800984c:	f7fe fe06 	bl	800845c <HAL_GetTick>
 8009850:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b20      	cmp	r3, #32
 800985c:	f040 824b 	bne.w	8009cf6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2319      	movs	r3, #25
 8009866:	2201      	movs	r2, #1
 8009868:	497f      	ldr	r1, [pc, #508]	@ (8009a68 <HAL_I2C_Master_Receive+0x234>)
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f001 f88a 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8009876:	2302      	movs	r3, #2
 8009878:	e23e      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <HAL_I2C_Master_Receive+0x54>
 8009884:	2302      	movs	r3, #2
 8009886:	e237      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b01      	cmp	r3, #1
 800989c:	d007      	beq.n	80098ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0201 	orr.w	r2, r2, #1
 80098ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2222      	movs	r2, #34	@ 0x22
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2210      	movs	r2, #16
 80098ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	893a      	ldrh	r2, [r7, #8]
 80098de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a5f      	ldr	r2, [pc, #380]	@ (8009a6c <HAL_I2C_Master_Receive+0x238>)
 80098ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80098f0:	8979      	ldrh	r1, [r7, #10]
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fdf8 	bl	800a4ec <I2C_MasterRequestRead>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e1f8      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800990a:	2b00      	cmp	r3, #0
 800990c:	d113      	bne.n	8009936 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	e1cc      	b.n	8009cd0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800993a:	2b01      	cmp	r3, #1
 800993c:	d11e      	bne.n	800997c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800994c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800994e:	b672      	cpsid	i
}
 8009950:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009976:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009978:	b662      	cpsie	i
}
 800997a:	e035      	b.n	80099e8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009980:	2b02      	cmp	r3, #2
 8009982:	d11e      	bne.n	80099c2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009994:	b672      	cpsid	i
}
 8009996:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099be:	b662      	cpsie	i
}
 80099c0:	e012      	b.n	80099e8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099d2:	2300      	movs	r3, #0
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	613b      	str	r3, [r7, #16]
 80099e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80099e8:	e172      	b.n	8009cd0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	f200 811f 	bhi.w	8009c32 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d123      	bne.n	8009a44 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f001 f969 	bl	800acd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e173      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1a:	b2d2      	uxtb	r2, r2
 8009a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009a42:	e145      	b.n	8009cd0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d152      	bne.n	8009af2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	2200      	movs	r2, #0
 8009a54:	4906      	ldr	r1, [pc, #24]	@ (8009a70 <HAL_I2C_Master_Receive+0x23c>)
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 ff94 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d008      	beq.n	8009a74 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e148      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
 8009a66:	bf00      	nop
 8009a68:	00100002 	.word	0x00100002
 8009a6c:	ffff0000 	.word	0xffff0000
 8009a70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009a74:	b672      	cpsid	i
}
 8009a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691a      	ldr	r2, [r3, #16]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009aba:	b662      	cpsie	i
}
 8009abc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009af0:	e0ee      	b.n	8009cd0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af8:	2200      	movs	r2, #0
 8009afa:	4981      	ldr	r1, [pc, #516]	@ (8009d00 <HAL_I2C_Master_Receive+0x4cc>)
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 ff41 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e0f5      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b1c:	b672      	cpsid	i
}
 8009b1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b52:	4b6c      	ldr	r3, [pc, #432]	@ (8009d04 <HAL_I2C_Master_Receive+0x4d0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	08db      	lsrs	r3, r3, #3
 8009b58:	4a6b      	ldr	r2, [pc, #428]	@ (8009d08 <HAL_I2C_Master_Receive+0x4d4>)
 8009b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5e:	0a1a      	lsrs	r2, r3, #8
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	00da      	lsls	r2, r3, #3
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d118      	bne.n	8009baa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b92:	f043 0220 	orr.w	r2, r3, #32
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009b9a:	b662      	cpsie	i
}
 8009b9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e0a6      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d1d9      	bne.n	8009b6c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	691a      	ldr	r2, [r3, #16]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd2:	b2d2      	uxtb	r2, r2
 8009bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009bfa:	b662      	cpsie	i
}
 8009bfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	b2d2      	uxtb	r2, r2
 8009c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009c30:	e04e      	b.n	8009cd0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f001 f84e 	bl	800acd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e058      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	3b01      	subs	r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d124      	bne.n	8009cd0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d107      	bne.n	8009c9e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c9c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f47f ae88 	bne.w	80099ea <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e000      	b.n	8009cf8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8009cf6:	2302      	movs	r3, #2
  }
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3728      	adds	r7, #40	@ 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	00010004 	.word	0x00010004
 8009d04:	20000098 	.word	0x20000098
 8009d08:	14f8b589 	.word	0x14f8b589

08009d0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	817b      	strh	r3, [r7, #10]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	813b      	strh	r3, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d26:	f7fe fb99 	bl	800845c <HAL_GetTick>
 8009d2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	f040 80d9 	bne.w	8009eec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	2319      	movs	r3, #25
 8009d40:	2201      	movs	r2, #1
 8009d42:	496d      	ldr	r1, [pc, #436]	@ (8009ef8 <HAL_I2C_Mem_Write+0x1ec>)
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 fe1d 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009d50:	2302      	movs	r3, #2
 8009d52:	e0cc      	b.n	8009eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_I2C_Mem_Write+0x56>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e0c5      	b.n	8009eee <HAL_I2C_Mem_Write+0x1e2>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d007      	beq.n	8009d88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2221      	movs	r2, #33	@ 0x21
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2240      	movs	r2, #64	@ 0x40
 8009da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8009efc <HAL_I2C_Mem_Write+0x1f0>)
 8009dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009dca:	88f8      	ldrh	r0, [r7, #6]
 8009dcc:	893a      	ldrh	r2, [r7, #8]
 8009dce:	8979      	ldrh	r1, [r7, #10]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	4603      	mov	r3, r0
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fc54 	bl	800a688 <I2C_RequestMemoryWrite>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d052      	beq.n	8009e8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e081      	b.n	8009eee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 fee2 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00d      	beq.n	8009e16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d107      	bne.n	8009e12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e06b      	b.n	8009eee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e30:	3b01      	subs	r3, #1
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d11b      	bne.n	8009e8c <HAL_I2C_Mem_Write+0x180>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d017      	beq.n	8009e8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e60:	781a      	ldrb	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e76:	3b01      	subs	r3, #1
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	3b01      	subs	r3, #1
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1aa      	bne.n	8009dea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fed5 	bl	800ac48 <I2C_WaitOnBTFFlagUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00d      	beq.n	8009ec0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d107      	bne.n	8009ebc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009eba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e016      	b.n	8009eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e000      	b.n	8009eee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009eec:	2302      	movs	r3, #2
  }
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	00100002 	.word	0x00100002
 8009efc:	ffff0000 	.word	0xffff0000

08009f00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08c      	sub	sp, #48	@ 0x30
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	4608      	mov	r0, r1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	4603      	mov	r3, r0
 8009f10:	817b      	strh	r3, [r7, #10]
 8009f12:	460b      	mov	r3, r1
 8009f14:	813b      	strh	r3, [r7, #8]
 8009f16:	4613      	mov	r3, r2
 8009f18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f1e:	f7fe fa9d 	bl	800845c <HAL_GetTick>
 8009f22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	f040 8250 	bne.w	800a3d2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	2319      	movs	r3, #25
 8009f38:	2201      	movs	r2, #1
 8009f3a:	4982      	ldr	r1, [pc, #520]	@ (800a144 <HAL_I2C_Mem_Read+0x244>)
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 fd21 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e243      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_I2C_Mem_Read+0x5a>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e23c      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d007      	beq.n	8009f80 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f042 0201 	orr.w	r2, r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2222      	movs	r2, #34	@ 0x22
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2240      	movs	r2, #64	@ 0x40
 8009f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009faa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a62      	ldr	r2, [pc, #392]	@ (800a148 <HAL_I2C_Mem_Read+0x248>)
 8009fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fc2:	88f8      	ldrh	r0, [r7, #6]
 8009fc4:	893a      	ldrh	r2, [r7, #8]
 8009fc6:	8979      	ldrh	r1, [r7, #10]
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	9301      	str	r3, [sp, #4]
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fbee 	bl	800a7b4 <I2C_RequestMemoryRead>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e1f8      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d113      	bne.n	800a012 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fea:	2300      	movs	r3, #0
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	e1cc      	b.n	800a3ac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a016:	2b01      	cmp	r3, #1
 800a018:	d11e      	bne.n	800a058 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a028:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a02a:	b672      	cpsid	i
}
 800a02c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a02e:	2300      	movs	r3, #0
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	61bb      	str	r3, [r7, #24]
 800a042:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a054:	b662      	cpsie	i
}
 800a056:	e035      	b.n	800a0c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d11e      	bne.n	800a09e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a06e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a070:	b672      	cpsid	i
}
 800a072:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a074:	2300      	movs	r3, #0
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a098:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a09a:	b662      	cpsie	i
}
 800a09c:	e012      	b.n	800a0c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	613b      	str	r3, [r7, #16]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a0c4:	e172      	b.n	800a3ac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	f200 811f 	bhi.w	800a30e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d123      	bne.n	800a120 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 fdfb 	bl	800acd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e173      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	691a      	ldr	r2, [r3, #16]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a114:	b29b      	uxth	r3, r3
 800a116:	3b01      	subs	r3, #1
 800a118:	b29a      	uxth	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a11e:	e145      	b.n	800a3ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a124:	2b02      	cmp	r3, #2
 800a126:	d152      	bne.n	800a1ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	2200      	movs	r2, #0
 800a130:	4906      	ldr	r1, [pc, #24]	@ (800a14c <HAL_I2C_Mem_Read+0x24c>)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 fc26 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d008      	beq.n	800a150 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e148      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
 800a142:	bf00      	nop
 800a144:	00100002 	.word	0x00100002
 800a148:	ffff0000 	.word	0xffff0000
 800a14c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a150:	b672      	cpsid	i
}
 800a152:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691a      	ldr	r2, [r3, #16]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	3b01      	subs	r3, #1
 800a190:	b29a      	uxth	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a196:	b662      	cpsie	i
}
 800a198:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	691a      	ldr	r2, [r3, #16]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a4:	b2d2      	uxtb	r2, r2
 800a1a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a1cc:	e0ee      	b.n	800a3ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4981      	ldr	r1, [pc, #516]	@ (800a3dc <HAL_I2C_Mem_Read+0x4dc>)
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fbd3 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e0f5      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1f8:	b672      	cpsid	i
}
 800a1fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691a      	ldr	r2, [r3, #16]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a224:	b29b      	uxth	r3, r3
 800a226:	3b01      	subs	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a22e:	4b6c      	ldr	r3, [pc, #432]	@ (800a3e0 <HAL_I2C_Mem_Read+0x4e0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	4a6b      	ldr	r2, [pc, #428]	@ (800a3e4 <HAL_I2C_Mem_Read+0x4e4>)
 800a236:	fba2 2303 	umull	r2, r3, r2, r3
 800a23a:	0a1a      	lsrs	r2, r3, #8
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	00da      	lsls	r2, r3, #3
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d118      	bne.n	800a286 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2220      	movs	r2, #32
 800a25e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26e:	f043 0220 	orr.w	r2, r3, #32
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a276:	b662      	cpsie	i
}
 800a278:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e0a6      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b04      	cmp	r3, #4
 800a292:	d1d9      	bne.n	800a248 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691a      	ldr	r2, [r3, #16]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ae:	b2d2      	uxtb	r2, r2
 800a2b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a2d6:	b662      	cpsie	i
}
 800a2d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	691a      	ldr	r2, [r3, #16]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e4:	b2d2      	uxtb	r2, r2
 800a2e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a30c:	e04e      	b.n	800a3ac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fce0 	bl	800acd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e058      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	691a      	ldr	r2, [r3, #16]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a33e:	3b01      	subs	r3, #1
 800a340:	b29a      	uxth	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	f003 0304 	and.w	r3, r3, #4
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d124      	bne.n	800a3ac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a366:	2b03      	cmp	r3, #3
 800a368:	d107      	bne.n	800a37a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a378:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	691a      	ldr	r2, [r3, #16]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a396:	3b01      	subs	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f47f ae88 	bne.w	800a0c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e000      	b.n	800a3d4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800a3d2:	2302      	movs	r3, #2
  }
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3728      	adds	r7, #40	@ 0x28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	00010004 	.word	0x00010004
 800a3e0:	20000098 	.word	0x20000098
 800a3e4:	14f8b589 	.word	0x14f8b589

0800a3e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	607a      	str	r2, [r7, #4]
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b08      	cmp	r3, #8
 800a402:	d006      	beq.n	800a412 <I2C_MasterRequestWrite+0x2a>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d003      	beq.n	800a412 <I2C_MasterRequestWrite+0x2a>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a410:	d108      	bne.n	800a424 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	e00b      	b.n	800a43c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a428:	2b12      	cmp	r3, #18
 800a42a:	d107      	bne.n	800a43c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a43a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 fa9b 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00d      	beq.n	800a470 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a45e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a462:	d103      	bne.n	800a46c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a46a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e035      	b.n	800a4dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a478:	d108      	bne.n	800a48c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a47a:	897b      	ldrh	r3, [r7, #10]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a488:	611a      	str	r2, [r3, #16]
 800a48a:	e01b      	b.n	800a4c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a48c:	897b      	ldrh	r3, [r7, #10]
 800a48e:	11db      	asrs	r3, r3, #7
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 0306 	and.w	r3, r3, #6
 800a496:	b2db      	uxtb	r3, r3
 800a498:	f063 030f 	orn	r3, r3, #15
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	490e      	ldr	r1, [pc, #56]	@ (800a4e4 <I2C_MasterRequestWrite+0xfc>)
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 fae4 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e010      	b.n	800a4dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a4ba:	897b      	ldrh	r3, [r7, #10]
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	4907      	ldr	r1, [pc, #28]	@ (800a4e8 <I2C_MasterRequestWrite+0x100>)
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fad4 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	00010008 	.word	0x00010008
 800a4e8:	00010002 	.word	0x00010002

0800a4ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a500:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a510:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b08      	cmp	r3, #8
 800a516:	d006      	beq.n	800a526 <I2C_MasterRequestRead+0x3a>
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d003      	beq.n	800a526 <I2C_MasterRequestRead+0x3a>
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a524:	d108      	bne.n	800a538 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e00b      	b.n	800a550 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a53c:	2b11      	cmp	r3, #17
 800a53e:	d107      	bne.n	800a550 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a54e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 fa11 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00d      	beq.n	800a584 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a576:	d103      	bne.n	800a580 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a57e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e079      	b.n	800a678 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a58c:	d108      	bne.n	800a5a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a58e:	897b      	ldrh	r3, [r7, #10]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f043 0301 	orr.w	r3, r3, #1
 800a596:	b2da      	uxtb	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	611a      	str	r2, [r3, #16]
 800a59e:	e05f      	b.n	800a660 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a5a0:	897b      	ldrh	r3, [r7, #10]
 800a5a2:	11db      	asrs	r3, r3, #7
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f003 0306 	and.w	r3, r3, #6
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f063 030f 	orn	r3, r3, #15
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4930      	ldr	r1, [pc, #192]	@ (800a680 <I2C_MasterRequestRead+0x194>)
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 fa5a 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e054      	b.n	800a678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a5ce:	897b      	ldrh	r3, [r7, #10]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4929      	ldr	r1, [pc, #164]	@ (800a684 <I2C_MasterRequestRead+0x198>)
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fa4a 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e044      	b.n	800a678 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a612:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f9af 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00d      	beq.n	800a648 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a63a:	d103      	bne.n	800a644 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a642:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e017      	b.n	800a678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a648:	897b      	ldrh	r3, [r7, #10]
 800a64a:	11db      	asrs	r3, r3, #7
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f003 0306 	and.w	r3, r3, #6
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f063 030e 	orn	r3, r3, #14
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	4907      	ldr	r1, [pc, #28]	@ (800a684 <I2C_MasterRequestRead+0x198>)
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 fa06 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	00010008 	.word	0x00010008
 800a684:	00010002 	.word	0x00010002

0800a688 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	4608      	mov	r0, r1
 800a692:	4611      	mov	r1, r2
 800a694:	461a      	mov	r2, r3
 800a696:	4603      	mov	r3, r0
 800a698:	817b      	strh	r3, [r7, #10]
 800a69a:	460b      	mov	r3, r1
 800a69c:	813b      	strh	r3, [r7, #8]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 f960 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00d      	beq.n	800a6e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d8:	d103      	bne.n	800a6e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e05f      	b.n	800a7a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6e6:	897b      	ldrh	r3, [r7, #10]
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a6f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	6a3a      	ldr	r2, [r7, #32]
 800a6fa:	492d      	ldr	r1, [pc, #180]	@ (800a7b0 <I2C_RequestMemoryWrite+0x128>)
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f9bb 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e04c      	b.n	800a7a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a724:	6a39      	ldr	r1, [r7, #32]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fa46 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00d      	beq.n	800a74e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a736:	2b04      	cmp	r3, #4
 800a738:	d107      	bne.n	800a74a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e02b      	b.n	800a7a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a74e:	88fb      	ldrh	r3, [r7, #6]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d105      	bne.n	800a760 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a754:	893b      	ldrh	r3, [r7, #8]
 800a756:	b2da      	uxtb	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	611a      	str	r2, [r3, #16]
 800a75e:	e021      	b.n	800a7a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a760:	893b      	ldrh	r3, [r7, #8]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	b29b      	uxth	r3, r3
 800a766:	b2da      	uxtb	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a76e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a770:	6a39      	ldr	r1, [r7, #32]
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 fa20 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00d      	beq.n	800a79a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a782:	2b04      	cmp	r3, #4
 800a784:	d107      	bne.n	800a796 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e005      	b.n	800a7a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a79a:	893b      	ldrh	r3, [r7, #8]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	00010002 	.word	0x00010002

0800a7b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af02      	add	r7, sp, #8
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	4608      	mov	r0, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	817b      	strh	r3, [r7, #10]
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	813b      	strh	r3, [r7, #8]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a7dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 f8c2 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00d      	beq.n	800a822 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a814:	d103      	bne.n	800a81e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a81c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e0aa      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a822:	897b      	ldrh	r3, [r7, #10]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	6a3a      	ldr	r2, [r7, #32]
 800a836:	4952      	ldr	r1, [pc, #328]	@ (800a980 <I2C_RequestMemoryRead+0x1cc>)
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 f91d 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e097      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a860:	6a39      	ldr	r1, [r7, #32]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 f9a8 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00d      	beq.n	800a88a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a872:	2b04      	cmp	r3, #4
 800a874:	d107      	bne.n	800a886 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e076      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d105      	bne.n	800a89c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a890:	893b      	ldrh	r3, [r7, #8]
 800a892:	b2da      	uxtb	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	611a      	str	r2, [r3, #16]
 800a89a:	e021      	b.n	800a8e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a89c:	893b      	ldrh	r3, [r7, #8]
 800a89e:	0a1b      	lsrs	r3, r3, #8
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8ac:	6a39      	ldr	r1, [r7, #32]
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f982 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00d      	beq.n	800a8d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d107      	bne.n	800a8d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e050      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8d6:	893b      	ldrh	r3, [r7, #8]
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8e2:	6a39      	ldr	r1, [r7, #32]
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f967 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00d      	beq.n	800a90c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d107      	bne.n	800a908 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a906:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e035      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a91a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	2200      	movs	r2, #0
 800a924:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f82b 	bl	800a984 <I2C_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00d      	beq.n	800a950 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a942:	d103      	bne.n	800a94c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a94a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e013      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a950:	897b      	ldrh	r3, [r7, #10]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f043 0301 	orr.w	r3, r3, #1
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	6a3a      	ldr	r2, [r7, #32]
 800a964:	4906      	ldr	r1, [pc, #24]	@ (800a980 <I2C_RequestMemoryRead+0x1cc>)
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f886 	bl	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	00010002 	.word	0x00010002

0800a984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a994:	e048      	b.n	800aa28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d044      	beq.n	800aa28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a99e:	f7fd fd5d 	bl	800845c <HAL_GetTick>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d302      	bcc.n	800a9b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d139      	bne.n	800aa28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	0c1b      	lsrs	r3, r3, #16
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d10d      	bne.n	800a9da <I2C_WaitOnFlagUntilTimeout+0x56>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	43da      	mvns	r2, r3
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bf0c      	ite	eq
 800a9d0:	2301      	moveq	r3, #1
 800a9d2:	2300      	movne	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	e00c      	b.n	800a9f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	43da      	mvns	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bf0c      	ite	eq
 800a9ec:	2301      	moveq	r3, #1
 800a9ee:	2300      	movne	r3, #0
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d116      	bne.n	800aa28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2220      	movs	r2, #32
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa14:	f043 0220 	orr.w	r2, r3, #32
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e023      	b.n	800aa70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	0c1b      	lsrs	r3, r3, #16
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d10d      	bne.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0xca>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	43da      	mvns	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bf0c      	ite	eq
 800aa44:	2301      	moveq	r3, #1
 800aa46:	2300      	movne	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	e00c      	b.n	800aa68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	43da      	mvns	r2, r3
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf0c      	ite	eq
 800aa60:	2301      	moveq	r3, #1
 800aa62:	2300      	movne	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	461a      	mov	r2, r3
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d093      	beq.n	800a996 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa86:	e071      	b.n	800ab6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa96:	d123      	bne.n	800aae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aacc:	f043 0204 	orr.w	r2, r3, #4
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e067      	b.n	800abb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae6:	d041      	beq.n	800ab6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aae8:	f7fd fcb8 	bl	800845c <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d302      	bcc.n	800aafe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d136      	bne.n	800ab6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	0c1b      	lsrs	r3, r3, #16
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d10c      	bne.n	800ab22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	43da      	mvns	r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	4013      	ands	r3, r2
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bf14      	ite	ne
 800ab1a:	2301      	movne	r3, #1
 800ab1c:	2300      	moveq	r3, #0
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	e00b      	b.n	800ab3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	43da      	mvns	r2, r3
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bf14      	ite	ne
 800ab34:	2301      	movne	r3, #1
 800ab36:	2300      	moveq	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d016      	beq.n	800ab6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab58:	f043 0220 	orr.w	r2, r3, #32
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e021      	b.n	800abb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d10c      	bne.n	800ab90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	43da      	mvns	r2, r3
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	4013      	ands	r3, r2
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bf14      	ite	ne
 800ab88:	2301      	movne	r3, #1
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	e00b      	b.n	800aba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	43da      	mvns	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bf14      	ite	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	2300      	moveq	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f47f af6d 	bne.w	800aa88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abc4:	e034      	b.n	800ac30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 f8e3 	bl	800ad92 <I2C_IsAcknowledgeFailed>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e034      	b.n	800ac40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d028      	beq.n	800ac30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abde:	f7fd fc3d 	bl	800845c <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	429a      	cmp	r2, r3
 800abec:	d302      	bcc.n	800abf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11d      	bne.n	800ac30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abfe:	2b80      	cmp	r3, #128	@ 0x80
 800ac00:	d016      	beq.n	800ac30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2220      	movs	r2, #32
 800ac0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac1c:	f043 0220 	orr.w	r2, r3, #32
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e007      	b.n	800ac40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac3a:	2b80      	cmp	r3, #128	@ 0x80
 800ac3c:	d1c3      	bne.n	800abc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac54:	e034      	b.n	800acc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 f89b 	bl	800ad92 <I2C_IsAcknowledgeFailed>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e034      	b.n	800acd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6c:	d028      	beq.n	800acc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac6e:	f7fd fbf5 	bl	800845c <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d302      	bcc.n	800ac84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d11d      	bne.n	800acc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d016      	beq.n	800acc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acac:	f043 0220 	orr.w	r2, r3, #32
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e007      	b.n	800acd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	2b04      	cmp	r3, #4
 800accc:	d1c3      	bne.n	800ac56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ace4:	e049      	b.n	800ad7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	f003 0310 	and.w	r3, r3, #16
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d119      	bne.n	800ad28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f06f 0210 	mvn.w	r2, #16
 800acfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e030      	b.n	800ad8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad28:	f7fd fb98 	bl	800845c <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d302      	bcc.n	800ad3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d11d      	bne.n	800ad7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad48:	2b40      	cmp	r3, #64	@ 0x40
 800ad4a:	d016      	beq.n	800ad7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad66:	f043 0220 	orr.w	r2, r3, #32
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e007      	b.n	800ad8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad84:	2b40      	cmp	r3, #64	@ 0x40
 800ad86:	d1ae      	bne.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ada4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ada8:	d11b      	bne.n	800ade2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800adb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2220      	movs	r2, #32
 800adbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adce:	f043 0204 	orr.w	r2, r3, #4
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	bc80      	pop	{r7}
 800adec:	4770      	bx	lr
	...

0800adf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e272      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 8087 	beq.w	800af1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ae10:	4b92      	ldr	r3, [pc, #584]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f003 030c 	and.w	r3, r3, #12
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	d00c      	beq.n	800ae36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ae1c:	4b8f      	ldr	r3, [pc, #572]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f003 030c 	and.w	r3, r3, #12
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d112      	bne.n	800ae4e <HAL_RCC_OscConfig+0x5e>
 800ae28:	4b8c      	ldr	r3, [pc, #560]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae34:	d10b      	bne.n	800ae4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae36:	4b89      	ldr	r3, [pc, #548]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d06c      	beq.n	800af1c <HAL_RCC_OscConfig+0x12c>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d168      	bne.n	800af1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e24c      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae56:	d106      	bne.n	800ae66 <HAL_RCC_OscConfig+0x76>
 800ae58:	4b80      	ldr	r3, [pc, #512]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a7f      	ldr	r2, [pc, #508]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	e02e      	b.n	800aec4 <HAL_RCC_OscConfig+0xd4>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10c      	bne.n	800ae88 <HAL_RCC_OscConfig+0x98>
 800ae6e:	4b7b      	ldr	r3, [pc, #492]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a7a      	ldr	r2, [pc, #488]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	4b78      	ldr	r3, [pc, #480]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a77      	ldr	r2, [pc, #476]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	e01d      	b.n	800aec4 <HAL_RCC_OscConfig+0xd4>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae90:	d10c      	bne.n	800aeac <HAL_RCC_OscConfig+0xbc>
 800ae92:	4b72      	ldr	r3, [pc, #456]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a71      	ldr	r2, [pc, #452]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800ae98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	4b6f      	ldr	r3, [pc, #444]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a6e      	ldr	r2, [pc, #440]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	e00b      	b.n	800aec4 <HAL_RCC_OscConfig+0xd4>
 800aeac:	4b6b      	ldr	r3, [pc, #428]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a6a      	ldr	r2, [pc, #424]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aeb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	4b68      	ldr	r3, [pc, #416]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a67      	ldr	r2, [pc, #412]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d013      	beq.n	800aef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aecc:	f7fd fac6 	bl	800845c <HAL_GetTick>
 800aed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aed2:	e008      	b.n	800aee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aed4:	f7fd fac2 	bl	800845c <HAL_GetTick>
 800aed8:	4602      	mov	r2, r0
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	2b64      	cmp	r3, #100	@ 0x64
 800aee0:	d901      	bls.n	800aee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e200      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aee6:	4b5d      	ldr	r3, [pc, #372]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0f0      	beq.n	800aed4 <HAL_RCC_OscConfig+0xe4>
 800aef2:	e014      	b.n	800af1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aef4:	f7fd fab2 	bl	800845c <HAL_GetTick>
 800aef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aefa:	e008      	b.n	800af0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aefc:	f7fd faae 	bl	800845c <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	2b64      	cmp	r3, #100	@ 0x64
 800af08:	d901      	bls.n	800af0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e1ec      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af0e:	4b53      	ldr	r3, [pc, #332]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1f0      	bne.n	800aefc <HAL_RCC_OscConfig+0x10c>
 800af1a:	e000      	b.n	800af1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d063      	beq.n	800aff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800af2a:	4b4c      	ldr	r3, [pc, #304]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f003 030c 	and.w	r3, r3, #12
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00b      	beq.n	800af4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800af36:	4b49      	ldr	r3, [pc, #292]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f003 030c 	and.w	r3, r3, #12
 800af3e:	2b08      	cmp	r3, #8
 800af40:	d11c      	bne.n	800af7c <HAL_RCC_OscConfig+0x18c>
 800af42:	4b46      	ldr	r3, [pc, #280]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d116      	bne.n	800af7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af4e:	4b43      	ldr	r3, [pc, #268]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <HAL_RCC_OscConfig+0x176>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d001      	beq.n	800af66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e1c0      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af66:	4b3d      	ldr	r3, [pc, #244]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	4939      	ldr	r1, [pc, #228]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800af76:	4313      	orrs	r3, r2
 800af78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af7a:	e03a      	b.n	800aff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d020      	beq.n	800afc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af84:	4b36      	ldr	r3, [pc, #216]	@ (800b060 <HAL_RCC_OscConfig+0x270>)
 800af86:	2201      	movs	r2, #1
 800af88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af8a:	f7fd fa67 	bl	800845c <HAL_GetTick>
 800af8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af90:	e008      	b.n	800afa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af92:	f7fd fa63 	bl	800845c <HAL_GetTick>
 800af96:	4602      	mov	r2, r0
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d901      	bls.n	800afa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e1a1      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afa4:	4b2d      	ldr	r3, [pc, #180]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0f0      	beq.n	800af92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afb0:	4b2a      	ldr	r3, [pc, #168]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	4927      	ldr	r1, [pc, #156]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	600b      	str	r3, [r1, #0]
 800afc4:	e015      	b.n	800aff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afc6:	4b26      	ldr	r3, [pc, #152]	@ (800b060 <HAL_RCC_OscConfig+0x270>)
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afcc:	f7fd fa46 	bl	800845c <HAL_GetTick>
 800afd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afd2:	e008      	b.n	800afe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afd4:	f7fd fa42 	bl	800845c <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d901      	bls.n	800afe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e180      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afe6:	4b1d      	ldr	r3, [pc, #116]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f0      	bne.n	800afd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0308 	and.w	r3, r3, #8
 800affa:	2b00      	cmp	r3, #0
 800affc:	d03a      	beq.n	800b074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d019      	beq.n	800b03a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b006:	4b17      	ldr	r3, [pc, #92]	@ (800b064 <HAL_RCC_OscConfig+0x274>)
 800b008:	2201      	movs	r2, #1
 800b00a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b00c:	f7fd fa26 	bl	800845c <HAL_GetTick>
 800b010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b012:	e008      	b.n	800b026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b014:	f7fd fa22 	bl	800845c <HAL_GetTick>
 800b018:	4602      	mov	r2, r0
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d901      	bls.n	800b026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e160      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b026:	4b0d      	ldr	r3, [pc, #52]	@ (800b05c <HAL_RCC_OscConfig+0x26c>)
 800b028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f0      	beq.n	800b014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b032:	2001      	movs	r0, #1
 800b034:	f000 face 	bl	800b5d4 <RCC_Delay>
 800b038:	e01c      	b.n	800b074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b03a:	4b0a      	ldr	r3, [pc, #40]	@ (800b064 <HAL_RCC_OscConfig+0x274>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b040:	f7fd fa0c 	bl	800845c <HAL_GetTick>
 800b044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b046:	e00f      	b.n	800b068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b048:	f7fd fa08 	bl	800845c <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b02      	cmp	r3, #2
 800b054:	d908      	bls.n	800b068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e146      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
 800b05a:	bf00      	nop
 800b05c:	40021000 	.word	0x40021000
 800b060:	42420000 	.word	0x42420000
 800b064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b068:	4b92      	ldr	r3, [pc, #584]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06c:	f003 0302 	and.w	r3, r3, #2
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e9      	bne.n	800b048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 80a6 	beq.w	800b1ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b086:	4b8b      	ldr	r3, [pc, #556]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10d      	bne.n	800b0ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b092:	4b88      	ldr	r3, [pc, #544]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	4a87      	ldr	r2, [pc, #540]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b09c:	61d3      	str	r3, [r2, #28]
 800b09e:	4b85      	ldr	r3, [pc, #532]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0a6:	60bb      	str	r3, [r7, #8]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0ae:	4b82      	ldr	r3, [pc, #520]	@ (800b2b8 <HAL_RCC_OscConfig+0x4c8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d118      	bne.n	800b0ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0ba:	4b7f      	ldr	r3, [pc, #508]	@ (800b2b8 <HAL_RCC_OscConfig+0x4c8>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a7e      	ldr	r2, [pc, #504]	@ (800b2b8 <HAL_RCC_OscConfig+0x4c8>)
 800b0c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0c6:	f7fd f9c9 	bl	800845c <HAL_GetTick>
 800b0ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0cc:	e008      	b.n	800b0e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0ce:	f7fd f9c5 	bl	800845c <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b64      	cmp	r3, #100	@ 0x64
 800b0da:	d901      	bls.n	800b0e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e103      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0e0:	4b75      	ldr	r3, [pc, #468]	@ (800b2b8 <HAL_RCC_OscConfig+0x4c8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0f0      	beq.n	800b0ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d106      	bne.n	800b102 <HAL_RCC_OscConfig+0x312>
 800b0f4:	4b6f      	ldr	r3, [pc, #444]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	4a6e      	ldr	r2, [pc, #440]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	6213      	str	r3, [r2, #32]
 800b100:	e02d      	b.n	800b15e <HAL_RCC_OscConfig+0x36e>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10c      	bne.n	800b124 <HAL_RCC_OscConfig+0x334>
 800b10a:	4b6a      	ldr	r3, [pc, #424]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	4a69      	ldr	r2, [pc, #420]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b110:	f023 0301 	bic.w	r3, r3, #1
 800b114:	6213      	str	r3, [r2, #32]
 800b116:	4b67      	ldr	r3, [pc, #412]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	4a66      	ldr	r2, [pc, #408]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b11c:	f023 0304 	bic.w	r3, r3, #4
 800b120:	6213      	str	r3, [r2, #32]
 800b122:	e01c      	b.n	800b15e <HAL_RCC_OscConfig+0x36e>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	2b05      	cmp	r3, #5
 800b12a:	d10c      	bne.n	800b146 <HAL_RCC_OscConfig+0x356>
 800b12c:	4b61      	ldr	r3, [pc, #388]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	4a60      	ldr	r2, [pc, #384]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b132:	f043 0304 	orr.w	r3, r3, #4
 800b136:	6213      	str	r3, [r2, #32]
 800b138:	4b5e      	ldr	r3, [pc, #376]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	4a5d      	ldr	r2, [pc, #372]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b13e:	f043 0301 	orr.w	r3, r3, #1
 800b142:	6213      	str	r3, [r2, #32]
 800b144:	e00b      	b.n	800b15e <HAL_RCC_OscConfig+0x36e>
 800b146:	4b5b      	ldr	r3, [pc, #364]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	4a5a      	ldr	r2, [pc, #360]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	6213      	str	r3, [r2, #32]
 800b152:	4b58      	ldr	r3, [pc, #352]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	4a57      	ldr	r2, [pc, #348]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b158:	f023 0304 	bic.w	r3, r3, #4
 800b15c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d015      	beq.n	800b192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b166:	f7fd f979 	bl	800845c <HAL_GetTick>
 800b16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b16c:	e00a      	b.n	800b184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b16e:	f7fd f975 	bl	800845c <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d901      	bls.n	800b184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e0b1      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b184:	4b4b      	ldr	r3, [pc, #300]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	f003 0302 	and.w	r3, r3, #2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0ee      	beq.n	800b16e <HAL_RCC_OscConfig+0x37e>
 800b190:	e014      	b.n	800b1bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b192:	f7fd f963 	bl	800845c <HAL_GetTick>
 800b196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b198:	e00a      	b.n	800b1b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b19a:	f7fd f95f 	bl	800845c <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d901      	bls.n	800b1b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e09b      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1b0:	4b40      	ldr	r3, [pc, #256]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1ee      	bne.n	800b19a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d105      	bne.n	800b1ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1c2:	4b3c      	ldr	r3, [pc, #240]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	4a3b      	ldr	r2, [pc, #236]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b1c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 8087 	beq.w	800b2e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b1d8:	4b36      	ldr	r3, [pc, #216]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f003 030c 	and.w	r3, r3, #12
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d061      	beq.n	800b2a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d146      	bne.n	800b27a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1ec:	4b33      	ldr	r3, [pc, #204]	@ (800b2bc <HAL_RCC_OscConfig+0x4cc>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1f2:	f7fd f933 	bl	800845c <HAL_GetTick>
 800b1f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1f8:	e008      	b.n	800b20c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1fa:	f7fd f92f 	bl	800845c <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d901      	bls.n	800b20c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e06d      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b20c:	4b29      	ldr	r3, [pc, #164]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1f0      	bne.n	800b1fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b220:	d108      	bne.n	800b234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b222:	4b24      	ldr	r3, [pc, #144]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	4921      	ldr	r1, [pc, #132]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b230:	4313      	orrs	r3, r2
 800b232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b234:	4b1f      	ldr	r3, [pc, #124]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a19      	ldr	r1, [r3, #32]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	430b      	orrs	r3, r1
 800b246:	491b      	ldr	r1, [pc, #108]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b248:	4313      	orrs	r3, r2
 800b24a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b24c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2bc <HAL_RCC_OscConfig+0x4cc>)
 800b24e:	2201      	movs	r2, #1
 800b250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b252:	f7fd f903 	bl	800845c <HAL_GetTick>
 800b256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b258:	e008      	b.n	800b26c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b25a:	f7fd f8ff 	bl	800845c <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	d901      	bls.n	800b26c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e03d      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b26c:	4b11      	ldr	r3, [pc, #68]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0f0      	beq.n	800b25a <HAL_RCC_OscConfig+0x46a>
 800b278:	e035      	b.n	800b2e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b27a:	4b10      	ldr	r3, [pc, #64]	@ (800b2bc <HAL_RCC_OscConfig+0x4cc>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b280:	f7fd f8ec 	bl	800845c <HAL_GetTick>
 800b284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b286:	e008      	b.n	800b29a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b288:	f7fd f8e8 	bl	800845c <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	d901      	bls.n	800b29a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e026      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b29a:	4b06      	ldr	r3, [pc, #24]	@ (800b2b4 <HAL_RCC_OscConfig+0x4c4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f0      	bne.n	800b288 <HAL_RCC_OscConfig+0x498>
 800b2a6:	e01e      	b.n	800b2e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d107      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e019      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
 800b2b4:	40021000 	.word	0x40021000
 800b2b8:	40007000 	.word	0x40007000
 800b2bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f0 <HAL_RCC_OscConfig+0x500>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d106      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d001      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40021000 	.word	0x40021000

0800b2f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e0d0      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b308:	4b6a      	ldr	r3, [pc, #424]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d910      	bls.n	800b338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b316:	4b67      	ldr	r3, [pc, #412]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f023 0207 	bic.w	r2, r3, #7
 800b31e:	4965      	ldr	r1, [pc, #404]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	4313      	orrs	r3, r2
 800b324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b326:	4b63      	ldr	r3, [pc, #396]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0307 	and.w	r3, r3, #7
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d001      	beq.n	800b338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e0b8      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	2b00      	cmp	r3, #0
 800b342:	d020      	beq.n	800b386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b350:	4b59      	ldr	r3, [pc, #356]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4a58      	ldr	r2, [pc, #352]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b356:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b35a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0308 	and.w	r3, r3, #8
 800b364:	2b00      	cmp	r3, #0
 800b366:	d005      	beq.n	800b374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b368:	4b53      	ldr	r3, [pc, #332]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	4a52      	ldr	r2, [pc, #328]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b36e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b374:	4b50      	ldr	r3, [pc, #320]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	494d      	ldr	r1, [pc, #308]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b382:	4313      	orrs	r3, r2
 800b384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d040      	beq.n	800b414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d107      	bne.n	800b3aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b39a:	4b47      	ldr	r3, [pc, #284]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d115      	bne.n	800b3d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e07f      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d107      	bne.n	800b3c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3b2:	4b41      	ldr	r3, [pc, #260]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d109      	bne.n	800b3d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e073      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3c2:	4b3d      	ldr	r3, [pc, #244]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e06b      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b3d2:	4b39      	ldr	r3, [pc, #228]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f023 0203 	bic.w	r2, r3, #3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	4936      	ldr	r1, [pc, #216]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b3e4:	f7fd f83a 	bl	800845c <HAL_GetTick>
 800b3e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3ea:	e00a      	b.n	800b402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3ec:	f7fd f836 	bl	800845c <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d901      	bls.n	800b402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e053      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b402:	4b2d      	ldr	r3, [pc, #180]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f003 020c 	and.w	r2, r3, #12
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	429a      	cmp	r2, r3
 800b412:	d1eb      	bne.n	800b3ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b414:	4b27      	ldr	r3, [pc, #156]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0307 	and.w	r3, r3, #7
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d210      	bcs.n	800b444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b422:	4b24      	ldr	r3, [pc, #144]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f023 0207 	bic.w	r2, r3, #7
 800b42a:	4922      	ldr	r1, [pc, #136]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	4313      	orrs	r3, r2
 800b430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b432:	4b20      	ldr	r3, [pc, #128]	@ (800b4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d001      	beq.n	800b444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e032      	b.n	800b4aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d008      	beq.n	800b462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b450:	4b19      	ldr	r3, [pc, #100]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	4916      	ldr	r1, [pc, #88]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b46e:	4b12      	ldr	r3, [pc, #72]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	490e      	ldr	r1, [pc, #56]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b482:	f000 f821 	bl	800b4c8 <HAL_RCC_GetSysClockFreq>
 800b486:	4602      	mov	r2, r0
 800b488:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	091b      	lsrs	r3, r3, #4
 800b48e:	f003 030f 	and.w	r3, r3, #15
 800b492:	490a      	ldr	r1, [pc, #40]	@ (800b4bc <HAL_RCC_ClockConfig+0x1c8>)
 800b494:	5ccb      	ldrb	r3, [r1, r3]
 800b496:	fa22 f303 	lsr.w	r3, r2, r3
 800b49a:	4a09      	ldr	r2, [pc, #36]	@ (800b4c0 <HAL_RCC_ClockConfig+0x1cc>)
 800b49c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b49e:	4b09      	ldr	r3, [pc, #36]	@ (800b4c4 <HAL_RCC_ClockConfig+0x1d0>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fc ff98 	bl	80083d8 <HAL_InitTick>

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40022000 	.word	0x40022000
 800b4b8:	40021000 	.word	0x40021000
 800b4bc:	0800e36c 	.word	0x0800e36c
 800b4c0:	20000098 	.word	0x20000098
 800b4c4:	2000009c 	.word	0x2000009c

0800b4c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b4e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x94>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f003 030c 	and.w	r3, r3, #12
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d002      	beq.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x30>
 800b4f2:	2b08      	cmp	r3, #8
 800b4f4:	d003      	beq.n	800b4fe <HAL_RCC_GetSysClockFreq+0x36>
 800b4f6:	e027      	b.n	800b548 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b4f8:	4b19      	ldr	r3, [pc, #100]	@ (800b560 <HAL_RCC_GetSysClockFreq+0x98>)
 800b4fa:	613b      	str	r3, [r7, #16]
      break;
 800b4fc:	e027      	b.n	800b54e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	0c9b      	lsrs	r3, r3, #18
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	4a17      	ldr	r2, [pc, #92]	@ (800b564 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b508:	5cd3      	ldrb	r3, [r2, r3]
 800b50a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d010      	beq.n	800b538 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b516:	4b11      	ldr	r3, [pc, #68]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x94>)
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	0c5b      	lsrs	r3, r3, #17
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	4a11      	ldr	r2, [pc, #68]	@ (800b568 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b522:	5cd3      	ldrb	r3, [r2, r3]
 800b524:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a0d      	ldr	r2, [pc, #52]	@ (800b560 <HAL_RCC_GetSysClockFreq+0x98>)
 800b52a:	fb03 f202 	mul.w	r2, r3, r2
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	fbb2 f3f3 	udiv	r3, r2, r3
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	e004      	b.n	800b542 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a0c      	ldr	r2, [pc, #48]	@ (800b56c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b53c:	fb02 f303 	mul.w	r3, r2, r3
 800b540:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	613b      	str	r3, [r7, #16]
      break;
 800b546:	e002      	b.n	800b54e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b548:	4b05      	ldr	r3, [pc, #20]	@ (800b560 <HAL_RCC_GetSysClockFreq+0x98>)
 800b54a:	613b      	str	r3, [r7, #16]
      break;
 800b54c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b54e:	693b      	ldr	r3, [r7, #16]
}
 800b550:	4618      	mov	r0, r3
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40021000 	.word	0x40021000
 800b560:	007a1200 	.word	0x007a1200
 800b564:	0800e384 	.word	0x0800e384
 800b568:	0800e394 	.word	0x0800e394
 800b56c:	003d0900 	.word	0x003d0900

0800b570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b570:	b480      	push	{r7}
 800b572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b574:	4b02      	ldr	r3, [pc, #8]	@ (800b580 <HAL_RCC_GetHCLKFreq+0x10>)
 800b576:	681b      	ldr	r3, [r3, #0]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bc80      	pop	{r7}
 800b57e:	4770      	bx	lr
 800b580:	20000098 	.word	0x20000098

0800b584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b588:	f7ff fff2 	bl	800b570 <HAL_RCC_GetHCLKFreq>
 800b58c:	4602      	mov	r2, r0
 800b58e:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	0a1b      	lsrs	r3, r3, #8
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	4903      	ldr	r1, [pc, #12]	@ (800b5a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b59a:	5ccb      	ldrb	r3, [r1, r3]
 800b59c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	40021000 	.word	0x40021000
 800b5a8:	0800e37c 	.word	0x0800e37c

0800b5ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b5b0:	f7ff ffde 	bl	800b570 <HAL_RCC_GetHCLKFreq>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	4b05      	ldr	r3, [pc, #20]	@ (800b5cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	0adb      	lsrs	r3, r3, #11
 800b5bc:	f003 0307 	and.w	r3, r3, #7
 800b5c0:	4903      	ldr	r1, [pc, #12]	@ (800b5d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5c2:	5ccb      	ldrb	r3, [r1, r3]
 800b5c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	40021000 	.word	0x40021000
 800b5d0:	0800e37c 	.word	0x0800e37c

0800b5d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b608 <RCC_Delay+0x34>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b60c <RCC_Delay+0x38>)
 800b5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e6:	0a5b      	lsrs	r3, r3, #9
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
 800b5ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b5f0:	bf00      	nop
  }
  while (Delay --);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	1e5a      	subs	r2, r3, #1
 800b5f6:	60fa      	str	r2, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f9      	bne.n	800b5f0 <RCC_Delay+0x1c>
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	bc80      	pop	{r7}
 800b606:	4770      	bx	lr
 800b608:	20000098 	.word	0x20000098
 800b60c:	10624dd3 	.word	0x10624dd3

0800b610 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	613b      	str	r3, [r7, #16]
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d07d      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b62c:	2300      	movs	r3, #0
 800b62e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b630:	4b4f      	ldr	r3, [pc, #316]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10d      	bne.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b63c:	4b4c      	ldr	r3, [pc, #304]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	4a4b      	ldr	r2, [pc, #300]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b646:	61d3      	str	r3, [r2, #28]
 800b648:	4b49      	ldr	r3, [pc, #292]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b650:	60bb      	str	r3, [r7, #8]
 800b652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b658:	4b46      	ldr	r3, [pc, #280]	@ (800b774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b660:	2b00      	cmp	r3, #0
 800b662:	d118      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b664:	4b43      	ldr	r3, [pc, #268]	@ (800b774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a42      	ldr	r2, [pc, #264]	@ (800b774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b66a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b66e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b670:	f7fc fef4 	bl	800845c <HAL_GetTick>
 800b674:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b676:	e008      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b678:	f7fc fef0 	bl	800845c <HAL_GetTick>
 800b67c:	4602      	mov	r2, r0
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	2b64      	cmp	r3, #100	@ 0x64
 800b684:	d901      	bls.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e06d      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b68a:	4b3a      	ldr	r3, [pc, #232]	@ (800b774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0f0      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b696:	4b36      	ldr	r3, [pc, #216]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b69e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d02e      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d027      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6b4:	4b2e      	ldr	r3, [pc, #184]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b6be:	4b2e      	ldr	r3, [pc, #184]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b6c4:	4b2c      	ldr	r3, [pc, #176]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b6ca:	4a29      	ldr	r2, [pc, #164]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d014      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6da:	f7fc febf 	bl	800845c <HAL_GetTick>
 800b6de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6e0:	e00a      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6e2:	f7fc febb 	bl	800845c <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d901      	bls.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e036      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	f003 0302 	and.w	r3, r3, #2
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0ee      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b704:	4b1a      	ldr	r3, [pc, #104]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	4917      	ldr	r1, [pc, #92]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b712:	4313      	orrs	r3, r2
 800b714:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d105      	bne.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b71c:	4b14      	ldr	r3, [pc, #80]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	4a13      	ldr	r2, [pc, #76]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0302 	and.w	r3, r3, #2
 800b730:	2b00      	cmp	r3, #0
 800b732:	d008      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b734:	4b0e      	ldr	r3, [pc, #56]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	490b      	ldr	r1, [pc, #44]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b742:	4313      	orrs	r3, r2
 800b744:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0310 	and.w	r3, r3, #16
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b752:	4b07      	ldr	r3, [pc, #28]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	4904      	ldr	r1, [pc, #16]	@ (800b770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b760:	4313      	orrs	r3, r2
 800b762:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40021000 	.word	0x40021000
 800b774:	40007000 	.word	0x40007000
 800b778:	42420440 	.word	0x42420440

0800b77c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e076      	b.n	800b87c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b792:	2b00      	cmp	r3, #0
 800b794:	d108      	bne.n	800b7a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b79e:	d009      	beq.n	800b7b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	61da      	str	r2, [r3, #28]
 800b7a6:	e005      	b.n	800b7b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fc fb9a 	bl	8007f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f003 0302 	and.w	r3, r3, #2
 800b810:	431a      	orrs	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	431a      	orrs	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b838:	ea42 0103 	orr.w	r1, r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b840:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	0c1a      	lsrs	r2, r3, #16
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f002 0204 	and.w	r2, r2, #4
 800b85a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	69da      	ldr	r2, [r3, #28]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b86a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <HAL_SPI_Transmit_IT+0x1a>
 800b898:	88fb      	ldrh	r3, [r7, #6]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e06a      	b.n	800b978 <HAL_SPI_Transmit_IT+0xf4>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d001      	beq.n	800b8b2 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	e062      	b.n	800b978 <HAL_SPI_Transmit_IT+0xf4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d101      	bne.n	800b8c0 <HAL_SPI_Transmit_IT+0x3c>
 800b8bc:	2302      	movs	r3, #2
 800b8be:	e05b      	b.n	800b978 <HAL_SPI_Transmit_IT+0xf4>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2203      	movs	r2, #3
 800b8cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	88fa      	ldrh	r2, [r7, #6]
 800b8e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	88fa      	ldrh	r2, [r7, #6]
 800b8e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <HAL_SPI_Transmit_IT+0x8c>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	4a1e      	ldr	r2, [pc, #120]	@ (800b984 <HAL_SPI_Transmit_IT+0x100>)
 800b90c:	645a      	str	r2, [r3, #68]	@ 0x44
 800b90e:	e002      	b.n	800b916 <HAL_SPI_Transmit_IT+0x92>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4a1d      	ldr	r2, [pc, #116]	@ (800b988 <HAL_SPI_Transmit_IT+0x104>)
 800b914:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b91e:	d10f      	bne.n	800b940 <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b92e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b93e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b94a:	2b40      	cmp	r3, #64	@ 0x40
 800b94c:	d007      	beq.n	800b95e <HAL_SPI_Transmit_IT+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b95c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800b974:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bc80      	pop	{r7}
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	0800bbc9 	.word	0x0800bbc9
 800b988:	0800bb83 	.word	0x0800bb83

0800b98c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10e      	bne.n	800b9cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d009      	beq.n	800b9cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d004      	beq.n	800b9cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	4798      	blx	r3
    return;
 800b9ca:	e0b7      	b.n	800bb3c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	f003 0302 	and.w	r3, r3, #2
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d009      	beq.n	800b9ea <HAL_SPI_IRQHandler+0x5e>
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d004      	beq.n	800b9ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
    return;
 800b9e8:	e0a8      	b.n	800bb3c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	f003 0320 	and.w	r3, r3, #32
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d105      	bne.n	800ba00 <HAL_SPI_IRQHandler+0x74>
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 809e 	beq.w	800bb3c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	f003 0320 	and.w	r3, r3, #32
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 8098 	beq.w	800bb3c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d023      	beq.n	800ba5e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d011      	beq.n	800ba46 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba26:	f043 0204 	orr.w	r2, r3, #4
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	617b      	str	r3, [r7, #20]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	e00b      	b.n	800ba5e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba46:	2300      	movs	r3, #0
 800ba48:	613b      	str	r3, [r7, #16]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	613b      	str	r3, [r7, #16]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	613b      	str	r3, [r7, #16]
 800ba5a:	693b      	ldr	r3, [r7, #16]
        return;
 800ba5c:	e06e      	b.n	800bb3c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	f003 0320 	and.w	r3, r3, #32
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d014      	beq.n	800ba92 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba6c:	f043 0201 	orr.w	r2, r3, #1
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d04f      	beq.n	800bb3a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800baa8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	f003 0302 	and.w	r3, r3, #2
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d104      	bne.n	800bac6 <HAL_SPI_IRQHandler+0x13a>
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d034      	beq.n	800bb30 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 0203 	bic.w	r2, r2, #3
 800bad4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bada:	2b00      	cmp	r3, #0
 800badc:	d011      	beq.n	800bb02 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bae2:	4a18      	ldr	r2, [pc, #96]	@ (800bb44 <HAL_SPI_IRQHandler+0x1b8>)
 800bae4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baea:	4618      	mov	r0, r3
 800baec:	f7fd fa34 	bl	8008f58 <HAL_DMA_Abort_IT>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bafa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d016      	beq.n	800bb38 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb0e:	4a0d      	ldr	r2, [pc, #52]	@ (800bb44 <HAL_SPI_IRQHandler+0x1b8>)
 800bb10:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fd fa1e 	bl	8008f58 <HAL_DMA_Abort_IT>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800bb2e:	e003      	b.n	800bb38 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f809 	bl	800bb48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bb36:	e000      	b.n	800bb3a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 800bb38:	bf00      	nop
    return;
 800bb3a:	bf00      	nop
  }
}
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	0800bb5b 	.word	0x0800bb5b

0800bb48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bc80      	pop	{r7}
 800bb58:	4770      	bx	lr

0800bb5a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb66:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7ff ffe7 	bl	800bb48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb7a:	bf00      	nop
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	330c      	adds	r3, #12
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d102      	bne.n	800bbc0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f8e0 	bl	800bd80 <SPI_CloseTx_ISR>
  }
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd4:	881a      	ldrh	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe0:	1c9a      	adds	r2, r3, #2
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d102      	bne.n	800bc04 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f8be 	bl	800bd80 <SPI_CloseTx_ISR>
  }
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b088      	sub	sp, #32
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc1c:	f7fc fc1e 	bl	800845c <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	4413      	add	r3, r2
 800bc2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc2c:	f7fc fc16 	bl	800845c <HAL_GetTick>
 800bc30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc32:	4b39      	ldr	r3, [pc, #228]	@ (800bd18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	015b      	lsls	r3, r3, #5
 800bc38:	0d1b      	lsrs	r3, r3, #20
 800bc3a:	69fa      	ldr	r2, [r7, #28]
 800bc3c:	fb02 f303 	mul.w	r3, r2, r3
 800bc40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc42:	e054      	b.n	800bcee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4a:	d050      	beq.n	800bcee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc4c:	f7fc fc06 	bl	800845c <HAL_GetTick>
 800bc50:	4602      	mov	r2, r0
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	69fa      	ldr	r2, [r7, #28]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d902      	bls.n	800bc62 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d13d      	bne.n	800bcde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bc70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc7a:	d111      	bne.n	800bca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc84:	d004      	beq.n	800bc90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc8e:	d107      	bne.n	800bca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bca8:	d10f      	bne.n	800bcca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bcb8:	601a      	str	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bcc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e017      	b.n	800bd0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689a      	ldr	r2, [r3, #8]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	bf0c      	ite	eq
 800bcfe:	2301      	moveq	r3, #1
 800bd00:	2300      	movne	r3, #0
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	461a      	mov	r2, r3
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d19b      	bne.n	800bc44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3720      	adds	r7, #32
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20000098 	.word	0x20000098

0800bd1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af02      	add	r7, sp, #8
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	2102      	movs	r1, #2
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff ff6a 	bl	800bc0c <SPI_WaitFlagStateUntilTimeout>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d007      	beq.n	800bd4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd42:	f043 0220 	orr.w	r2, r3, #32
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e013      	b.n	800bd76 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2180      	movs	r1, #128	@ 0x80
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7ff ff57 	bl	800bc0c <SPI_WaitFlagStateUntilTimeout>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd68:	f043 0220 	orr.w	r2, r3, #32
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e000      	b.n	800bd76 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800bd88:	4b2c      	ldr	r3, [pc, #176]	@ (800be3c <SPI_CloseTx_ISR+0xbc>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a2c      	ldr	r2, [pc, #176]	@ (800be40 <SPI_CloseTx_ISR+0xc0>)
 800bd8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd92:	0a5b      	lsrs	r3, r3, #9
 800bd94:	2264      	movs	r2, #100	@ 0x64
 800bd96:	fb02 f303 	mul.w	r3, r2, r3
 800bd9a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd9c:	f7fc fb5e 	bl	800845c <HAL_GetTick>
 800bda0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d106      	bne.n	800bdb6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdac:	f043 0220 	orr.w	r2, r3, #32
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bdb4:	e009      	b.n	800bdca <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0eb      	beq.n	800bda2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bdd8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	2164      	movs	r1, #100	@ 0x64
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff ff9c 	bl	800bd1c <SPI_EndRxTxTransaction>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdee:	f043 0220 	orr.w	r2, r3, #32
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10a      	bne.n	800be14 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	60fb      	str	r3, [r7, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	60fb      	str	r3, [r7, #12]
 800be12:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be20:	2b00      	cmp	r3, #0
 800be22:	d003      	beq.n	800be2c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff fe8f 	bl	800bb48 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800be2a:	e002      	b.n	800be32 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fdb5 	bl	800c99c <HAL_SPI_TxCpltCallback>
}
 800be32:	bf00      	nop
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	20000098 	.word	0x20000098
 800be40:	057619f1 	.word	0x057619f1

0800be44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e042      	b.n	800bedc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7fc f894 	bl	8007f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2224      	movs	r2, #36	@ 0x24
 800be74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68da      	ldr	r2, [r3, #12]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800be86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fcab 	bl	800c7e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	691a      	ldr	r2, [r3, #16]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	695a      	ldr	r2, [r3, #20]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800beac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2220      	movs	r2, #32
 800bec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2220      	movs	r2, #32
 800bed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b20      	cmp	r3, #32
 800befc:	d121      	bne.n	800bf42 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <HAL_UART_Transmit_IT+0x26>
 800bf04:	88fb      	ldrh	r3, [r7, #6]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e01a      	b.n	800bf44 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	88fa      	ldrh	r2, [r7, #6]
 800bf18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	88fa      	ldrh	r2, [r7, #6]
 800bf1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2221      	movs	r2, #33	@ 0x21
 800bf2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68da      	ldr	r2, [r3, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bf3c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e000      	b.n	800bf44 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bf42:	2302      	movs	r3, #2
  }
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bc80      	pop	{r7}
 800bf4c:	4770      	bx	lr
	...

0800bf50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b0ba      	sub	sp, #232	@ 0xe8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bf82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf86:	f003 030f 	and.w	r3, r3, #15
 800bf8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bf8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10f      	bne.n	800bfb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf9a:	f003 0320 	and.w	r3, r3, #32
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d009      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x66>
 800bfa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d003      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fb5a 	bl	800c668 <UART_Receive_IT>
      return;
 800bfb4:	e25b      	b.n	800c46e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bfb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 80de 	beq.w	800c17c <HAL_UART_IRQHandler+0x22c>
 800bfc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d106      	bne.n	800bfda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bfcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 80d1 	beq.w	800c17c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00b      	beq.n	800bffe <HAL_UART_IRQHandler+0xae>
 800bfe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d005      	beq.n	800bffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bff6:	f043 0201 	orr.w	r2, r3, #1
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c002:	f003 0304 	and.w	r3, r3, #4
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <HAL_UART_IRQHandler+0xd2>
 800c00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d005      	beq.n	800c022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c01a:	f043 0202 	orr.w	r2, r3, #2
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00b      	beq.n	800c046 <HAL_UART_IRQHandler+0xf6>
 800c02e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d005      	beq.n	800c046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c03e:	f043 0204 	orr.w	r2, r3, #4
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c04a:	f003 0308 	and.w	r3, r3, #8
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d011      	beq.n	800c076 <HAL_UART_IRQHandler+0x126>
 800c052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c056:	f003 0320 	and.w	r3, r3, #32
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d105      	bne.n	800c06a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c05e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c06e:	f043 0208 	orr.w	r2, r3, #8
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 81f2 	beq.w	800c464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c084:	f003 0320 	and.w	r3, r3, #32
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d008      	beq.n	800c09e <HAL_UART_IRQHandler+0x14e>
 800c08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c090:	f003 0320 	and.w	r3, r3, #32
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fae5 	bl	800c668 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	bf14      	ite	ne
 800c0ac:	2301      	movne	r3, #1
 800c0ae:	2300      	moveq	r3, #0
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ba:	f003 0308 	and.w	r3, r3, #8
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <HAL_UART_IRQHandler+0x17a>
 800c0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d04f      	beq.n	800c16a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f9ef 	bl	800c4ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d041      	beq.n	800c162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3314      	adds	r3, #20
 800c0e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c0f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3314      	adds	r3, #20
 800c106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c10a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c10e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1d9      	bne.n	800c0de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d013      	beq.n	800c15a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c136:	4a7e      	ldr	r2, [pc, #504]	@ (800c330 <HAL_UART_IRQHandler+0x3e0>)
 800c138:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fc ff0a 	bl	8008f58 <HAL_DMA_Abort_IT>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d016      	beq.n	800c178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c154:	4610      	mov	r0, r2
 800c156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c158:	e00e      	b.n	800c178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f993 	bl	800c486 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c160:	e00a      	b.n	800c178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f98f 	bl	800c486 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c168:	e006      	b.n	800c178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f98b 	bl	800c486 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c176:	e175      	b.n	800c464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c178:	bf00      	nop
    return;
 800c17a:	e173      	b.n	800c464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c180:	2b01      	cmp	r3, #1
 800c182:	f040 814f 	bne.w	800c424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c18a:	f003 0310 	and.w	r3, r3, #16
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 8148 	beq.w	800c424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c198:	f003 0310 	and.w	r3, r3, #16
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 8141 	beq.w	800c424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60bb      	str	r3, [r7, #8]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	60bb      	str	r3, [r7, #8]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	60bb      	str	r3, [r7, #8]
 800c1b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80b6 	beq.w	800c334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c1d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 8145 	beq.w	800c468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c1e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	f080 813e 	bcs.w	800c468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c1f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	2b20      	cmp	r3, #32
 800c1fc:	f000 8088 	beq.w	800c310 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	330c      	adds	r3, #12
 800c206:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c21a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c21e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	330c      	adds	r3, #12
 800c228:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c22c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c238:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c23c:	e841 2300 	strex	r3, r2, [r1]
 800c240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1d9      	bne.n	800c200 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3314      	adds	r3, #20
 800c252:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c256:	e853 3f00 	ldrex	r3, [r3]
 800c25a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c25c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c25e:	f023 0301 	bic.w	r3, r3, #1
 800c262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3314      	adds	r3, #20
 800c26c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c270:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c274:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c276:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c278:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c27c:	e841 2300 	strex	r3, r2, [r1]
 800c280:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1e1      	bne.n	800c24c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3314      	adds	r3, #20
 800c28e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c292:	e853 3f00 	ldrex	r3, [r3]
 800c296:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c29a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c29e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3314      	adds	r3, #20
 800c2a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c2ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c2ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c2b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c2ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e3      	bne.n	800c288 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2220      	movs	r2, #32
 800c2c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	330c      	adds	r3, #12
 800c2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2d8:	e853 3f00 	ldrex	r3, [r3]
 800c2dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c2de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2e0:	f023 0310 	bic.w	r3, r3, #16
 800c2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c2f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c2f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c2f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2fa:	e841 2300 	strex	r3, r2, [r1]
 800c2fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1e3      	bne.n	800c2ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fc fde9 	bl	8008ee2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2202      	movs	r2, #2
 800c314:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c31e:	b29b      	uxth	r3, r3
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	b29b      	uxth	r3, r3
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f8b6 	bl	800c498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c32c:	e09c      	b.n	800c468 <HAL_UART_IRQHandler+0x518>
 800c32e:	bf00      	nop
 800c330:	0800c573 	.word	0x0800c573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c348:	b29b      	uxth	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f000 808e 	beq.w	800c46c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 8089 	beq.w	800c46c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	330c      	adds	r3, #12
 800c360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c364:	e853 3f00 	ldrex	r3, [r3]
 800c368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c36c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	330c      	adds	r3, #12
 800c37a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c37e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c386:	e841 2300 	strex	r3, r2, [r1]
 800c38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1e3      	bne.n	800c35a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3314      	adds	r3, #20
 800c398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c3a2:	6a3b      	ldr	r3, [r7, #32]
 800c3a4:	f023 0301 	bic.w	r3, r3, #1
 800c3a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3314      	adds	r3, #20
 800c3b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c3b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c3b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3be:	e841 2300 	strex	r3, r2, [r1]
 800c3c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e3      	bne.n	800c392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	330c      	adds	r3, #12
 800c3de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f023 0310 	bic.w	r3, r3, #16
 800c3ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	330c      	adds	r3, #12
 800c3f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c3fc:	61fa      	str	r2, [r7, #28]
 800c3fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	69b9      	ldr	r1, [r7, #24]
 800c402:	69fa      	ldr	r2, [r7, #28]
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	617b      	str	r3, [r7, #20]
   return(result);
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e3      	bne.n	800c3d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2202      	movs	r2, #2
 800c414:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f83b 	bl	800c498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c422:	e023      	b.n	800c46c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d009      	beq.n	800c444 <HAL_UART_IRQHandler+0x4f4>
 800c430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f8ac 	bl	800c59a <UART_Transmit_IT>
    return;
 800c442:	e014      	b.n	800c46e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00e      	beq.n	800c46e <HAL_UART_IRQHandler+0x51e>
 800c450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d008      	beq.n	800c46e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 f8eb 	bl	800c638 <UART_EndTransmit_IT>
    return;
 800c462:	e004      	b.n	800c46e <HAL_UART_IRQHandler+0x51e>
    return;
 800c464:	bf00      	nop
 800c466:	e002      	b.n	800c46e <HAL_UART_IRQHandler+0x51e>
      return;
 800c468:	bf00      	nop
 800c46a:	e000      	b.n	800c46e <HAL_UART_IRQHandler+0x51e>
      return;
 800c46c:	bf00      	nop
  }
}
 800c46e:	37e8      	adds	r7, #232	@ 0xe8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	bc80      	pop	{r7}
 800c484:	4770      	bx	lr

0800c486 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c486:	b480      	push	{r7}
 800c488:	b083      	sub	sp, #12
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c48e:	bf00      	nop
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	bc80      	pop	{r7}
 800c496:	4770      	bx	lr

0800c498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bc80      	pop	{r7}
 800c4ac:	4770      	bx	lr

0800c4ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b095      	sub	sp, #84	@ 0x54
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	330c      	adds	r3, #12
 800c4bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c0:	e853 3f00 	ldrex	r3, [r3]
 800c4c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	330c      	adds	r3, #12
 800c4d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4d6:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4de:	e841 2300 	strex	r3, r2, [r1]
 800c4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1e5      	bne.n	800c4b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3314      	adds	r3, #20
 800c4f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	e853 3f00 	ldrex	r3, [r3]
 800c4f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	f023 0301 	bic.w	r3, r3, #1
 800c500:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3314      	adds	r3, #20
 800c508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c50a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c50c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c512:	e841 2300 	strex	r3, r2, [r1]
 800c516:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1e5      	bne.n	800c4ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c522:	2b01      	cmp	r3, #1
 800c524:	d119      	bne.n	800c55a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	330c      	adds	r3, #12
 800c52c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	60bb      	str	r3, [r7, #8]
   return(result);
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f023 0310 	bic.w	r3, r3, #16
 800c53c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	330c      	adds	r3, #12
 800c544:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c546:	61ba      	str	r2, [r7, #24]
 800c548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54a:	6979      	ldr	r1, [r7, #20]
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	e841 2300 	strex	r3, r2, [r1]
 800c552:	613b      	str	r3, [r7, #16]
   return(result);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e5      	bne.n	800c526 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2220      	movs	r2, #32
 800c55e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c568:	bf00      	nop
 800c56a:	3754      	adds	r7, #84	@ 0x54
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bc80      	pop	{r7}
 800c570:	4770      	bx	lr

0800c572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c57e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7ff ff7a 	bl	800c486 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c592:	bf00      	nop
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b085      	sub	sp, #20
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b21      	cmp	r3, #33	@ 0x21
 800c5ac:	d13e      	bne.n	800c62c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5b6:	d114      	bne.n	800c5e2 <UART_Transmit_IT+0x48>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d110      	bne.n	800c5e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	1c9a      	adds	r2, r3, #2
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	621a      	str	r2, [r3, #32]
 800c5e0:	e008      	b.n	800c5f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
 800c5e6:	1c59      	adds	r1, r3, #1
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	6211      	str	r1, [r2, #32]
 800c5ec:	781a      	ldrb	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	4619      	mov	r1, r3
 800c602:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10f      	bne.n	800c628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	e000      	b.n	800c62e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c62c:	2302      	movs	r3, #2
  }
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	bc80      	pop	{r7}
 800c636:	4770      	bx	lr

0800c638 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68da      	ldr	r2, [r3, #12]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c64e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2220      	movs	r2, #32
 800c654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f9fb 	bl	800ca54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08c      	sub	sp, #48	@ 0x30
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b22      	cmp	r3, #34	@ 0x22
 800c67a:	f040 80ae 	bne.w	800c7da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c686:	d117      	bne.n	800c6b8 <UART_Receive_IT+0x50>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d113      	bne.n	800c6b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c690:	2300      	movs	r3, #0
 800c692:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c698:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b0:	1c9a      	adds	r2, r3, #2
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	629a      	str	r2, [r3, #40]	@ 0x28
 800c6b6:	e026      	b.n	800c706 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6ca:	d007      	beq.n	800c6dc <UART_Receive_IT+0x74>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10a      	bne.n	800c6ea <UART_Receive_IT+0x82>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e6:	701a      	strb	r2, [r3, #0]
 800c6e8:	e008      	b.n	800c6fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c700:	1c5a      	adds	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	3b01      	subs	r3, #1
 800c70e:	b29b      	uxth	r3, r3
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	4619      	mov	r1, r3
 800c714:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c716:	2b00      	cmp	r3, #0
 800c718:	d15d      	bne.n	800c7d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f022 0220 	bic.w	r2, r2, #32
 800c728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68da      	ldr	r2, [r3, #12]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	695a      	ldr	r2, [r3, #20]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f022 0201 	bic.w	r2, r2, #1
 800c748:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d135      	bne.n	800c7cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	330c      	adds	r3, #12
 800c76c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	613b      	str	r3, [r7, #16]
   return(result);
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f023 0310 	bic.w	r3, r3, #16
 800c77c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	330c      	adds	r3, #12
 800c784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c786:	623a      	str	r2, [r7, #32]
 800c788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	69f9      	ldr	r1, [r7, #28]
 800c78c:	6a3a      	ldr	r2, [r7, #32]
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	61bb      	str	r3, [r7, #24]
   return(result);
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e5      	bne.n	800c766 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f003 0310 	and.w	r3, r3, #16
 800c7a4:	2b10      	cmp	r3, #16
 800c7a6:	d10a      	bne.n	800c7be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	60fb      	str	r3, [r7, #12]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fe67 	bl	800c498 <HAL_UARTEx_RxEventCallback>
 800c7ca:	e002      	b.n	800c7d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff fe51 	bl	800c474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e002      	b.n	800c7dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e000      	b.n	800c7dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c7da:	2302      	movs	r3, #2
  }
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3730      	adds	r7, #48	@ 0x30
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68da      	ldr	r2, [r3, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	430a      	orrs	r2, r1
 800c800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	689a      	ldr	r2, [r3, #8]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	431a      	orrs	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	695b      	ldr	r3, [r3, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800c81e:	f023 030c 	bic.w	r3, r3, #12
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	6812      	ldr	r2, [r2, #0]
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	430b      	orrs	r3, r1
 800c82a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	699a      	ldr	r2, [r3, #24]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	430a      	orrs	r2, r1
 800c840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a2c      	ldr	r2, [pc, #176]	@ (800c8f8 <UART_SetConfig+0x114>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d103      	bne.n	800c854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c84c:	f7fe feae 	bl	800b5ac <HAL_RCC_GetPCLK2Freq>
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	e002      	b.n	800c85a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c854:	f7fe fe96 	bl	800b584 <HAL_RCC_GetPCLK1Freq>
 800c858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4613      	mov	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	009a      	lsls	r2, r3, #2
 800c864:	441a      	add	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c870:	4a22      	ldr	r2, [pc, #136]	@ (800c8fc <UART_SetConfig+0x118>)
 800c872:	fba2 2303 	umull	r2, r3, r2, r3
 800c876:	095b      	lsrs	r3, r3, #5
 800c878:	0119      	lsls	r1, r3, #4
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	4613      	mov	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	009a      	lsls	r2, r3, #2
 800c884:	441a      	add	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c890:	4b1a      	ldr	r3, [pc, #104]	@ (800c8fc <UART_SetConfig+0x118>)
 800c892:	fba3 0302 	umull	r0, r3, r3, r2
 800c896:	095b      	lsrs	r3, r3, #5
 800c898:	2064      	movs	r0, #100	@ 0x64
 800c89a:	fb00 f303 	mul.w	r3, r0, r3
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	011b      	lsls	r3, r3, #4
 800c8a2:	3332      	adds	r3, #50	@ 0x32
 800c8a4:	4a15      	ldr	r2, [pc, #84]	@ (800c8fc <UART_SetConfig+0x118>)
 800c8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8aa:	095b      	lsrs	r3, r3, #5
 800c8ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c8b0:	4419      	add	r1, r3
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009a      	lsls	r2, r3, #2
 800c8bc:	441a      	add	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c8fc <UART_SetConfig+0x118>)
 800c8ca:	fba3 0302 	umull	r0, r3, r3, r2
 800c8ce:	095b      	lsrs	r3, r3, #5
 800c8d0:	2064      	movs	r0, #100	@ 0x64
 800c8d2:	fb00 f303 	mul.w	r3, r0, r3
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	011b      	lsls	r3, r3, #4
 800c8da:	3332      	adds	r3, #50	@ 0x32
 800c8dc:	4a07      	ldr	r2, [pc, #28]	@ (800c8fc <UART_SetConfig+0x118>)
 800c8de:	fba2 2303 	umull	r2, r3, r2, r3
 800c8e2:	095b      	lsrs	r3, r3, #5
 800c8e4:	f003 020f 	and.w	r2, r3, #15
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	440a      	add	r2, r1
 800c8ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c8f0:	bf00      	nop
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	40013800 	.word	0x40013800
 800c8fc:	51eb851f 	.word	0x51eb851f

0800c900 <SPI_2_ClearBuffers>:
		SPI_2.count=0;
	}
}

void SPI_2_ClearBuffers(void)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<SPI_BUFFER_SIZE;i++)
 800c906:	2300      	movs	r3, #0
 800c908:	71fb      	strb	r3, [r7, #7]
 800c90a:	e011      	b.n	800c930 <SPI_2_ClearBuffers+0x30>
	{
		SPI_2.resiveBuffer[i]=0;
 800c90c:	79fb      	ldrb	r3, [r7, #7]
 800c90e:	4a0d      	ldr	r2, [pc, #52]	@ (800c944 <SPI_2_ClearBuffers+0x44>)
 800c910:	4413      	add	r3, r2
 800c912:	2200      	movs	r2, #0
 800c914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		SPI_2.transmitBuffer[i]=0;
 800c918:	79fb      	ldrb	r3, [r7, #7]
 800c91a:	4a0a      	ldr	r2, [pc, #40]	@ (800c944 <SPI_2_ClearBuffers+0x44>)
 800c91c:	4413      	add	r3, r2
 800c91e:	2200      	movs	r2, #0
 800c920:	705a      	strb	r2, [r3, #1]
		SPI_2.count=0;
 800c922:	4b08      	ldr	r3, [pc, #32]	@ (800c944 <SPI_2_ClearBuffers+0x44>)
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	for(uint8_t i=0;i<SPI_BUFFER_SIZE;i++)
 800c92a:	79fb      	ldrb	r3, [r7, #7]
 800c92c:	3301      	adds	r3, #1
 800c92e:	71fb      	strb	r3, [r7, #7]
 800c930:	79fb      	ldrb	r3, [r7, #7]
 800c932:	2b1f      	cmp	r3, #31
 800c934:	d9ea      	bls.n	800c90c <SPI_2_ClearBuffers+0xc>
	}
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bc80      	pop	{r7}
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	200003f8 	.word	0x200003f8

0800c948 <SPI_2_Transmit>:

bool SPI_2_Transmit (void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
bool result=false;
 800c94e:	2300      	movs	r3, #0
 800c950:	71fb      	strb	r3, [r7, #7]

	if(SPI_2.status==SPI_IDLE)
 800c952:	4b0e      	ldr	r3, [pc, #56]	@ (800c98c <SPI_2_Transmit+0x44>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d112      	bne.n	800c980 <SPI_2_Transmit+0x38>
	{
		SPI_2.status=SPI_BYSY;
 800c95a:	4b0c      	ldr	r3, [pc, #48]	@ (800c98c <SPI_2_Transmit+0x44>)
 800c95c:	2201      	movs	r2, #1
 800c95e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET );
 800c960:	2200      	movs	r2, #0
 800c962:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c966:	480a      	ldr	r0, [pc, #40]	@ (800c990 <SPI_2_Transmit+0x48>)
 800c968:	f7fc fd09 	bl	800937e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi2, SPI_2.transmitBuffer, SPI_2.count);
 800c96c:	4b07      	ldr	r3, [pc, #28]	@ (800c98c <SPI_2_Transmit+0x44>)
 800c96e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c972:	461a      	mov	r2, r3
 800c974:	4907      	ldr	r1, [pc, #28]	@ (800c994 <SPI_2_Transmit+0x4c>)
 800c976:	4808      	ldr	r0, [pc, #32]	@ (800c998 <SPI_2_Transmit+0x50>)
 800c978:	f7fe ff84 	bl	800b884 <HAL_SPI_Transmit_IT>
		result=true;
 800c97c:	2301      	movs	r3, #1
 800c97e:	71fb      	strb	r3, [r7, #7]
	}
return result;
 800c980:	79fb      	ldrb	r3, [r7, #7]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	200003f8 	.word	0x200003f8
 800c990:	40010c00 	.word	0x40010c00
 800c994:	200003f9 	.word	0x200003f9
 800c998:	2000034c 	.word	0x2000034c

0800c99c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)	//Функция вызывается по завершению передачи
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET );
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c9aa:	4806      	ldr	r0, [pc, #24]	@ (800c9c4 <HAL_SPI_TxCpltCallback+0x28>)
 800c9ac:	f7fc fce7 	bl	800937e <HAL_GPIO_WritePin>
	SPI_2.status=SPI_IDLE;
 800c9b0:	4b05      	ldr	r3, [pc, #20]	@ (800c9c8 <HAL_SPI_TxCpltCallback+0x2c>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	701a      	strb	r2, [r3, #0]
	SPI_2_ClearBuffers();
 800c9b6:	f7ff ffa3 	bl	800c900 <SPI_2_ClearBuffers>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	40010c00 	.word	0x40010c00
 800c9c8:	200003f8 	.word	0x200003f8

0800c9cc <UART_1_ClearBuffers>:
		UART_1.count=0;
	}
}

void UART_1_ClearBuffers(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<UART_BUFFER_SIZE;i++)
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	71fb      	strb	r3, [r7, #7]
 800c9d6:	e010      	b.n	800c9fa <UART_1_ClearBuffers+0x2e>
	{
		UART_1.resiveBuffer[i]=0;
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	4a0c      	ldr	r2, [pc, #48]	@ (800ca0c <UART_1_ClearBuffers+0x40>)
 800c9dc:	4413      	add	r3, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	745a      	strb	r2, [r3, #17]
		UART_1.transmitBuffer[i]=0;
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	4a09      	ldr	r2, [pc, #36]	@ (800ca0c <UART_1_ClearBuffers+0x40>)
 800c9e6:	4413      	add	r3, r2
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	705a      	strb	r2, [r3, #1]
		UART_1.count=0;
 800c9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <UART_1_ClearBuffers+0x40>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	for(uint8_t i=0;i<UART_BUFFER_SIZE;i++)
 800c9f4:	79fb      	ldrb	r3, [r7, #7]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	71fb      	strb	r3, [r7, #7]
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	2b0f      	cmp	r3, #15
 800c9fe:	d9eb      	bls.n	800c9d8 <UART_1_ClearBuffers+0xc>
	}
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	370c      	adds	r7, #12
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bc80      	pop	{r7}
 800ca0a:	4770      	bx	lr
 800ca0c:	2000043c 	.word	0x2000043c

0800ca10 <UART_1_Transmit>:

bool UART_1_Transmit (void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
bool result=false;
 800ca16:	2300      	movs	r3, #0
 800ca18:	71fb      	strb	r3, [r7, #7]

	if(UART_1.status==UART_IDLE)
 800ca1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca48 <UART_1_Transmit+0x38>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10c      	bne.n	800ca3c <UART_1_Transmit+0x2c>
	{
		UART_1.status=UART_BYSY;
 800ca22:	4b09      	ldr	r3, [pc, #36]	@ (800ca48 <UART_1_Transmit+0x38>)
 800ca24:	2201      	movs	r2, #1
 800ca26:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, UART_1.transmitBuffer, UART_1.count);
 800ca28:	4b07      	ldr	r3, [pc, #28]	@ (800ca48 <UART_1_Transmit+0x38>)
 800ca2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ca2e:	461a      	mov	r2, r3
 800ca30:	4906      	ldr	r1, [pc, #24]	@ (800ca4c <UART_1_Transmit+0x3c>)
 800ca32:	4807      	ldr	r0, [pc, #28]	@ (800ca50 <UART_1_Transmit+0x40>)
 800ca34:	f7ff fa56 	bl	800bee4 <HAL_UART_Transmit_IT>
		result=true;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	71fb      	strb	r3, [r7, #7]
	}
return result;
 800ca3c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	2000043c 	.word	0x2000043c
 800ca4c:	2000043d 	.word	0x2000043d
 800ca50:	200003a4 	.word	0x200003a4

0800ca54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hUART)	//Функция вызывается по завершению передачи
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	UART_1.status=UART_IDLE;
 800ca5c:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <HAL_UART_TxCpltCallback+0x1c>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
	UART_1_ClearBuffers();
 800ca62:	f7ff ffb3 	bl	800c9cc <UART_1_ClearBuffers>
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	2000043c 	.word	0x2000043c

0800ca74 <srand>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4b10      	ldr	r3, [pc, #64]	@ (800cab8 <srand+0x44>)
 800ca78:	4604      	mov	r4, r0
 800ca7a:	681d      	ldr	r5, [r3, #0]
 800ca7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ca7e:	b9b3      	cbnz	r3, 800caae <srand+0x3a>
 800ca80:	2018      	movs	r0, #24
 800ca82:	f000 fa4b 	bl	800cf1c <malloc>
 800ca86:	4602      	mov	r2, r0
 800ca88:	6328      	str	r0, [r5, #48]	@ 0x30
 800ca8a:	b920      	cbnz	r0, 800ca96 <srand+0x22>
 800ca8c:	2146      	movs	r1, #70	@ 0x46
 800ca8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cabc <srand+0x48>)
 800ca90:	480b      	ldr	r0, [pc, #44]	@ (800cac0 <srand+0x4c>)
 800ca92:	f000 f9dd 	bl	800ce50 <__assert_func>
 800ca96:	490b      	ldr	r1, [pc, #44]	@ (800cac4 <srand+0x50>)
 800ca98:	4b0b      	ldr	r3, [pc, #44]	@ (800cac8 <srand+0x54>)
 800ca9a:	e9c0 1300 	strd	r1, r3, [r0]
 800ca9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cacc <srand+0x58>)
 800caa0:	2100      	movs	r1, #0
 800caa2:	6083      	str	r3, [r0, #8]
 800caa4:	230b      	movs	r3, #11
 800caa6:	8183      	strh	r3, [r0, #12]
 800caa8:	2001      	movs	r0, #1
 800caaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800caae:	2200      	movs	r2, #0
 800cab0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cab2:	611c      	str	r4, [r3, #16]
 800cab4:	615a      	str	r2, [r3, #20]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	200000b0 	.word	0x200000b0
 800cabc:	0800e396 	.word	0x0800e396
 800cac0:	0800e3ad 	.word	0x0800e3ad
 800cac4:	abcd330e 	.word	0xabcd330e
 800cac8:	e66d1234 	.word	0xe66d1234
 800cacc:	0005deec 	.word	0x0005deec

0800cad0 <rand>:
 800cad0:	4b16      	ldr	r3, [pc, #88]	@ (800cb2c <rand+0x5c>)
 800cad2:	b510      	push	{r4, lr}
 800cad4:	681c      	ldr	r4, [r3, #0]
 800cad6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cad8:	b9b3      	cbnz	r3, 800cb08 <rand+0x38>
 800cada:	2018      	movs	r0, #24
 800cadc:	f000 fa1e 	bl	800cf1c <malloc>
 800cae0:	4602      	mov	r2, r0
 800cae2:	6320      	str	r0, [r4, #48]	@ 0x30
 800cae4:	b920      	cbnz	r0, 800caf0 <rand+0x20>
 800cae6:	2152      	movs	r1, #82	@ 0x52
 800cae8:	4b11      	ldr	r3, [pc, #68]	@ (800cb30 <rand+0x60>)
 800caea:	4812      	ldr	r0, [pc, #72]	@ (800cb34 <rand+0x64>)
 800caec:	f000 f9b0 	bl	800ce50 <__assert_func>
 800caf0:	4911      	ldr	r1, [pc, #68]	@ (800cb38 <rand+0x68>)
 800caf2:	4b12      	ldr	r3, [pc, #72]	@ (800cb3c <rand+0x6c>)
 800caf4:	e9c0 1300 	strd	r1, r3, [r0]
 800caf8:	4b11      	ldr	r3, [pc, #68]	@ (800cb40 <rand+0x70>)
 800cafa:	2100      	movs	r1, #0
 800cafc:	6083      	str	r3, [r0, #8]
 800cafe:	230b      	movs	r3, #11
 800cb00:	8183      	strh	r3, [r0, #12]
 800cb02:	2001      	movs	r0, #1
 800cb04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cb08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cb0a:	480e      	ldr	r0, [pc, #56]	@ (800cb44 <rand+0x74>)
 800cb0c:	690b      	ldr	r3, [r1, #16]
 800cb0e:	694c      	ldr	r4, [r1, #20]
 800cb10:	4358      	muls	r0, r3
 800cb12:	4a0d      	ldr	r2, [pc, #52]	@ (800cb48 <rand+0x78>)
 800cb14:	fb02 0004 	mla	r0, r2, r4, r0
 800cb18:	fba3 3202 	umull	r3, r2, r3, r2
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	eb40 0002 	adc.w	r0, r0, r2
 800cb22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cb26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cb2a:	bd10      	pop	{r4, pc}
 800cb2c:	200000b0 	.word	0x200000b0
 800cb30:	0800e396 	.word	0x0800e396
 800cb34:	0800e3ad 	.word	0x0800e3ad
 800cb38:	abcd330e 	.word	0xabcd330e
 800cb3c:	e66d1234 	.word	0xe66d1234
 800cb40:	0005deec 	.word	0x0005deec
 800cb44:	5851f42d 	.word	0x5851f42d
 800cb48:	4c957f2d 	.word	0x4c957f2d

0800cb4c <std>:
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	b510      	push	{r4, lr}
 800cb50:	4604      	mov	r4, r0
 800cb52:	e9c0 3300 	strd	r3, r3, [r0]
 800cb56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb5a:	6083      	str	r3, [r0, #8]
 800cb5c:	8181      	strh	r1, [r0, #12]
 800cb5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb60:	81c2      	strh	r2, [r0, #14]
 800cb62:	6183      	str	r3, [r0, #24]
 800cb64:	4619      	mov	r1, r3
 800cb66:	2208      	movs	r2, #8
 800cb68:	305c      	adds	r0, #92	@ 0x5c
 800cb6a:	f000 f8f4 	bl	800cd56 <memset>
 800cb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cba4 <std+0x58>)
 800cb70:	6224      	str	r4, [r4, #32]
 800cb72:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb74:	4b0c      	ldr	r3, [pc, #48]	@ (800cba8 <std+0x5c>)
 800cb76:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb78:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <std+0x60>)
 800cb7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb0 <std+0x64>)
 800cb7e:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb80:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb4 <std+0x68>)
 800cb82:	429c      	cmp	r4, r3
 800cb84:	d006      	beq.n	800cb94 <std+0x48>
 800cb86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb8a:	4294      	cmp	r4, r2
 800cb8c:	d002      	beq.n	800cb94 <std+0x48>
 800cb8e:	33d0      	adds	r3, #208	@ 0xd0
 800cb90:	429c      	cmp	r4, r3
 800cb92:	d105      	bne.n	800cba0 <std+0x54>
 800cb94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb9c:	f000 b954 	b.w	800ce48 <__retarget_lock_init_recursive>
 800cba0:	bd10      	pop	{r4, pc}
 800cba2:	bf00      	nop
 800cba4:	0800ccd1 	.word	0x0800ccd1
 800cba8:	0800ccf3 	.word	0x0800ccf3
 800cbac:	0800cd2b 	.word	0x0800cd2b
 800cbb0:	0800cd4f 	.word	0x0800cd4f
 800cbb4:	20000460 	.word	0x20000460

0800cbb8 <stdio_exit_handler>:
 800cbb8:	4a02      	ldr	r2, [pc, #8]	@ (800cbc4 <stdio_exit_handler+0xc>)
 800cbba:	4903      	ldr	r1, [pc, #12]	@ (800cbc8 <stdio_exit_handler+0x10>)
 800cbbc:	4803      	ldr	r0, [pc, #12]	@ (800cbcc <stdio_exit_handler+0x14>)
 800cbbe:	f000 b869 	b.w	800cc94 <_fwalk_sglue>
 800cbc2:	bf00      	nop
 800cbc4:	200000a4 	.word	0x200000a4
 800cbc8:	0800d189 	.word	0x0800d189
 800cbcc:	200000b4 	.word	0x200000b4

0800cbd0 <cleanup_stdio>:
 800cbd0:	6841      	ldr	r1, [r0, #4]
 800cbd2:	4b0c      	ldr	r3, [pc, #48]	@ (800cc04 <cleanup_stdio+0x34>)
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	4299      	cmp	r1, r3
 800cbd8:	4604      	mov	r4, r0
 800cbda:	d001      	beq.n	800cbe0 <cleanup_stdio+0x10>
 800cbdc:	f000 fad4 	bl	800d188 <_fflush_r>
 800cbe0:	68a1      	ldr	r1, [r4, #8]
 800cbe2:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <cleanup_stdio+0x38>)
 800cbe4:	4299      	cmp	r1, r3
 800cbe6:	d002      	beq.n	800cbee <cleanup_stdio+0x1e>
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 facd 	bl	800d188 <_fflush_r>
 800cbee:	68e1      	ldr	r1, [r4, #12]
 800cbf0:	4b06      	ldr	r3, [pc, #24]	@ (800cc0c <cleanup_stdio+0x3c>)
 800cbf2:	4299      	cmp	r1, r3
 800cbf4:	d004      	beq.n	800cc00 <cleanup_stdio+0x30>
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbfc:	f000 bac4 	b.w	800d188 <_fflush_r>
 800cc00:	bd10      	pop	{r4, pc}
 800cc02:	bf00      	nop
 800cc04:	20000460 	.word	0x20000460
 800cc08:	200004c8 	.word	0x200004c8
 800cc0c:	20000530 	.word	0x20000530

0800cc10 <global_stdio_init.part.0>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4b0b      	ldr	r3, [pc, #44]	@ (800cc40 <global_stdio_init.part.0+0x30>)
 800cc14:	4c0b      	ldr	r4, [pc, #44]	@ (800cc44 <global_stdio_init.part.0+0x34>)
 800cc16:	4a0c      	ldr	r2, [pc, #48]	@ (800cc48 <global_stdio_init.part.0+0x38>)
 800cc18:	4620      	mov	r0, r4
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	2104      	movs	r1, #4
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f7ff ff94 	bl	800cb4c <std>
 800cc24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cc28:	2201      	movs	r2, #1
 800cc2a:	2109      	movs	r1, #9
 800cc2c:	f7ff ff8e 	bl	800cb4c <std>
 800cc30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cc34:	2202      	movs	r2, #2
 800cc36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc3a:	2112      	movs	r1, #18
 800cc3c:	f7ff bf86 	b.w	800cb4c <std>
 800cc40:	20000598 	.word	0x20000598
 800cc44:	20000460 	.word	0x20000460
 800cc48:	0800cbb9 	.word	0x0800cbb9

0800cc4c <__sfp_lock_acquire>:
 800cc4c:	4801      	ldr	r0, [pc, #4]	@ (800cc54 <__sfp_lock_acquire+0x8>)
 800cc4e:	f000 b8fc 	b.w	800ce4a <__retarget_lock_acquire_recursive>
 800cc52:	bf00      	nop
 800cc54:	200005a1 	.word	0x200005a1

0800cc58 <__sfp_lock_release>:
 800cc58:	4801      	ldr	r0, [pc, #4]	@ (800cc60 <__sfp_lock_release+0x8>)
 800cc5a:	f000 b8f7 	b.w	800ce4c <__retarget_lock_release_recursive>
 800cc5e:	bf00      	nop
 800cc60:	200005a1 	.word	0x200005a1

0800cc64 <__sinit>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	4604      	mov	r4, r0
 800cc68:	f7ff fff0 	bl	800cc4c <__sfp_lock_acquire>
 800cc6c:	6a23      	ldr	r3, [r4, #32]
 800cc6e:	b11b      	cbz	r3, 800cc78 <__sinit+0x14>
 800cc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc74:	f7ff bff0 	b.w	800cc58 <__sfp_lock_release>
 800cc78:	4b04      	ldr	r3, [pc, #16]	@ (800cc8c <__sinit+0x28>)
 800cc7a:	6223      	str	r3, [r4, #32]
 800cc7c:	4b04      	ldr	r3, [pc, #16]	@ (800cc90 <__sinit+0x2c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1f5      	bne.n	800cc70 <__sinit+0xc>
 800cc84:	f7ff ffc4 	bl	800cc10 <global_stdio_init.part.0>
 800cc88:	e7f2      	b.n	800cc70 <__sinit+0xc>
 800cc8a:	bf00      	nop
 800cc8c:	0800cbd1 	.word	0x0800cbd1
 800cc90:	20000598 	.word	0x20000598

0800cc94 <_fwalk_sglue>:
 800cc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc98:	4607      	mov	r7, r0
 800cc9a:	4688      	mov	r8, r1
 800cc9c:	4614      	mov	r4, r2
 800cc9e:	2600      	movs	r6, #0
 800cca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cca4:	f1b9 0901 	subs.w	r9, r9, #1
 800cca8:	d505      	bpl.n	800ccb6 <_fwalk_sglue+0x22>
 800ccaa:	6824      	ldr	r4, [r4, #0]
 800ccac:	2c00      	cmp	r4, #0
 800ccae:	d1f7      	bne.n	800cca0 <_fwalk_sglue+0xc>
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d907      	bls.n	800cccc <_fwalk_sglue+0x38>
 800ccbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	d003      	beq.n	800cccc <_fwalk_sglue+0x38>
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	47c0      	blx	r8
 800ccca:	4306      	orrs	r6, r0
 800cccc:	3568      	adds	r5, #104	@ 0x68
 800ccce:	e7e9      	b.n	800cca4 <_fwalk_sglue+0x10>

0800ccd0 <__sread>:
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd8:	f000 f868 	bl	800cdac <_read_r>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	bfab      	itete	ge
 800cce0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cce2:	89a3      	ldrhlt	r3, [r4, #12]
 800cce4:	181b      	addge	r3, r3, r0
 800cce6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccea:	bfac      	ite	ge
 800ccec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccee:	81a3      	strhlt	r3, [r4, #12]
 800ccf0:	bd10      	pop	{r4, pc}

0800ccf2 <__swrite>:
 800ccf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf6:	461f      	mov	r7, r3
 800ccf8:	898b      	ldrh	r3, [r1, #12]
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	05db      	lsls	r3, r3, #23
 800ccfe:	460c      	mov	r4, r1
 800cd00:	4616      	mov	r6, r2
 800cd02:	d505      	bpl.n	800cd10 <__swrite+0x1e>
 800cd04:	2302      	movs	r3, #2
 800cd06:	2200      	movs	r2, #0
 800cd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd0c:	f000 f83c 	bl	800cd88 <_lseek_r>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	4632      	mov	r2, r6
 800cd14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd18:	81a3      	strh	r3, [r4, #12]
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	463b      	mov	r3, r7
 800cd1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd26:	f000 b853 	b.w	800cdd0 <_write_r>

0800cd2a <__sseek>:
 800cd2a:	b510      	push	{r4, lr}
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd32:	f000 f829 	bl	800cd88 <_lseek_r>
 800cd36:	1c43      	adds	r3, r0, #1
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	bf15      	itete	ne
 800cd3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd46:	81a3      	strheq	r3, [r4, #12]
 800cd48:	bf18      	it	ne
 800cd4a:	81a3      	strhne	r3, [r4, #12]
 800cd4c:	bd10      	pop	{r4, pc}

0800cd4e <__sclose>:
 800cd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd52:	f000 b809 	b.w	800cd68 <_close_r>

0800cd56 <memset>:
 800cd56:	4603      	mov	r3, r0
 800cd58:	4402      	add	r2, r0
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d100      	bne.n	800cd60 <memset+0xa>
 800cd5e:	4770      	bx	lr
 800cd60:	f803 1b01 	strb.w	r1, [r3], #1
 800cd64:	e7f9      	b.n	800cd5a <memset+0x4>
	...

0800cd68 <_close_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	4d05      	ldr	r5, [pc, #20]	@ (800cd84 <_close_r+0x1c>)
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	602b      	str	r3, [r5, #0]
 800cd74:	f7fb fa87 	bl	8008286 <_close>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_close_r+0x1a>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_close_r+0x1a>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	2000059c 	.word	0x2000059c

0800cd88 <_lseek_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	2200      	movs	r2, #0
 800cd92:	4d05      	ldr	r5, [pc, #20]	@ (800cda8 <_lseek_r+0x20>)
 800cd94:	602a      	str	r2, [r5, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	f7fb fa99 	bl	80082ce <_lseek>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_lseek_r+0x1e>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_lseek_r+0x1e>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	2000059c 	.word	0x2000059c

0800cdac <_read_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	4d05      	ldr	r5, [pc, #20]	@ (800cdcc <_read_r+0x20>)
 800cdb8:	602a      	str	r2, [r5, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7fb fa2a 	bl	8008214 <_read>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_read_r+0x1e>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_read_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	2000059c 	.word	0x2000059c

0800cdd0 <_write_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4d05      	ldr	r5, [pc, #20]	@ (800cdf0 <_write_r+0x20>)
 800cddc:	602a      	str	r2, [r5, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	f7fb fa35 	bl	800824e <_write>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d102      	bne.n	800cdee <_write_r+0x1e>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	b103      	cbz	r3, 800cdee <_write_r+0x1e>
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	2000059c 	.word	0x2000059c

0800cdf4 <__errno>:
 800cdf4:	4b01      	ldr	r3, [pc, #4]	@ (800cdfc <__errno+0x8>)
 800cdf6:	6818      	ldr	r0, [r3, #0]
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	200000b0 	.word	0x200000b0

0800ce00 <__libc_init_array>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	2600      	movs	r6, #0
 800ce04:	4d0c      	ldr	r5, [pc, #48]	@ (800ce38 <__libc_init_array+0x38>)
 800ce06:	4c0d      	ldr	r4, [pc, #52]	@ (800ce3c <__libc_init_array+0x3c>)
 800ce08:	1b64      	subs	r4, r4, r5
 800ce0a:	10a4      	asrs	r4, r4, #2
 800ce0c:	42a6      	cmp	r6, r4
 800ce0e:	d109      	bne.n	800ce24 <__libc_init_array+0x24>
 800ce10:	f001 f9ac 	bl	800e16c <_init>
 800ce14:	2600      	movs	r6, #0
 800ce16:	4d0a      	ldr	r5, [pc, #40]	@ (800ce40 <__libc_init_array+0x40>)
 800ce18:	4c0a      	ldr	r4, [pc, #40]	@ (800ce44 <__libc_init_array+0x44>)
 800ce1a:	1b64      	subs	r4, r4, r5
 800ce1c:	10a4      	asrs	r4, r4, #2
 800ce1e:	42a6      	cmp	r6, r4
 800ce20:	d105      	bne.n	800ce2e <__libc_init_array+0x2e>
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce28:	4798      	blx	r3
 800ce2a:	3601      	adds	r6, #1
 800ce2c:	e7ee      	b.n	800ce0c <__libc_init_array+0xc>
 800ce2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce32:	4798      	blx	r3
 800ce34:	3601      	adds	r6, #1
 800ce36:	e7f2      	b.n	800ce1e <__libc_init_array+0x1e>
 800ce38:	0800e4e8 	.word	0x0800e4e8
 800ce3c:	0800e4e8 	.word	0x0800e4e8
 800ce40:	0800e4e8 	.word	0x0800e4e8
 800ce44:	0800e4ec 	.word	0x0800e4ec

0800ce48 <__retarget_lock_init_recursive>:
 800ce48:	4770      	bx	lr

0800ce4a <__retarget_lock_acquire_recursive>:
 800ce4a:	4770      	bx	lr

0800ce4c <__retarget_lock_release_recursive>:
 800ce4c:	4770      	bx	lr
	...

0800ce50 <__assert_func>:
 800ce50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce52:	4614      	mov	r4, r2
 800ce54:	461a      	mov	r2, r3
 800ce56:	4b09      	ldr	r3, [pc, #36]	@ (800ce7c <__assert_func+0x2c>)
 800ce58:	4605      	mov	r5, r0
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68d8      	ldr	r0, [r3, #12]
 800ce5e:	b954      	cbnz	r4, 800ce76 <__assert_func+0x26>
 800ce60:	4b07      	ldr	r3, [pc, #28]	@ (800ce80 <__assert_func+0x30>)
 800ce62:	461c      	mov	r4, r3
 800ce64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce68:	9100      	str	r1, [sp, #0]
 800ce6a:	462b      	mov	r3, r5
 800ce6c:	4905      	ldr	r1, [pc, #20]	@ (800ce84 <__assert_func+0x34>)
 800ce6e:	f000 f9b3 	bl	800d1d8 <fiprintf>
 800ce72:	f000 f9d3 	bl	800d21c <abort>
 800ce76:	4b04      	ldr	r3, [pc, #16]	@ (800ce88 <__assert_func+0x38>)
 800ce78:	e7f4      	b.n	800ce64 <__assert_func+0x14>
 800ce7a:	bf00      	nop
 800ce7c:	200000b0 	.word	0x200000b0
 800ce80:	0800e440 	.word	0x0800e440
 800ce84:	0800e412 	.word	0x0800e412
 800ce88:	0800e405 	.word	0x0800e405

0800ce8c <_free_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4605      	mov	r5, r0
 800ce90:	2900      	cmp	r1, #0
 800ce92:	d040      	beq.n	800cf16 <_free_r+0x8a>
 800ce94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce98:	1f0c      	subs	r4, r1, #4
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bfb8      	it	lt
 800ce9e:	18e4      	addlt	r4, r4, r3
 800cea0:	f000 f8e6 	bl	800d070 <__malloc_lock>
 800cea4:	4a1c      	ldr	r2, [pc, #112]	@ (800cf18 <_free_r+0x8c>)
 800cea6:	6813      	ldr	r3, [r2, #0]
 800cea8:	b933      	cbnz	r3, 800ceb8 <_free_r+0x2c>
 800ceaa:	6063      	str	r3, [r4, #4]
 800ceac:	6014      	str	r4, [r2, #0]
 800ceae:	4628      	mov	r0, r5
 800ceb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceb4:	f000 b8e2 	b.w	800d07c <__malloc_unlock>
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	d908      	bls.n	800cece <_free_r+0x42>
 800cebc:	6820      	ldr	r0, [r4, #0]
 800cebe:	1821      	adds	r1, r4, r0
 800cec0:	428b      	cmp	r3, r1
 800cec2:	bf01      	itttt	eq
 800cec4:	6819      	ldreq	r1, [r3, #0]
 800cec6:	685b      	ldreq	r3, [r3, #4]
 800cec8:	1809      	addeq	r1, r1, r0
 800ceca:	6021      	streq	r1, [r4, #0]
 800cecc:	e7ed      	b.n	800ceaa <_free_r+0x1e>
 800cece:	461a      	mov	r2, r3
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	b10b      	cbz	r3, 800ced8 <_free_r+0x4c>
 800ced4:	42a3      	cmp	r3, r4
 800ced6:	d9fa      	bls.n	800cece <_free_r+0x42>
 800ced8:	6811      	ldr	r1, [r2, #0]
 800ceda:	1850      	adds	r0, r2, r1
 800cedc:	42a0      	cmp	r0, r4
 800cede:	d10b      	bne.n	800cef8 <_free_r+0x6c>
 800cee0:	6820      	ldr	r0, [r4, #0]
 800cee2:	4401      	add	r1, r0
 800cee4:	1850      	adds	r0, r2, r1
 800cee6:	4283      	cmp	r3, r0
 800cee8:	6011      	str	r1, [r2, #0]
 800ceea:	d1e0      	bne.n	800ceae <_free_r+0x22>
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	4408      	add	r0, r1
 800cef2:	6010      	str	r0, [r2, #0]
 800cef4:	6053      	str	r3, [r2, #4]
 800cef6:	e7da      	b.n	800ceae <_free_r+0x22>
 800cef8:	d902      	bls.n	800cf00 <_free_r+0x74>
 800cefa:	230c      	movs	r3, #12
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	e7d6      	b.n	800ceae <_free_r+0x22>
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	1821      	adds	r1, r4, r0
 800cf04:	428b      	cmp	r3, r1
 800cf06:	bf01      	itttt	eq
 800cf08:	6819      	ldreq	r1, [r3, #0]
 800cf0a:	685b      	ldreq	r3, [r3, #4]
 800cf0c:	1809      	addeq	r1, r1, r0
 800cf0e:	6021      	streq	r1, [r4, #0]
 800cf10:	6063      	str	r3, [r4, #4]
 800cf12:	6054      	str	r4, [r2, #4]
 800cf14:	e7cb      	b.n	800ceae <_free_r+0x22>
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	200005a8 	.word	0x200005a8

0800cf1c <malloc>:
 800cf1c:	4b02      	ldr	r3, [pc, #8]	@ (800cf28 <malloc+0xc>)
 800cf1e:	4601      	mov	r1, r0
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f000 b825 	b.w	800cf70 <_malloc_r>
 800cf26:	bf00      	nop
 800cf28:	200000b0 	.word	0x200000b0

0800cf2c <sbrk_aligned>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	4e0f      	ldr	r6, [pc, #60]	@ (800cf6c <sbrk_aligned+0x40>)
 800cf30:	460c      	mov	r4, r1
 800cf32:	6831      	ldr	r1, [r6, #0]
 800cf34:	4605      	mov	r5, r0
 800cf36:	b911      	cbnz	r1, 800cf3e <sbrk_aligned+0x12>
 800cf38:	f000 f960 	bl	800d1fc <_sbrk_r>
 800cf3c:	6030      	str	r0, [r6, #0]
 800cf3e:	4621      	mov	r1, r4
 800cf40:	4628      	mov	r0, r5
 800cf42:	f000 f95b 	bl	800d1fc <_sbrk_r>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d103      	bne.n	800cf52 <sbrk_aligned+0x26>
 800cf4a:	f04f 34ff 	mov.w	r4, #4294967295
 800cf4e:	4620      	mov	r0, r4
 800cf50:	bd70      	pop	{r4, r5, r6, pc}
 800cf52:	1cc4      	adds	r4, r0, #3
 800cf54:	f024 0403 	bic.w	r4, r4, #3
 800cf58:	42a0      	cmp	r0, r4
 800cf5a:	d0f8      	beq.n	800cf4e <sbrk_aligned+0x22>
 800cf5c:	1a21      	subs	r1, r4, r0
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f000 f94c 	bl	800d1fc <_sbrk_r>
 800cf64:	3001      	adds	r0, #1
 800cf66:	d1f2      	bne.n	800cf4e <sbrk_aligned+0x22>
 800cf68:	e7ef      	b.n	800cf4a <sbrk_aligned+0x1e>
 800cf6a:	bf00      	nop
 800cf6c:	200005a4 	.word	0x200005a4

0800cf70 <_malloc_r>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	1ccd      	adds	r5, r1, #3
 800cf76:	f025 0503 	bic.w	r5, r5, #3
 800cf7a:	3508      	adds	r5, #8
 800cf7c:	2d0c      	cmp	r5, #12
 800cf7e:	bf38      	it	cc
 800cf80:	250c      	movcc	r5, #12
 800cf82:	2d00      	cmp	r5, #0
 800cf84:	4606      	mov	r6, r0
 800cf86:	db01      	blt.n	800cf8c <_malloc_r+0x1c>
 800cf88:	42a9      	cmp	r1, r5
 800cf8a:	d904      	bls.n	800cf96 <_malloc_r+0x26>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	6033      	str	r3, [r6, #0]
 800cf90:	2000      	movs	r0, #0
 800cf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d06c <_malloc_r+0xfc>
 800cf9a:	f000 f869 	bl	800d070 <__malloc_lock>
 800cf9e:	f8d8 3000 	ldr.w	r3, [r8]
 800cfa2:	461c      	mov	r4, r3
 800cfa4:	bb44      	cbnz	r4, 800cff8 <_malloc_r+0x88>
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7ff ffbf 	bl	800cf2c <sbrk_aligned>
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	d158      	bne.n	800d066 <_malloc_r+0xf6>
 800cfb4:	f8d8 4000 	ldr.w	r4, [r8]
 800cfb8:	4627      	mov	r7, r4
 800cfba:	2f00      	cmp	r7, #0
 800cfbc:	d143      	bne.n	800d046 <_malloc_r+0xd6>
 800cfbe:	2c00      	cmp	r4, #0
 800cfc0:	d04b      	beq.n	800d05a <_malloc_r+0xea>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	eb04 0903 	add.w	r9, r4, r3
 800cfcc:	f000 f916 	bl	800d1fc <_sbrk_r>
 800cfd0:	4581      	cmp	r9, r0
 800cfd2:	d142      	bne.n	800d05a <_malloc_r+0xea>
 800cfd4:	6821      	ldr	r1, [r4, #0]
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	1a6d      	subs	r5, r5, r1
 800cfda:	4629      	mov	r1, r5
 800cfdc:	f7ff ffa6 	bl	800cf2c <sbrk_aligned>
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	d03a      	beq.n	800d05a <_malloc_r+0xea>
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	442b      	add	r3, r5
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	f8d8 3000 	ldr.w	r3, [r8]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	bb62      	cbnz	r2, 800d04c <_malloc_r+0xdc>
 800cff2:	f8c8 7000 	str.w	r7, [r8]
 800cff6:	e00f      	b.n	800d018 <_malloc_r+0xa8>
 800cff8:	6822      	ldr	r2, [r4, #0]
 800cffa:	1b52      	subs	r2, r2, r5
 800cffc:	d420      	bmi.n	800d040 <_malloc_r+0xd0>
 800cffe:	2a0b      	cmp	r2, #11
 800d000:	d917      	bls.n	800d032 <_malloc_r+0xc2>
 800d002:	1961      	adds	r1, r4, r5
 800d004:	42a3      	cmp	r3, r4
 800d006:	6025      	str	r5, [r4, #0]
 800d008:	bf18      	it	ne
 800d00a:	6059      	strne	r1, [r3, #4]
 800d00c:	6863      	ldr	r3, [r4, #4]
 800d00e:	bf08      	it	eq
 800d010:	f8c8 1000 	streq.w	r1, [r8]
 800d014:	5162      	str	r2, [r4, r5]
 800d016:	604b      	str	r3, [r1, #4]
 800d018:	4630      	mov	r0, r6
 800d01a:	f000 f82f 	bl	800d07c <__malloc_unlock>
 800d01e:	f104 000b 	add.w	r0, r4, #11
 800d022:	1d23      	adds	r3, r4, #4
 800d024:	f020 0007 	bic.w	r0, r0, #7
 800d028:	1ac2      	subs	r2, r0, r3
 800d02a:	bf1c      	itt	ne
 800d02c:	1a1b      	subne	r3, r3, r0
 800d02e:	50a3      	strne	r3, [r4, r2]
 800d030:	e7af      	b.n	800cf92 <_malloc_r+0x22>
 800d032:	6862      	ldr	r2, [r4, #4]
 800d034:	42a3      	cmp	r3, r4
 800d036:	bf0c      	ite	eq
 800d038:	f8c8 2000 	streq.w	r2, [r8]
 800d03c:	605a      	strne	r2, [r3, #4]
 800d03e:	e7eb      	b.n	800d018 <_malloc_r+0xa8>
 800d040:	4623      	mov	r3, r4
 800d042:	6864      	ldr	r4, [r4, #4]
 800d044:	e7ae      	b.n	800cfa4 <_malloc_r+0x34>
 800d046:	463c      	mov	r4, r7
 800d048:	687f      	ldr	r7, [r7, #4]
 800d04a:	e7b6      	b.n	800cfba <_malloc_r+0x4a>
 800d04c:	461a      	mov	r2, r3
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	42a3      	cmp	r3, r4
 800d052:	d1fb      	bne.n	800d04c <_malloc_r+0xdc>
 800d054:	2300      	movs	r3, #0
 800d056:	6053      	str	r3, [r2, #4]
 800d058:	e7de      	b.n	800d018 <_malloc_r+0xa8>
 800d05a:	230c      	movs	r3, #12
 800d05c:	4630      	mov	r0, r6
 800d05e:	6033      	str	r3, [r6, #0]
 800d060:	f000 f80c 	bl	800d07c <__malloc_unlock>
 800d064:	e794      	b.n	800cf90 <_malloc_r+0x20>
 800d066:	6005      	str	r5, [r0, #0]
 800d068:	e7d6      	b.n	800d018 <_malloc_r+0xa8>
 800d06a:	bf00      	nop
 800d06c:	200005a8 	.word	0x200005a8

0800d070 <__malloc_lock>:
 800d070:	4801      	ldr	r0, [pc, #4]	@ (800d078 <__malloc_lock+0x8>)
 800d072:	f7ff beea 	b.w	800ce4a <__retarget_lock_acquire_recursive>
 800d076:	bf00      	nop
 800d078:	200005a0 	.word	0x200005a0

0800d07c <__malloc_unlock>:
 800d07c:	4801      	ldr	r0, [pc, #4]	@ (800d084 <__malloc_unlock+0x8>)
 800d07e:	f7ff bee5 	b.w	800ce4c <__retarget_lock_release_recursive>
 800d082:	bf00      	nop
 800d084:	200005a0 	.word	0x200005a0

0800d088 <__sflush_r>:
 800d088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08e:	0716      	lsls	r6, r2, #28
 800d090:	4605      	mov	r5, r0
 800d092:	460c      	mov	r4, r1
 800d094:	d454      	bmi.n	800d140 <__sflush_r+0xb8>
 800d096:	684b      	ldr	r3, [r1, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	dc02      	bgt.n	800d0a2 <__sflush_r+0x1a>
 800d09c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	dd48      	ble.n	800d134 <__sflush_r+0xac>
 800d0a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0a4:	2e00      	cmp	r6, #0
 800d0a6:	d045      	beq.n	800d134 <__sflush_r+0xac>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d0ae:	682f      	ldr	r7, [r5, #0]
 800d0b0:	6a21      	ldr	r1, [r4, #32]
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	d030      	beq.n	800d118 <__sflush_r+0x90>
 800d0b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	0759      	lsls	r1, r3, #29
 800d0bc:	d505      	bpl.n	800d0ca <__sflush_r+0x42>
 800d0be:	6863      	ldr	r3, [r4, #4]
 800d0c0:	1ad2      	subs	r2, r2, r3
 800d0c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0c4:	b10b      	cbz	r3, 800d0ca <__sflush_r+0x42>
 800d0c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0d0:	6a21      	ldr	r1, [r4, #32]
 800d0d2:	47b0      	blx	r6
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	d106      	bne.n	800d0e8 <__sflush_r+0x60>
 800d0da:	6829      	ldr	r1, [r5, #0]
 800d0dc:	291d      	cmp	r1, #29
 800d0de:	d82b      	bhi.n	800d138 <__sflush_r+0xb0>
 800d0e0:	4a28      	ldr	r2, [pc, #160]	@ (800d184 <__sflush_r+0xfc>)
 800d0e2:	410a      	asrs	r2, r1
 800d0e4:	07d6      	lsls	r6, r2, #31
 800d0e6:	d427      	bmi.n	800d138 <__sflush_r+0xb0>
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	6062      	str	r2, [r4, #4]
 800d0ec:	6922      	ldr	r2, [r4, #16]
 800d0ee:	04d9      	lsls	r1, r3, #19
 800d0f0:	6022      	str	r2, [r4, #0]
 800d0f2:	d504      	bpl.n	800d0fe <__sflush_r+0x76>
 800d0f4:	1c42      	adds	r2, r0, #1
 800d0f6:	d101      	bne.n	800d0fc <__sflush_r+0x74>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b903      	cbnz	r3, 800d0fe <__sflush_r+0x76>
 800d0fc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d0fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d100:	602f      	str	r7, [r5, #0]
 800d102:	b1b9      	cbz	r1, 800d134 <__sflush_r+0xac>
 800d104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d108:	4299      	cmp	r1, r3
 800d10a:	d002      	beq.n	800d112 <__sflush_r+0x8a>
 800d10c:	4628      	mov	r0, r5
 800d10e:	f7ff febd 	bl	800ce8c <_free_r>
 800d112:	2300      	movs	r3, #0
 800d114:	6363      	str	r3, [r4, #52]	@ 0x34
 800d116:	e00d      	b.n	800d134 <__sflush_r+0xac>
 800d118:	2301      	movs	r3, #1
 800d11a:	4628      	mov	r0, r5
 800d11c:	47b0      	blx	r6
 800d11e:	4602      	mov	r2, r0
 800d120:	1c50      	adds	r0, r2, #1
 800d122:	d1c9      	bne.n	800d0b8 <__sflush_r+0x30>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0c6      	beq.n	800d0b8 <__sflush_r+0x30>
 800d12a:	2b1d      	cmp	r3, #29
 800d12c:	d001      	beq.n	800d132 <__sflush_r+0xaa>
 800d12e:	2b16      	cmp	r3, #22
 800d130:	d11d      	bne.n	800d16e <__sflush_r+0xe6>
 800d132:	602f      	str	r7, [r5, #0]
 800d134:	2000      	movs	r0, #0
 800d136:	e021      	b.n	800d17c <__sflush_r+0xf4>
 800d138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d13c:	b21b      	sxth	r3, r3
 800d13e:	e01a      	b.n	800d176 <__sflush_r+0xee>
 800d140:	690f      	ldr	r7, [r1, #16]
 800d142:	2f00      	cmp	r7, #0
 800d144:	d0f6      	beq.n	800d134 <__sflush_r+0xac>
 800d146:	0793      	lsls	r3, r2, #30
 800d148:	bf18      	it	ne
 800d14a:	2300      	movne	r3, #0
 800d14c:	680e      	ldr	r6, [r1, #0]
 800d14e:	bf08      	it	eq
 800d150:	694b      	ldreq	r3, [r1, #20]
 800d152:	1bf6      	subs	r6, r6, r7
 800d154:	600f      	str	r7, [r1, #0]
 800d156:	608b      	str	r3, [r1, #8]
 800d158:	2e00      	cmp	r6, #0
 800d15a:	ddeb      	ble.n	800d134 <__sflush_r+0xac>
 800d15c:	4633      	mov	r3, r6
 800d15e:	463a      	mov	r2, r7
 800d160:	4628      	mov	r0, r5
 800d162:	6a21      	ldr	r1, [r4, #32]
 800d164:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d168:	47e0      	blx	ip
 800d16a:	2800      	cmp	r0, #0
 800d16c:	dc07      	bgt.n	800d17e <__sflush_r+0xf6>
 800d16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d176:	f04f 30ff 	mov.w	r0, #4294967295
 800d17a:	81a3      	strh	r3, [r4, #12]
 800d17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d17e:	4407      	add	r7, r0
 800d180:	1a36      	subs	r6, r6, r0
 800d182:	e7e9      	b.n	800d158 <__sflush_r+0xd0>
 800d184:	dfbffffe 	.word	0xdfbffffe

0800d188 <_fflush_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	690b      	ldr	r3, [r1, #16]
 800d18c:	4605      	mov	r5, r0
 800d18e:	460c      	mov	r4, r1
 800d190:	b913      	cbnz	r3, 800d198 <_fflush_r+0x10>
 800d192:	2500      	movs	r5, #0
 800d194:	4628      	mov	r0, r5
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	b118      	cbz	r0, 800d1a2 <_fflush_r+0x1a>
 800d19a:	6a03      	ldr	r3, [r0, #32]
 800d19c:	b90b      	cbnz	r3, 800d1a2 <_fflush_r+0x1a>
 800d19e:	f7ff fd61 	bl	800cc64 <__sinit>
 800d1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0f3      	beq.n	800d192 <_fflush_r+0xa>
 800d1aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d1ac:	07d0      	lsls	r0, r2, #31
 800d1ae:	d404      	bmi.n	800d1ba <_fflush_r+0x32>
 800d1b0:	0599      	lsls	r1, r3, #22
 800d1b2:	d402      	bmi.n	800d1ba <_fflush_r+0x32>
 800d1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1b6:	f7ff fe48 	bl	800ce4a <__retarget_lock_acquire_recursive>
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	4621      	mov	r1, r4
 800d1be:	f7ff ff63 	bl	800d088 <__sflush_r>
 800d1c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	07da      	lsls	r2, r3, #31
 800d1c8:	d4e4      	bmi.n	800d194 <_fflush_r+0xc>
 800d1ca:	89a3      	ldrh	r3, [r4, #12]
 800d1cc:	059b      	lsls	r3, r3, #22
 800d1ce:	d4e1      	bmi.n	800d194 <_fflush_r+0xc>
 800d1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1d2:	f7ff fe3b 	bl	800ce4c <__retarget_lock_release_recursive>
 800d1d6:	e7dd      	b.n	800d194 <_fflush_r+0xc>

0800d1d8 <fiprintf>:
 800d1d8:	b40e      	push	{r1, r2, r3}
 800d1da:	b503      	push	{r0, r1, lr}
 800d1dc:	4601      	mov	r1, r0
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	4805      	ldr	r0, [pc, #20]	@ (800d1f8 <fiprintf+0x20>)
 800d1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e6:	6800      	ldr	r0, [r0, #0]
 800d1e8:	9301      	str	r3, [sp, #4]
 800d1ea:	f000 f845 	bl	800d278 <_vfiprintf_r>
 800d1ee:	b002      	add	sp, #8
 800d1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1f4:	b003      	add	sp, #12
 800d1f6:	4770      	bx	lr
 800d1f8:	200000b0 	.word	0x200000b0

0800d1fc <_sbrk_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	2300      	movs	r3, #0
 800d200:	4d05      	ldr	r5, [pc, #20]	@ (800d218 <_sbrk_r+0x1c>)
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	602b      	str	r3, [r5, #0]
 800d208:	f7fb f86e 	bl	80082e8 <_sbrk>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d102      	bne.n	800d216 <_sbrk_r+0x1a>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	b103      	cbz	r3, 800d216 <_sbrk_r+0x1a>
 800d214:	6023      	str	r3, [r4, #0]
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	2000059c 	.word	0x2000059c

0800d21c <abort>:
 800d21c:	2006      	movs	r0, #6
 800d21e:	b508      	push	{r3, lr}
 800d220:	f000 fb90 	bl	800d944 <raise>
 800d224:	2001      	movs	r0, #1
 800d226:	f7fa ffea 	bl	80081fe <_exit>

0800d22a <__sfputc_r>:
 800d22a:	6893      	ldr	r3, [r2, #8]
 800d22c:	b410      	push	{r4}
 800d22e:	3b01      	subs	r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	6093      	str	r3, [r2, #8]
 800d234:	da07      	bge.n	800d246 <__sfputc_r+0x1c>
 800d236:	6994      	ldr	r4, [r2, #24]
 800d238:	42a3      	cmp	r3, r4
 800d23a:	db01      	blt.n	800d240 <__sfputc_r+0x16>
 800d23c:	290a      	cmp	r1, #10
 800d23e:	d102      	bne.n	800d246 <__sfputc_r+0x1c>
 800d240:	bc10      	pop	{r4}
 800d242:	f000 bac3 	b.w	800d7cc <__swbuf_r>
 800d246:	6813      	ldr	r3, [r2, #0]
 800d248:	1c58      	adds	r0, r3, #1
 800d24a:	6010      	str	r0, [r2, #0]
 800d24c:	7019      	strb	r1, [r3, #0]
 800d24e:	4608      	mov	r0, r1
 800d250:	bc10      	pop	{r4}
 800d252:	4770      	bx	lr

0800d254 <__sfputs_r>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	4606      	mov	r6, r0
 800d258:	460f      	mov	r7, r1
 800d25a:	4614      	mov	r4, r2
 800d25c:	18d5      	adds	r5, r2, r3
 800d25e:	42ac      	cmp	r4, r5
 800d260:	d101      	bne.n	800d266 <__sfputs_r+0x12>
 800d262:	2000      	movs	r0, #0
 800d264:	e007      	b.n	800d276 <__sfputs_r+0x22>
 800d266:	463a      	mov	r2, r7
 800d268:	4630      	mov	r0, r6
 800d26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26e:	f7ff ffdc 	bl	800d22a <__sfputc_r>
 800d272:	1c43      	adds	r3, r0, #1
 800d274:	d1f3      	bne.n	800d25e <__sfputs_r+0xa>
 800d276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d278 <_vfiprintf_r>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	460d      	mov	r5, r1
 800d27e:	4614      	mov	r4, r2
 800d280:	4698      	mov	r8, r3
 800d282:	4606      	mov	r6, r0
 800d284:	b09d      	sub	sp, #116	@ 0x74
 800d286:	b118      	cbz	r0, 800d290 <_vfiprintf_r+0x18>
 800d288:	6a03      	ldr	r3, [r0, #32]
 800d28a:	b90b      	cbnz	r3, 800d290 <_vfiprintf_r+0x18>
 800d28c:	f7ff fcea 	bl	800cc64 <__sinit>
 800d290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d292:	07d9      	lsls	r1, r3, #31
 800d294:	d405      	bmi.n	800d2a2 <_vfiprintf_r+0x2a>
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	059a      	lsls	r2, r3, #22
 800d29a:	d402      	bmi.n	800d2a2 <_vfiprintf_r+0x2a>
 800d29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29e:	f7ff fdd4 	bl	800ce4a <__retarget_lock_acquire_recursive>
 800d2a2:	89ab      	ldrh	r3, [r5, #12]
 800d2a4:	071b      	lsls	r3, r3, #28
 800d2a6:	d501      	bpl.n	800d2ac <_vfiprintf_r+0x34>
 800d2a8:	692b      	ldr	r3, [r5, #16]
 800d2aa:	b99b      	cbnz	r3, 800d2d4 <_vfiprintf_r+0x5c>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f000 faca 	bl	800d848 <__swsetup_r>
 800d2b4:	b170      	cbz	r0, 800d2d4 <_vfiprintf_r+0x5c>
 800d2b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2b8:	07dc      	lsls	r4, r3, #31
 800d2ba:	d504      	bpl.n	800d2c6 <_vfiprintf_r+0x4e>
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	b01d      	add	sp, #116	@ 0x74
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	89ab      	ldrh	r3, [r5, #12]
 800d2c8:	0598      	lsls	r0, r3, #22
 800d2ca:	d4f7      	bmi.n	800d2bc <_vfiprintf_r+0x44>
 800d2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ce:	f7ff fdbd 	bl	800ce4c <__retarget_lock_release_recursive>
 800d2d2:	e7f3      	b.n	800d2bc <_vfiprintf_r+0x44>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2d8:	2320      	movs	r3, #32
 800d2da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2de:	2330      	movs	r3, #48	@ 0x30
 800d2e0:	f04f 0901 	mov.w	r9, #1
 800d2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d494 <_vfiprintf_r+0x21c>
 800d2ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2f0:	4623      	mov	r3, r4
 800d2f2:	469a      	mov	sl, r3
 800d2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2f8:	b10a      	cbz	r2, 800d2fe <_vfiprintf_r+0x86>
 800d2fa:	2a25      	cmp	r2, #37	@ 0x25
 800d2fc:	d1f9      	bne.n	800d2f2 <_vfiprintf_r+0x7a>
 800d2fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d302:	d00b      	beq.n	800d31c <_vfiprintf_r+0xa4>
 800d304:	465b      	mov	r3, fp
 800d306:	4622      	mov	r2, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	4630      	mov	r0, r6
 800d30c:	f7ff ffa2 	bl	800d254 <__sfputs_r>
 800d310:	3001      	adds	r0, #1
 800d312:	f000 80a7 	beq.w	800d464 <_vfiprintf_r+0x1ec>
 800d316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d318:	445a      	add	r2, fp
 800d31a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d31c:	f89a 3000 	ldrb.w	r3, [sl]
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 809f 	beq.w	800d464 <_vfiprintf_r+0x1ec>
 800d326:	2300      	movs	r3, #0
 800d328:	f04f 32ff 	mov.w	r2, #4294967295
 800d32c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d330:	f10a 0a01 	add.w	sl, sl, #1
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	9307      	str	r3, [sp, #28]
 800d338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d33c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d33e:	4654      	mov	r4, sl
 800d340:	2205      	movs	r2, #5
 800d342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d346:	4853      	ldr	r0, [pc, #332]	@ (800d494 <_vfiprintf_r+0x21c>)
 800d348:	f000 fb18 	bl	800d97c <memchr>
 800d34c:	9a04      	ldr	r2, [sp, #16]
 800d34e:	b9d8      	cbnz	r0, 800d388 <_vfiprintf_r+0x110>
 800d350:	06d1      	lsls	r1, r2, #27
 800d352:	bf44      	itt	mi
 800d354:	2320      	movmi	r3, #32
 800d356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d35a:	0713      	lsls	r3, r2, #28
 800d35c:	bf44      	itt	mi
 800d35e:	232b      	movmi	r3, #43	@ 0x2b
 800d360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d364:	f89a 3000 	ldrb.w	r3, [sl]
 800d368:	2b2a      	cmp	r3, #42	@ 0x2a
 800d36a:	d015      	beq.n	800d398 <_vfiprintf_r+0x120>
 800d36c:	4654      	mov	r4, sl
 800d36e:	2000      	movs	r0, #0
 800d370:	f04f 0c0a 	mov.w	ip, #10
 800d374:	9a07      	ldr	r2, [sp, #28]
 800d376:	4621      	mov	r1, r4
 800d378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d37c:	3b30      	subs	r3, #48	@ 0x30
 800d37e:	2b09      	cmp	r3, #9
 800d380:	d94b      	bls.n	800d41a <_vfiprintf_r+0x1a2>
 800d382:	b1b0      	cbz	r0, 800d3b2 <_vfiprintf_r+0x13a>
 800d384:	9207      	str	r2, [sp, #28]
 800d386:	e014      	b.n	800d3b2 <_vfiprintf_r+0x13a>
 800d388:	eba0 0308 	sub.w	r3, r0, r8
 800d38c:	fa09 f303 	lsl.w	r3, r9, r3
 800d390:	4313      	orrs	r3, r2
 800d392:	46a2      	mov	sl, r4
 800d394:	9304      	str	r3, [sp, #16]
 800d396:	e7d2      	b.n	800d33e <_vfiprintf_r+0xc6>
 800d398:	9b03      	ldr	r3, [sp, #12]
 800d39a:	1d19      	adds	r1, r3, #4
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	9103      	str	r1, [sp, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bfbb      	ittet	lt
 800d3a4:	425b      	neglt	r3, r3
 800d3a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d3aa:	9307      	strge	r3, [sp, #28]
 800d3ac:	9307      	strlt	r3, [sp, #28]
 800d3ae:	bfb8      	it	lt
 800d3b0:	9204      	strlt	r2, [sp, #16]
 800d3b2:	7823      	ldrb	r3, [r4, #0]
 800d3b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3b6:	d10a      	bne.n	800d3ce <_vfiprintf_r+0x156>
 800d3b8:	7863      	ldrb	r3, [r4, #1]
 800d3ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3bc:	d132      	bne.n	800d424 <_vfiprintf_r+0x1ac>
 800d3be:	9b03      	ldr	r3, [sp, #12]
 800d3c0:	3402      	adds	r4, #2
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	9203      	str	r2, [sp, #12]
 800d3c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d498 <_vfiprintf_r+0x220>
 800d3d2:	2203      	movs	r2, #3
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	7821      	ldrb	r1, [r4, #0]
 800d3d8:	f000 fad0 	bl	800d97c <memchr>
 800d3dc:	b138      	cbz	r0, 800d3ee <_vfiprintf_r+0x176>
 800d3de:	2240      	movs	r2, #64	@ 0x40
 800d3e0:	9b04      	ldr	r3, [sp, #16]
 800d3e2:	eba0 000a 	sub.w	r0, r0, sl
 800d3e6:	4082      	lsls	r2, r0
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	3401      	adds	r4, #1
 800d3ec:	9304      	str	r3, [sp, #16]
 800d3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f2:	2206      	movs	r2, #6
 800d3f4:	4829      	ldr	r0, [pc, #164]	@ (800d49c <_vfiprintf_r+0x224>)
 800d3f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3fa:	f000 fabf 	bl	800d97c <memchr>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d03f      	beq.n	800d482 <_vfiprintf_r+0x20a>
 800d402:	4b27      	ldr	r3, [pc, #156]	@ (800d4a0 <_vfiprintf_r+0x228>)
 800d404:	bb1b      	cbnz	r3, 800d44e <_vfiprintf_r+0x1d6>
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	3307      	adds	r3, #7
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	3308      	adds	r3, #8
 800d410:	9303      	str	r3, [sp, #12]
 800d412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d414:	443b      	add	r3, r7
 800d416:	9309      	str	r3, [sp, #36]	@ 0x24
 800d418:	e76a      	b.n	800d2f0 <_vfiprintf_r+0x78>
 800d41a:	460c      	mov	r4, r1
 800d41c:	2001      	movs	r0, #1
 800d41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d422:	e7a8      	b.n	800d376 <_vfiprintf_r+0xfe>
 800d424:	2300      	movs	r3, #0
 800d426:	f04f 0c0a 	mov.w	ip, #10
 800d42a:	4619      	mov	r1, r3
 800d42c:	3401      	adds	r4, #1
 800d42e:	9305      	str	r3, [sp, #20]
 800d430:	4620      	mov	r0, r4
 800d432:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d436:	3a30      	subs	r2, #48	@ 0x30
 800d438:	2a09      	cmp	r2, #9
 800d43a:	d903      	bls.n	800d444 <_vfiprintf_r+0x1cc>
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0c6      	beq.n	800d3ce <_vfiprintf_r+0x156>
 800d440:	9105      	str	r1, [sp, #20]
 800d442:	e7c4      	b.n	800d3ce <_vfiprintf_r+0x156>
 800d444:	4604      	mov	r4, r0
 800d446:	2301      	movs	r3, #1
 800d448:	fb0c 2101 	mla	r1, ip, r1, r2
 800d44c:	e7f0      	b.n	800d430 <_vfiprintf_r+0x1b8>
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	462a      	mov	r2, r5
 800d454:	4630      	mov	r0, r6
 800d456:	4b13      	ldr	r3, [pc, #76]	@ (800d4a4 <_vfiprintf_r+0x22c>)
 800d458:	a904      	add	r1, sp, #16
 800d45a:	f3af 8000 	nop.w
 800d45e:	4607      	mov	r7, r0
 800d460:	1c78      	adds	r0, r7, #1
 800d462:	d1d6      	bne.n	800d412 <_vfiprintf_r+0x19a>
 800d464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d466:	07d9      	lsls	r1, r3, #31
 800d468:	d405      	bmi.n	800d476 <_vfiprintf_r+0x1fe>
 800d46a:	89ab      	ldrh	r3, [r5, #12]
 800d46c:	059a      	lsls	r2, r3, #22
 800d46e:	d402      	bmi.n	800d476 <_vfiprintf_r+0x1fe>
 800d470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d472:	f7ff fceb 	bl	800ce4c <__retarget_lock_release_recursive>
 800d476:	89ab      	ldrh	r3, [r5, #12]
 800d478:	065b      	lsls	r3, r3, #25
 800d47a:	f53f af1f 	bmi.w	800d2bc <_vfiprintf_r+0x44>
 800d47e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d480:	e71e      	b.n	800d2c0 <_vfiprintf_r+0x48>
 800d482:	ab03      	add	r3, sp, #12
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	462a      	mov	r2, r5
 800d488:	4630      	mov	r0, r6
 800d48a:	4b06      	ldr	r3, [pc, #24]	@ (800d4a4 <_vfiprintf_r+0x22c>)
 800d48c:	a904      	add	r1, sp, #16
 800d48e:	f000 f87d 	bl	800d58c <_printf_i>
 800d492:	e7e4      	b.n	800d45e <_vfiprintf_r+0x1e6>
 800d494:	0800e441 	.word	0x0800e441
 800d498:	0800e447 	.word	0x0800e447
 800d49c:	0800e44b 	.word	0x0800e44b
 800d4a0:	00000000 	.word	0x00000000
 800d4a4:	0800d255 	.word	0x0800d255

0800d4a8 <_printf_common>:
 800d4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ac:	4616      	mov	r6, r2
 800d4ae:	4698      	mov	r8, r3
 800d4b0:	688a      	ldr	r2, [r1, #8]
 800d4b2:	690b      	ldr	r3, [r1, #16]
 800d4b4:	4607      	mov	r7, r0
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	bfb8      	it	lt
 800d4ba:	4613      	movlt	r3, r2
 800d4bc:	6033      	str	r3, [r6, #0]
 800d4be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4c8:	b10a      	cbz	r2, 800d4ce <_printf_common+0x26>
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	6033      	str	r3, [r6, #0]
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	0699      	lsls	r1, r3, #26
 800d4d2:	bf42      	ittt	mi
 800d4d4:	6833      	ldrmi	r3, [r6, #0]
 800d4d6:	3302      	addmi	r3, #2
 800d4d8:	6033      	strmi	r3, [r6, #0]
 800d4da:	6825      	ldr	r5, [r4, #0]
 800d4dc:	f015 0506 	ands.w	r5, r5, #6
 800d4e0:	d106      	bne.n	800d4f0 <_printf_common+0x48>
 800d4e2:	f104 0a19 	add.w	sl, r4, #25
 800d4e6:	68e3      	ldr	r3, [r4, #12]
 800d4e8:	6832      	ldr	r2, [r6, #0]
 800d4ea:	1a9b      	subs	r3, r3, r2
 800d4ec:	42ab      	cmp	r3, r5
 800d4ee:	dc2b      	bgt.n	800d548 <_printf_common+0xa0>
 800d4f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4f4:	6822      	ldr	r2, [r4, #0]
 800d4f6:	3b00      	subs	r3, #0
 800d4f8:	bf18      	it	ne
 800d4fa:	2301      	movne	r3, #1
 800d4fc:	0692      	lsls	r2, r2, #26
 800d4fe:	d430      	bmi.n	800d562 <_printf_common+0xba>
 800d500:	4641      	mov	r1, r8
 800d502:	4638      	mov	r0, r7
 800d504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d508:	47c8      	blx	r9
 800d50a:	3001      	adds	r0, #1
 800d50c:	d023      	beq.n	800d556 <_printf_common+0xae>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	6922      	ldr	r2, [r4, #16]
 800d512:	f003 0306 	and.w	r3, r3, #6
 800d516:	2b04      	cmp	r3, #4
 800d518:	bf14      	ite	ne
 800d51a:	2500      	movne	r5, #0
 800d51c:	6833      	ldreq	r3, [r6, #0]
 800d51e:	f04f 0600 	mov.w	r6, #0
 800d522:	bf08      	it	eq
 800d524:	68e5      	ldreq	r5, [r4, #12]
 800d526:	f104 041a 	add.w	r4, r4, #26
 800d52a:	bf08      	it	eq
 800d52c:	1aed      	subeq	r5, r5, r3
 800d52e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d532:	bf08      	it	eq
 800d534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d538:	4293      	cmp	r3, r2
 800d53a:	bfc4      	itt	gt
 800d53c:	1a9b      	subgt	r3, r3, r2
 800d53e:	18ed      	addgt	r5, r5, r3
 800d540:	42b5      	cmp	r5, r6
 800d542:	d11a      	bne.n	800d57a <_printf_common+0xd2>
 800d544:	2000      	movs	r0, #0
 800d546:	e008      	b.n	800d55a <_printf_common+0xb2>
 800d548:	2301      	movs	r3, #1
 800d54a:	4652      	mov	r2, sl
 800d54c:	4641      	mov	r1, r8
 800d54e:	4638      	mov	r0, r7
 800d550:	47c8      	blx	r9
 800d552:	3001      	adds	r0, #1
 800d554:	d103      	bne.n	800d55e <_printf_common+0xb6>
 800d556:	f04f 30ff 	mov.w	r0, #4294967295
 800d55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55e:	3501      	adds	r5, #1
 800d560:	e7c1      	b.n	800d4e6 <_printf_common+0x3e>
 800d562:	2030      	movs	r0, #48	@ 0x30
 800d564:	18e1      	adds	r1, r4, r3
 800d566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d56a:	1c5a      	adds	r2, r3, #1
 800d56c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d570:	4422      	add	r2, r4
 800d572:	3302      	adds	r3, #2
 800d574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d578:	e7c2      	b.n	800d500 <_printf_common+0x58>
 800d57a:	2301      	movs	r3, #1
 800d57c:	4622      	mov	r2, r4
 800d57e:	4641      	mov	r1, r8
 800d580:	4638      	mov	r0, r7
 800d582:	47c8      	blx	r9
 800d584:	3001      	adds	r0, #1
 800d586:	d0e6      	beq.n	800d556 <_printf_common+0xae>
 800d588:	3601      	adds	r6, #1
 800d58a:	e7d9      	b.n	800d540 <_printf_common+0x98>

0800d58c <_printf_i>:
 800d58c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	7e0f      	ldrb	r7, [r1, #24]
 800d592:	4691      	mov	r9, r2
 800d594:	2f78      	cmp	r7, #120	@ 0x78
 800d596:	4680      	mov	r8, r0
 800d598:	460c      	mov	r4, r1
 800d59a:	469a      	mov	sl, r3
 800d59c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d59e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5a2:	d807      	bhi.n	800d5b4 <_printf_i+0x28>
 800d5a4:	2f62      	cmp	r7, #98	@ 0x62
 800d5a6:	d80a      	bhi.n	800d5be <_printf_i+0x32>
 800d5a8:	2f00      	cmp	r7, #0
 800d5aa:	f000 80d3 	beq.w	800d754 <_printf_i+0x1c8>
 800d5ae:	2f58      	cmp	r7, #88	@ 0x58
 800d5b0:	f000 80ba 	beq.w	800d728 <_printf_i+0x19c>
 800d5b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5bc:	e03a      	b.n	800d634 <_printf_i+0xa8>
 800d5be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5c2:	2b15      	cmp	r3, #21
 800d5c4:	d8f6      	bhi.n	800d5b4 <_printf_i+0x28>
 800d5c6:	a101      	add	r1, pc, #4	@ (adr r1, 800d5cc <_printf_i+0x40>)
 800d5c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5cc:	0800d625 	.word	0x0800d625
 800d5d0:	0800d639 	.word	0x0800d639
 800d5d4:	0800d5b5 	.word	0x0800d5b5
 800d5d8:	0800d5b5 	.word	0x0800d5b5
 800d5dc:	0800d5b5 	.word	0x0800d5b5
 800d5e0:	0800d5b5 	.word	0x0800d5b5
 800d5e4:	0800d639 	.word	0x0800d639
 800d5e8:	0800d5b5 	.word	0x0800d5b5
 800d5ec:	0800d5b5 	.word	0x0800d5b5
 800d5f0:	0800d5b5 	.word	0x0800d5b5
 800d5f4:	0800d5b5 	.word	0x0800d5b5
 800d5f8:	0800d73b 	.word	0x0800d73b
 800d5fc:	0800d663 	.word	0x0800d663
 800d600:	0800d6f5 	.word	0x0800d6f5
 800d604:	0800d5b5 	.word	0x0800d5b5
 800d608:	0800d5b5 	.word	0x0800d5b5
 800d60c:	0800d75d 	.word	0x0800d75d
 800d610:	0800d5b5 	.word	0x0800d5b5
 800d614:	0800d663 	.word	0x0800d663
 800d618:	0800d5b5 	.word	0x0800d5b5
 800d61c:	0800d5b5 	.word	0x0800d5b5
 800d620:	0800d6fd 	.word	0x0800d6fd
 800d624:	6833      	ldr	r3, [r6, #0]
 800d626:	1d1a      	adds	r2, r3, #4
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6032      	str	r2, [r6, #0]
 800d62c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d634:	2301      	movs	r3, #1
 800d636:	e09e      	b.n	800d776 <_printf_i+0x1ea>
 800d638:	6833      	ldr	r3, [r6, #0]
 800d63a:	6820      	ldr	r0, [r4, #0]
 800d63c:	1d19      	adds	r1, r3, #4
 800d63e:	6031      	str	r1, [r6, #0]
 800d640:	0606      	lsls	r6, r0, #24
 800d642:	d501      	bpl.n	800d648 <_printf_i+0xbc>
 800d644:	681d      	ldr	r5, [r3, #0]
 800d646:	e003      	b.n	800d650 <_printf_i+0xc4>
 800d648:	0645      	lsls	r5, r0, #25
 800d64a:	d5fb      	bpl.n	800d644 <_printf_i+0xb8>
 800d64c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d650:	2d00      	cmp	r5, #0
 800d652:	da03      	bge.n	800d65c <_printf_i+0xd0>
 800d654:	232d      	movs	r3, #45	@ 0x2d
 800d656:	426d      	negs	r5, r5
 800d658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d65c:	230a      	movs	r3, #10
 800d65e:	4859      	ldr	r0, [pc, #356]	@ (800d7c4 <_printf_i+0x238>)
 800d660:	e011      	b.n	800d686 <_printf_i+0xfa>
 800d662:	6821      	ldr	r1, [r4, #0]
 800d664:	6833      	ldr	r3, [r6, #0]
 800d666:	0608      	lsls	r0, r1, #24
 800d668:	f853 5b04 	ldr.w	r5, [r3], #4
 800d66c:	d402      	bmi.n	800d674 <_printf_i+0xe8>
 800d66e:	0649      	lsls	r1, r1, #25
 800d670:	bf48      	it	mi
 800d672:	b2ad      	uxthmi	r5, r5
 800d674:	2f6f      	cmp	r7, #111	@ 0x6f
 800d676:	6033      	str	r3, [r6, #0]
 800d678:	bf14      	ite	ne
 800d67a:	230a      	movne	r3, #10
 800d67c:	2308      	moveq	r3, #8
 800d67e:	4851      	ldr	r0, [pc, #324]	@ (800d7c4 <_printf_i+0x238>)
 800d680:	2100      	movs	r1, #0
 800d682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d686:	6866      	ldr	r6, [r4, #4]
 800d688:	2e00      	cmp	r6, #0
 800d68a:	bfa8      	it	ge
 800d68c:	6821      	ldrge	r1, [r4, #0]
 800d68e:	60a6      	str	r6, [r4, #8]
 800d690:	bfa4      	itt	ge
 800d692:	f021 0104 	bicge.w	r1, r1, #4
 800d696:	6021      	strge	r1, [r4, #0]
 800d698:	b90d      	cbnz	r5, 800d69e <_printf_i+0x112>
 800d69a:	2e00      	cmp	r6, #0
 800d69c:	d04b      	beq.n	800d736 <_printf_i+0x1aa>
 800d69e:	4616      	mov	r6, r2
 800d6a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6a4:	fb03 5711 	mls	r7, r3, r1, r5
 800d6a8:	5dc7      	ldrb	r7, [r0, r7]
 800d6aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6ae:	462f      	mov	r7, r5
 800d6b0:	42bb      	cmp	r3, r7
 800d6b2:	460d      	mov	r5, r1
 800d6b4:	d9f4      	bls.n	800d6a0 <_printf_i+0x114>
 800d6b6:	2b08      	cmp	r3, #8
 800d6b8:	d10b      	bne.n	800d6d2 <_printf_i+0x146>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	07df      	lsls	r7, r3, #31
 800d6be:	d508      	bpl.n	800d6d2 <_printf_i+0x146>
 800d6c0:	6923      	ldr	r3, [r4, #16]
 800d6c2:	6861      	ldr	r1, [r4, #4]
 800d6c4:	4299      	cmp	r1, r3
 800d6c6:	bfde      	ittt	le
 800d6c8:	2330      	movle	r3, #48	@ 0x30
 800d6ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6d2:	1b92      	subs	r2, r2, r6
 800d6d4:	6122      	str	r2, [r4, #16]
 800d6d6:	464b      	mov	r3, r9
 800d6d8:	4621      	mov	r1, r4
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f8cd a000 	str.w	sl, [sp]
 800d6e0:	aa03      	add	r2, sp, #12
 800d6e2:	f7ff fee1 	bl	800d4a8 <_printf_common>
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	d14a      	bne.n	800d780 <_printf_i+0x1f4>
 800d6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ee:	b004      	add	sp, #16
 800d6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	f043 0320 	orr.w	r3, r3, #32
 800d6fa:	6023      	str	r3, [r4, #0]
 800d6fc:	2778      	movs	r7, #120	@ 0x78
 800d6fe:	4832      	ldr	r0, [pc, #200]	@ (800d7c8 <_printf_i+0x23c>)
 800d700:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	6831      	ldr	r1, [r6, #0]
 800d708:	061f      	lsls	r7, r3, #24
 800d70a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d70e:	d402      	bmi.n	800d716 <_printf_i+0x18a>
 800d710:	065f      	lsls	r7, r3, #25
 800d712:	bf48      	it	mi
 800d714:	b2ad      	uxthmi	r5, r5
 800d716:	6031      	str	r1, [r6, #0]
 800d718:	07d9      	lsls	r1, r3, #31
 800d71a:	bf44      	itt	mi
 800d71c:	f043 0320 	orrmi.w	r3, r3, #32
 800d720:	6023      	strmi	r3, [r4, #0]
 800d722:	b11d      	cbz	r5, 800d72c <_printf_i+0x1a0>
 800d724:	2310      	movs	r3, #16
 800d726:	e7ab      	b.n	800d680 <_printf_i+0xf4>
 800d728:	4826      	ldr	r0, [pc, #152]	@ (800d7c4 <_printf_i+0x238>)
 800d72a:	e7e9      	b.n	800d700 <_printf_i+0x174>
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	f023 0320 	bic.w	r3, r3, #32
 800d732:	6023      	str	r3, [r4, #0]
 800d734:	e7f6      	b.n	800d724 <_printf_i+0x198>
 800d736:	4616      	mov	r6, r2
 800d738:	e7bd      	b.n	800d6b6 <_printf_i+0x12a>
 800d73a:	6833      	ldr	r3, [r6, #0]
 800d73c:	6825      	ldr	r5, [r4, #0]
 800d73e:	1d18      	adds	r0, r3, #4
 800d740:	6961      	ldr	r1, [r4, #20]
 800d742:	6030      	str	r0, [r6, #0]
 800d744:	062e      	lsls	r6, r5, #24
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	d501      	bpl.n	800d74e <_printf_i+0x1c2>
 800d74a:	6019      	str	r1, [r3, #0]
 800d74c:	e002      	b.n	800d754 <_printf_i+0x1c8>
 800d74e:	0668      	lsls	r0, r5, #25
 800d750:	d5fb      	bpl.n	800d74a <_printf_i+0x1be>
 800d752:	8019      	strh	r1, [r3, #0]
 800d754:	2300      	movs	r3, #0
 800d756:	4616      	mov	r6, r2
 800d758:	6123      	str	r3, [r4, #16]
 800d75a:	e7bc      	b.n	800d6d6 <_printf_i+0x14a>
 800d75c:	6833      	ldr	r3, [r6, #0]
 800d75e:	2100      	movs	r1, #0
 800d760:	1d1a      	adds	r2, r3, #4
 800d762:	6032      	str	r2, [r6, #0]
 800d764:	681e      	ldr	r6, [r3, #0]
 800d766:	6862      	ldr	r2, [r4, #4]
 800d768:	4630      	mov	r0, r6
 800d76a:	f000 f907 	bl	800d97c <memchr>
 800d76e:	b108      	cbz	r0, 800d774 <_printf_i+0x1e8>
 800d770:	1b80      	subs	r0, r0, r6
 800d772:	6060      	str	r0, [r4, #4]
 800d774:	6863      	ldr	r3, [r4, #4]
 800d776:	6123      	str	r3, [r4, #16]
 800d778:	2300      	movs	r3, #0
 800d77a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d77e:	e7aa      	b.n	800d6d6 <_printf_i+0x14a>
 800d780:	4632      	mov	r2, r6
 800d782:	4649      	mov	r1, r9
 800d784:	4640      	mov	r0, r8
 800d786:	6923      	ldr	r3, [r4, #16]
 800d788:	47d0      	blx	sl
 800d78a:	3001      	adds	r0, #1
 800d78c:	d0ad      	beq.n	800d6ea <_printf_i+0x15e>
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	079b      	lsls	r3, r3, #30
 800d792:	d413      	bmi.n	800d7bc <_printf_i+0x230>
 800d794:	68e0      	ldr	r0, [r4, #12]
 800d796:	9b03      	ldr	r3, [sp, #12]
 800d798:	4298      	cmp	r0, r3
 800d79a:	bfb8      	it	lt
 800d79c:	4618      	movlt	r0, r3
 800d79e:	e7a6      	b.n	800d6ee <_printf_i+0x162>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	4632      	mov	r2, r6
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	47d0      	blx	sl
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	d09d      	beq.n	800d6ea <_printf_i+0x15e>
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	68e3      	ldr	r3, [r4, #12]
 800d7b2:	9903      	ldr	r1, [sp, #12]
 800d7b4:	1a5b      	subs	r3, r3, r1
 800d7b6:	42ab      	cmp	r3, r5
 800d7b8:	dcf2      	bgt.n	800d7a0 <_printf_i+0x214>
 800d7ba:	e7eb      	b.n	800d794 <_printf_i+0x208>
 800d7bc:	2500      	movs	r5, #0
 800d7be:	f104 0619 	add.w	r6, r4, #25
 800d7c2:	e7f5      	b.n	800d7b0 <_printf_i+0x224>
 800d7c4:	0800e452 	.word	0x0800e452
 800d7c8:	0800e463 	.word	0x0800e463

0800d7cc <__swbuf_r>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	460e      	mov	r6, r1
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	b118      	cbz	r0, 800d7de <__swbuf_r+0x12>
 800d7d6:	6a03      	ldr	r3, [r0, #32]
 800d7d8:	b90b      	cbnz	r3, 800d7de <__swbuf_r+0x12>
 800d7da:	f7ff fa43 	bl	800cc64 <__sinit>
 800d7de:	69a3      	ldr	r3, [r4, #24]
 800d7e0:	60a3      	str	r3, [r4, #8]
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	071a      	lsls	r2, r3, #28
 800d7e6:	d501      	bpl.n	800d7ec <__swbuf_r+0x20>
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	b943      	cbnz	r3, 800d7fe <__swbuf_r+0x32>
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 f82a 	bl	800d848 <__swsetup_r>
 800d7f4:	b118      	cbz	r0, 800d7fe <__swbuf_r+0x32>
 800d7f6:	f04f 37ff 	mov.w	r7, #4294967295
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	6922      	ldr	r2, [r4, #16]
 800d802:	b2f6      	uxtb	r6, r6
 800d804:	1a98      	subs	r0, r3, r2
 800d806:	6963      	ldr	r3, [r4, #20]
 800d808:	4637      	mov	r7, r6
 800d80a:	4283      	cmp	r3, r0
 800d80c:	dc05      	bgt.n	800d81a <__swbuf_r+0x4e>
 800d80e:	4621      	mov	r1, r4
 800d810:	4628      	mov	r0, r5
 800d812:	f7ff fcb9 	bl	800d188 <_fflush_r>
 800d816:	2800      	cmp	r0, #0
 800d818:	d1ed      	bne.n	800d7f6 <__swbuf_r+0x2a>
 800d81a:	68a3      	ldr	r3, [r4, #8]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	6022      	str	r2, [r4, #0]
 800d826:	701e      	strb	r6, [r3, #0]
 800d828:	6962      	ldr	r2, [r4, #20]
 800d82a:	1c43      	adds	r3, r0, #1
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d004      	beq.n	800d83a <__swbuf_r+0x6e>
 800d830:	89a3      	ldrh	r3, [r4, #12]
 800d832:	07db      	lsls	r3, r3, #31
 800d834:	d5e1      	bpl.n	800d7fa <__swbuf_r+0x2e>
 800d836:	2e0a      	cmp	r6, #10
 800d838:	d1df      	bne.n	800d7fa <__swbuf_r+0x2e>
 800d83a:	4621      	mov	r1, r4
 800d83c:	4628      	mov	r0, r5
 800d83e:	f7ff fca3 	bl	800d188 <_fflush_r>
 800d842:	2800      	cmp	r0, #0
 800d844:	d0d9      	beq.n	800d7fa <__swbuf_r+0x2e>
 800d846:	e7d6      	b.n	800d7f6 <__swbuf_r+0x2a>

0800d848 <__swsetup_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	4b29      	ldr	r3, [pc, #164]	@ (800d8f0 <__swsetup_r+0xa8>)
 800d84c:	4605      	mov	r5, r0
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	460c      	mov	r4, r1
 800d852:	b118      	cbz	r0, 800d85c <__swsetup_r+0x14>
 800d854:	6a03      	ldr	r3, [r0, #32]
 800d856:	b90b      	cbnz	r3, 800d85c <__swsetup_r+0x14>
 800d858:	f7ff fa04 	bl	800cc64 <__sinit>
 800d85c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d860:	0719      	lsls	r1, r3, #28
 800d862:	d422      	bmi.n	800d8aa <__swsetup_r+0x62>
 800d864:	06da      	lsls	r2, r3, #27
 800d866:	d407      	bmi.n	800d878 <__swsetup_r+0x30>
 800d868:	2209      	movs	r2, #9
 800d86a:	602a      	str	r2, [r5, #0]
 800d86c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d870:	f04f 30ff 	mov.w	r0, #4294967295
 800d874:	81a3      	strh	r3, [r4, #12]
 800d876:	e033      	b.n	800d8e0 <__swsetup_r+0x98>
 800d878:	0758      	lsls	r0, r3, #29
 800d87a:	d512      	bpl.n	800d8a2 <__swsetup_r+0x5a>
 800d87c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d87e:	b141      	cbz	r1, 800d892 <__swsetup_r+0x4a>
 800d880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d884:	4299      	cmp	r1, r3
 800d886:	d002      	beq.n	800d88e <__swsetup_r+0x46>
 800d888:	4628      	mov	r0, r5
 800d88a:	f7ff faff 	bl	800ce8c <_free_r>
 800d88e:	2300      	movs	r3, #0
 800d890:	6363      	str	r3, [r4, #52]	@ 0x34
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d898:	81a3      	strh	r3, [r4, #12]
 800d89a:	2300      	movs	r3, #0
 800d89c:	6063      	str	r3, [r4, #4]
 800d89e:	6923      	ldr	r3, [r4, #16]
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	f043 0308 	orr.w	r3, r3, #8
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	b94b      	cbnz	r3, 800d8c2 <__swsetup_r+0x7a>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8b8:	d003      	beq.n	800d8c2 <__swsetup_r+0x7a>
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f000 f890 	bl	800d9e2 <__smakebuf_r>
 800d8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c6:	f013 0201 	ands.w	r2, r3, #1
 800d8ca:	d00a      	beq.n	800d8e2 <__swsetup_r+0x9a>
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	60a2      	str	r2, [r4, #8]
 800d8d0:	6962      	ldr	r2, [r4, #20]
 800d8d2:	4252      	negs	r2, r2
 800d8d4:	61a2      	str	r2, [r4, #24]
 800d8d6:	6922      	ldr	r2, [r4, #16]
 800d8d8:	b942      	cbnz	r2, 800d8ec <__swsetup_r+0xa4>
 800d8da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8de:	d1c5      	bne.n	800d86c <__swsetup_r+0x24>
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	0799      	lsls	r1, r3, #30
 800d8e4:	bf58      	it	pl
 800d8e6:	6962      	ldrpl	r2, [r4, #20]
 800d8e8:	60a2      	str	r2, [r4, #8]
 800d8ea:	e7f4      	b.n	800d8d6 <__swsetup_r+0x8e>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e7f7      	b.n	800d8e0 <__swsetup_r+0x98>
 800d8f0:	200000b0 	.word	0x200000b0

0800d8f4 <_raise_r>:
 800d8f4:	291f      	cmp	r1, #31
 800d8f6:	b538      	push	{r3, r4, r5, lr}
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	d904      	bls.n	800d908 <_raise_r+0x14>
 800d8fe:	2316      	movs	r3, #22
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	f04f 30ff 	mov.w	r0, #4294967295
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d90a:	b112      	cbz	r2, 800d912 <_raise_r+0x1e>
 800d90c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d910:	b94b      	cbnz	r3, 800d926 <_raise_r+0x32>
 800d912:	4628      	mov	r0, r5
 800d914:	f000 f830 	bl	800d978 <_getpid_r>
 800d918:	4622      	mov	r2, r4
 800d91a:	4601      	mov	r1, r0
 800d91c:	4628      	mov	r0, r5
 800d91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d922:	f000 b817 	b.w	800d954 <_kill_r>
 800d926:	2b01      	cmp	r3, #1
 800d928:	d00a      	beq.n	800d940 <_raise_r+0x4c>
 800d92a:	1c59      	adds	r1, r3, #1
 800d92c:	d103      	bne.n	800d936 <_raise_r+0x42>
 800d92e:	2316      	movs	r3, #22
 800d930:	6003      	str	r3, [r0, #0]
 800d932:	2001      	movs	r0, #1
 800d934:	e7e7      	b.n	800d906 <_raise_r+0x12>
 800d936:	2100      	movs	r1, #0
 800d938:	4620      	mov	r0, r4
 800d93a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d93e:	4798      	blx	r3
 800d940:	2000      	movs	r0, #0
 800d942:	e7e0      	b.n	800d906 <_raise_r+0x12>

0800d944 <raise>:
 800d944:	4b02      	ldr	r3, [pc, #8]	@ (800d950 <raise+0xc>)
 800d946:	4601      	mov	r1, r0
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	f7ff bfd3 	b.w	800d8f4 <_raise_r>
 800d94e:	bf00      	nop
 800d950:	200000b0 	.word	0x200000b0

0800d954 <_kill_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	2300      	movs	r3, #0
 800d958:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_kill_r+0x20>)
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	4611      	mov	r1, r2
 800d960:	602b      	str	r3, [r5, #0]
 800d962:	f7fa fc3c 	bl	80081de <_kill>
 800d966:	1c43      	adds	r3, r0, #1
 800d968:	d102      	bne.n	800d970 <_kill_r+0x1c>
 800d96a:	682b      	ldr	r3, [r5, #0]
 800d96c:	b103      	cbz	r3, 800d970 <_kill_r+0x1c>
 800d96e:	6023      	str	r3, [r4, #0]
 800d970:	bd38      	pop	{r3, r4, r5, pc}
 800d972:	bf00      	nop
 800d974:	2000059c 	.word	0x2000059c

0800d978 <_getpid_r>:
 800d978:	f7fa bc2a 	b.w	80081d0 <_getpid>

0800d97c <memchr>:
 800d97c:	4603      	mov	r3, r0
 800d97e:	b510      	push	{r4, lr}
 800d980:	b2c9      	uxtb	r1, r1
 800d982:	4402      	add	r2, r0
 800d984:	4293      	cmp	r3, r2
 800d986:	4618      	mov	r0, r3
 800d988:	d101      	bne.n	800d98e <memchr+0x12>
 800d98a:	2000      	movs	r0, #0
 800d98c:	e003      	b.n	800d996 <memchr+0x1a>
 800d98e:	7804      	ldrb	r4, [r0, #0]
 800d990:	3301      	adds	r3, #1
 800d992:	428c      	cmp	r4, r1
 800d994:	d1f6      	bne.n	800d984 <memchr+0x8>
 800d996:	bd10      	pop	{r4, pc}

0800d998 <__swhatbuf_r>:
 800d998:	b570      	push	{r4, r5, r6, lr}
 800d99a:	460c      	mov	r4, r1
 800d99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a0:	4615      	mov	r5, r2
 800d9a2:	2900      	cmp	r1, #0
 800d9a4:	461e      	mov	r6, r3
 800d9a6:	b096      	sub	sp, #88	@ 0x58
 800d9a8:	da0c      	bge.n	800d9c4 <__swhatbuf_r+0x2c>
 800d9aa:	89a3      	ldrh	r3, [r4, #12]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9b2:	bf14      	ite	ne
 800d9b4:	2340      	movne	r3, #64	@ 0x40
 800d9b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	6031      	str	r1, [r6, #0]
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	b016      	add	sp, #88	@ 0x58
 800d9c2:	bd70      	pop	{r4, r5, r6, pc}
 800d9c4:	466a      	mov	r2, sp
 800d9c6:	f000 f849 	bl	800da5c <_fstat_r>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	dbed      	blt.n	800d9aa <__swhatbuf_r+0x12>
 800d9ce:	9901      	ldr	r1, [sp, #4]
 800d9d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9d8:	4259      	negs	r1, r3
 800d9da:	4159      	adcs	r1, r3
 800d9dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9e0:	e7eb      	b.n	800d9ba <__swhatbuf_r+0x22>

0800d9e2 <__smakebuf_r>:
 800d9e2:	898b      	ldrh	r3, [r1, #12]
 800d9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9e6:	079d      	lsls	r5, r3, #30
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	d507      	bpl.n	800d9fe <__smakebuf_r+0x1c>
 800d9ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d9f2:	6023      	str	r3, [r4, #0]
 800d9f4:	6123      	str	r3, [r4, #16]
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	6163      	str	r3, [r4, #20]
 800d9fa:	b003      	add	sp, #12
 800d9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9fe:	466a      	mov	r2, sp
 800da00:	ab01      	add	r3, sp, #4
 800da02:	f7ff ffc9 	bl	800d998 <__swhatbuf_r>
 800da06:	9f00      	ldr	r7, [sp, #0]
 800da08:	4605      	mov	r5, r0
 800da0a:	4639      	mov	r1, r7
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7ff faaf 	bl	800cf70 <_malloc_r>
 800da12:	b948      	cbnz	r0, 800da28 <__smakebuf_r+0x46>
 800da14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da18:	059a      	lsls	r2, r3, #22
 800da1a:	d4ee      	bmi.n	800d9fa <__smakebuf_r+0x18>
 800da1c:	f023 0303 	bic.w	r3, r3, #3
 800da20:	f043 0302 	orr.w	r3, r3, #2
 800da24:	81a3      	strh	r3, [r4, #12]
 800da26:	e7e2      	b.n	800d9ee <__smakebuf_r+0xc>
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da32:	81a3      	strh	r3, [r4, #12]
 800da34:	9b01      	ldr	r3, [sp, #4]
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	b15b      	cbz	r3, 800da52 <__smakebuf_r+0x70>
 800da3a:	4630      	mov	r0, r6
 800da3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da40:	f000 f81e 	bl	800da80 <_isatty_r>
 800da44:	b128      	cbz	r0, 800da52 <__smakebuf_r+0x70>
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	f043 0301 	orr.w	r3, r3, #1
 800da50:	81a3      	strh	r3, [r4, #12]
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	431d      	orrs	r5, r3
 800da56:	81a5      	strh	r5, [r4, #12]
 800da58:	e7cf      	b.n	800d9fa <__smakebuf_r+0x18>
	...

0800da5c <_fstat_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	2300      	movs	r3, #0
 800da60:	4d06      	ldr	r5, [pc, #24]	@ (800da7c <_fstat_r+0x20>)
 800da62:	4604      	mov	r4, r0
 800da64:	4608      	mov	r0, r1
 800da66:	4611      	mov	r1, r2
 800da68:	602b      	str	r3, [r5, #0]
 800da6a:	f7fa fc17 	bl	800829c <_fstat>
 800da6e:	1c43      	adds	r3, r0, #1
 800da70:	d102      	bne.n	800da78 <_fstat_r+0x1c>
 800da72:	682b      	ldr	r3, [r5, #0]
 800da74:	b103      	cbz	r3, 800da78 <_fstat_r+0x1c>
 800da76:	6023      	str	r3, [r4, #0]
 800da78:	bd38      	pop	{r3, r4, r5, pc}
 800da7a:	bf00      	nop
 800da7c:	2000059c 	.word	0x2000059c

0800da80 <_isatty_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	2300      	movs	r3, #0
 800da84:	4d05      	ldr	r5, [pc, #20]	@ (800da9c <_isatty_r+0x1c>)
 800da86:	4604      	mov	r4, r0
 800da88:	4608      	mov	r0, r1
 800da8a:	602b      	str	r3, [r5, #0]
 800da8c:	f7fa fc15 	bl	80082ba <_isatty>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d102      	bne.n	800da9a <_isatty_r+0x1a>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b103      	cbz	r3, 800da9a <_isatty_r+0x1a>
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	2000059c 	.word	0x2000059c

0800daa0 <atan2>:
 800daa0:	f000 ba92 	b.w	800dfc8 <__ieee754_atan2>

0800daa4 <sqrt>:
 800daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa6:	4606      	mov	r6, r0
 800daa8:	460f      	mov	r7, r1
 800daaa:	f000 f9b5 	bl	800de18 <__ieee754_sqrt>
 800daae:	4632      	mov	r2, r6
 800dab0:	4604      	mov	r4, r0
 800dab2:	460d      	mov	r5, r1
 800dab4:	463b      	mov	r3, r7
 800dab6:	4630      	mov	r0, r6
 800dab8:	4639      	mov	r1, r7
 800daba:	f7f2 ff9f 	bl	80009fc <__aeabi_dcmpun>
 800dabe:	b990      	cbnz	r0, 800dae6 <sqrt+0x42>
 800dac0:	2200      	movs	r2, #0
 800dac2:	2300      	movs	r3, #0
 800dac4:	4630      	mov	r0, r6
 800dac6:	4639      	mov	r1, r7
 800dac8:	f7f2 ff70 	bl	80009ac <__aeabi_dcmplt>
 800dacc:	b158      	cbz	r0, 800dae6 <sqrt+0x42>
 800dace:	f7ff f991 	bl	800cdf4 <__errno>
 800dad2:	2321      	movs	r3, #33	@ 0x21
 800dad4:	2200      	movs	r2, #0
 800dad6:	6003      	str	r3, [r0, #0]
 800dad8:	2300      	movs	r3, #0
 800dada:	4610      	mov	r0, r2
 800dadc:	4619      	mov	r1, r3
 800dade:	f7f2 fe1d 	bl	800071c <__aeabi_ddiv>
 800dae2:	4604      	mov	r4, r0
 800dae4:	460d      	mov	r5, r1
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daec:	0000      	movs	r0, r0
	...

0800daf0 <atan>:
 800daf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	4bbc      	ldr	r3, [pc, #752]	@ (800dde8 <atan+0x2f8>)
 800daf6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800dafa:	429e      	cmp	r6, r3
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	468b      	mov	fp, r1
 800db02:	d918      	bls.n	800db36 <atan+0x46>
 800db04:	4bb9      	ldr	r3, [pc, #740]	@ (800ddec <atan+0x2fc>)
 800db06:	429e      	cmp	r6, r3
 800db08:	d801      	bhi.n	800db0e <atan+0x1e>
 800db0a:	d109      	bne.n	800db20 <atan+0x30>
 800db0c:	b140      	cbz	r0, 800db20 <atan+0x30>
 800db0e:	4622      	mov	r2, r4
 800db10:	462b      	mov	r3, r5
 800db12:	4620      	mov	r0, r4
 800db14:	4629      	mov	r1, r5
 800db16:	f7f2 fb21 	bl	800015c <__adddf3>
 800db1a:	4604      	mov	r4, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	e006      	b.n	800db2e <atan+0x3e>
 800db20:	f1bb 0f00 	cmp.w	fp, #0
 800db24:	f340 8123 	ble.w	800dd6e <atan+0x27e>
 800db28:	a593      	add	r5, pc, #588	@ (adr r5, 800dd78 <atan+0x288>)
 800db2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db2e:	4620      	mov	r0, r4
 800db30:	4629      	mov	r1, r5
 800db32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db36:	4bae      	ldr	r3, [pc, #696]	@ (800ddf0 <atan+0x300>)
 800db38:	429e      	cmp	r6, r3
 800db3a:	d811      	bhi.n	800db60 <atan+0x70>
 800db3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800db40:	429e      	cmp	r6, r3
 800db42:	d80a      	bhi.n	800db5a <atan+0x6a>
 800db44:	a38e      	add	r3, pc, #568	@ (adr r3, 800dd80 <atan+0x290>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	f7f2 fb07 	bl	800015c <__adddf3>
 800db4e:	2200      	movs	r2, #0
 800db50:	4ba8      	ldr	r3, [pc, #672]	@ (800ddf4 <atan+0x304>)
 800db52:	f7f2 ff49 	bl	80009e8 <__aeabi_dcmpgt>
 800db56:	2800      	cmp	r0, #0
 800db58:	d1e9      	bne.n	800db2e <atan+0x3e>
 800db5a:	f04f 3aff 	mov.w	sl, #4294967295
 800db5e:	e027      	b.n	800dbb0 <atan+0xc0>
 800db60:	f000 f956 	bl	800de10 <fabs>
 800db64:	4ba4      	ldr	r3, [pc, #656]	@ (800ddf8 <atan+0x308>)
 800db66:	4604      	mov	r4, r0
 800db68:	429e      	cmp	r6, r3
 800db6a:	460d      	mov	r5, r1
 800db6c:	f200 80b8 	bhi.w	800dce0 <atan+0x1f0>
 800db70:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800db74:	429e      	cmp	r6, r3
 800db76:	f200 809c 	bhi.w	800dcb2 <atan+0x1c2>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	f7f2 faed 	bl	800015c <__adddf3>
 800db82:	2200      	movs	r2, #0
 800db84:	4b9b      	ldr	r3, [pc, #620]	@ (800ddf4 <atan+0x304>)
 800db86:	f7f2 fae7 	bl	8000158 <__aeabi_dsub>
 800db8a:	2200      	movs	r2, #0
 800db8c:	4606      	mov	r6, r0
 800db8e:	460f      	mov	r7, r1
 800db90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db94:	4620      	mov	r0, r4
 800db96:	4629      	mov	r1, r5
 800db98:	f7f2 fae0 	bl	800015c <__adddf3>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4630      	mov	r0, r6
 800dba2:	4639      	mov	r1, r7
 800dba4:	f7f2 fdba 	bl	800071c <__aeabi_ddiv>
 800dba8:	f04f 0a00 	mov.w	sl, #0
 800dbac:	4604      	mov	r4, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	4622      	mov	r2, r4
 800dbb2:	462b      	mov	r3, r5
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f2 fc86 	bl	80004c8 <__aeabi_dmul>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4680      	mov	r8, r0
 800dbc2:	4689      	mov	r9, r1
 800dbc4:	f7f2 fc80 	bl	80004c8 <__aeabi_dmul>
 800dbc8:	a36f      	add	r3, pc, #444	@ (adr r3, 800dd88 <atan+0x298>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	f7f2 fc79 	bl	80004c8 <__aeabi_dmul>
 800dbd6:	a36e      	add	r3, pc, #440	@ (adr r3, 800dd90 <atan+0x2a0>)
 800dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbdc:	f7f2 fabe 	bl	800015c <__adddf3>
 800dbe0:	4632      	mov	r2, r6
 800dbe2:	463b      	mov	r3, r7
 800dbe4:	f7f2 fc70 	bl	80004c8 <__aeabi_dmul>
 800dbe8:	a36b      	add	r3, pc, #428	@ (adr r3, 800dd98 <atan+0x2a8>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fab5 	bl	800015c <__adddf3>
 800dbf2:	4632      	mov	r2, r6
 800dbf4:	463b      	mov	r3, r7
 800dbf6:	f7f2 fc67 	bl	80004c8 <__aeabi_dmul>
 800dbfa:	a369      	add	r3, pc, #420	@ (adr r3, 800dda0 <atan+0x2b0>)
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	f7f2 faac 	bl	800015c <__adddf3>
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	f7f2 fc5e 	bl	80004c8 <__aeabi_dmul>
 800dc0c:	a366      	add	r3, pc, #408	@ (adr r3, 800dda8 <atan+0x2b8>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	f7f2 faa3 	bl	800015c <__adddf3>
 800dc16:	4632      	mov	r2, r6
 800dc18:	463b      	mov	r3, r7
 800dc1a:	f7f2 fc55 	bl	80004c8 <__aeabi_dmul>
 800dc1e:	a364      	add	r3, pc, #400	@ (adr r3, 800ddb0 <atan+0x2c0>)
 800dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc24:	f7f2 fa9a 	bl	800015c <__adddf3>
 800dc28:	4642      	mov	r2, r8
 800dc2a:	464b      	mov	r3, r9
 800dc2c:	f7f2 fc4c 	bl	80004c8 <__aeabi_dmul>
 800dc30:	a361      	add	r3, pc, #388	@ (adr r3, 800ddb8 <atan+0x2c8>)
 800dc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc36:	4680      	mov	r8, r0
 800dc38:	4689      	mov	r9, r1
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	f7f2 fc43 	bl	80004c8 <__aeabi_dmul>
 800dc42:	a35f      	add	r3, pc, #380	@ (adr r3, 800ddc0 <atan+0x2d0>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	f7f2 fa86 	bl	8000158 <__aeabi_dsub>
 800dc4c:	4632      	mov	r2, r6
 800dc4e:	463b      	mov	r3, r7
 800dc50:	f7f2 fc3a 	bl	80004c8 <__aeabi_dmul>
 800dc54:	a35c      	add	r3, pc, #368	@ (adr r3, 800ddc8 <atan+0x2d8>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 fa7d 	bl	8000158 <__aeabi_dsub>
 800dc5e:	4632      	mov	r2, r6
 800dc60:	463b      	mov	r3, r7
 800dc62:	f7f2 fc31 	bl	80004c8 <__aeabi_dmul>
 800dc66:	a35a      	add	r3, pc, #360	@ (adr r3, 800ddd0 <atan+0x2e0>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f7f2 fa74 	bl	8000158 <__aeabi_dsub>
 800dc70:	4632      	mov	r2, r6
 800dc72:	463b      	mov	r3, r7
 800dc74:	f7f2 fc28 	bl	80004c8 <__aeabi_dmul>
 800dc78:	a357      	add	r3, pc, #348	@ (adr r3, 800ddd8 <atan+0x2e8>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fa6b 	bl	8000158 <__aeabi_dsub>
 800dc82:	4632      	mov	r2, r6
 800dc84:	463b      	mov	r3, r7
 800dc86:	f7f2 fc1f 	bl	80004c8 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4640      	mov	r0, r8
 800dc90:	4649      	mov	r1, r9
 800dc92:	f7f2 fa63 	bl	800015c <__adddf3>
 800dc96:	4622      	mov	r2, r4
 800dc98:	462b      	mov	r3, r5
 800dc9a:	f7f2 fc15 	bl	80004c8 <__aeabi_dmul>
 800dc9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	d144      	bne.n	800dd32 <atan+0x242>
 800dca8:	4620      	mov	r0, r4
 800dcaa:	4629      	mov	r1, r5
 800dcac:	f7f2 fa54 	bl	8000158 <__aeabi_dsub>
 800dcb0:	e733      	b.n	800db1a <atan+0x2a>
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	4b4f      	ldr	r3, [pc, #316]	@ (800ddf4 <atan+0x304>)
 800dcb6:	f7f2 fa4f 	bl	8000158 <__aeabi_dsub>
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	460f      	mov	r7, r1
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	4b4b      	ldr	r3, [pc, #300]	@ (800ddf4 <atan+0x304>)
 800dcc6:	f7f2 fa49 	bl	800015c <__adddf3>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4630      	mov	r0, r6
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	f7f2 fd23 	bl	800071c <__aeabi_ddiv>
 800dcd6:	f04f 0a01 	mov.w	sl, #1
 800dcda:	4604      	mov	r4, r0
 800dcdc:	460d      	mov	r5, r1
 800dcde:	e767      	b.n	800dbb0 <atan+0xc0>
 800dce0:	4b46      	ldr	r3, [pc, #280]	@ (800ddfc <atan+0x30c>)
 800dce2:	429e      	cmp	r6, r3
 800dce4:	d21a      	bcs.n	800dd1c <atan+0x22c>
 800dce6:	2200      	movs	r2, #0
 800dce8:	4b45      	ldr	r3, [pc, #276]	@ (800de00 <atan+0x310>)
 800dcea:	f7f2 fa35 	bl	8000158 <__aeabi_dsub>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4606      	mov	r6, r0
 800dcf2:	460f      	mov	r7, r1
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	4b41      	ldr	r3, [pc, #260]	@ (800de00 <atan+0x310>)
 800dcfa:	f7f2 fbe5 	bl	80004c8 <__aeabi_dmul>
 800dcfe:	2200      	movs	r2, #0
 800dd00:	4b3c      	ldr	r3, [pc, #240]	@ (800ddf4 <atan+0x304>)
 800dd02:	f7f2 fa2b 	bl	800015c <__adddf3>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 fd05 	bl	800071c <__aeabi_ddiv>
 800dd12:	f04f 0a02 	mov.w	sl, #2
 800dd16:	4604      	mov	r4, r0
 800dd18:	460d      	mov	r5, r1
 800dd1a:	e749      	b.n	800dbb0 <atan+0xc0>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	2000      	movs	r0, #0
 800dd22:	4938      	ldr	r1, [pc, #224]	@ (800de04 <atan+0x314>)
 800dd24:	f7f2 fcfa 	bl	800071c <__aeabi_ddiv>
 800dd28:	f04f 0a03 	mov.w	sl, #3
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	460d      	mov	r5, r1
 800dd30:	e73e      	b.n	800dbb0 <atan+0xc0>
 800dd32:	4b35      	ldr	r3, [pc, #212]	@ (800de08 <atan+0x318>)
 800dd34:	4e35      	ldr	r6, [pc, #212]	@ (800de0c <atan+0x31c>)
 800dd36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7f2 fa0b 	bl	8000158 <__aeabi_dsub>
 800dd42:	4622      	mov	r2, r4
 800dd44:	462b      	mov	r3, r5
 800dd46:	f7f2 fa07 	bl	8000158 <__aeabi_dsub>
 800dd4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd56:	f7f2 f9ff 	bl	8000158 <__aeabi_dsub>
 800dd5a:	f1bb 0f00 	cmp.w	fp, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	f6bf aee4 	bge.w	800db2e <atan+0x3e>
 800dd66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd6a:	461d      	mov	r5, r3
 800dd6c:	e6df      	b.n	800db2e <atan+0x3e>
 800dd6e:	a51c      	add	r5, pc, #112	@ (adr r5, 800dde0 <atan+0x2f0>)
 800dd70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd74:	e6db      	b.n	800db2e <atan+0x3e>
 800dd76:	bf00      	nop
 800dd78:	54442d18 	.word	0x54442d18
 800dd7c:	3ff921fb 	.word	0x3ff921fb
 800dd80:	8800759c 	.word	0x8800759c
 800dd84:	7e37e43c 	.word	0x7e37e43c
 800dd88:	e322da11 	.word	0xe322da11
 800dd8c:	3f90ad3a 	.word	0x3f90ad3a
 800dd90:	24760deb 	.word	0x24760deb
 800dd94:	3fa97b4b 	.word	0x3fa97b4b
 800dd98:	a0d03d51 	.word	0xa0d03d51
 800dd9c:	3fb10d66 	.word	0x3fb10d66
 800dda0:	c54c206e 	.word	0xc54c206e
 800dda4:	3fb745cd 	.word	0x3fb745cd
 800dda8:	920083ff 	.word	0x920083ff
 800ddac:	3fc24924 	.word	0x3fc24924
 800ddb0:	5555550d 	.word	0x5555550d
 800ddb4:	3fd55555 	.word	0x3fd55555
 800ddb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ddbc:	bfa2b444 	.word	0xbfa2b444
 800ddc0:	52defd9a 	.word	0x52defd9a
 800ddc4:	3fadde2d 	.word	0x3fadde2d
 800ddc8:	af749a6d 	.word	0xaf749a6d
 800ddcc:	3fb3b0f2 	.word	0x3fb3b0f2
 800ddd0:	fe231671 	.word	0xfe231671
 800ddd4:	3fbc71c6 	.word	0x3fbc71c6
 800ddd8:	9998ebc4 	.word	0x9998ebc4
 800dddc:	3fc99999 	.word	0x3fc99999
 800dde0:	54442d18 	.word	0x54442d18
 800dde4:	bff921fb 	.word	0xbff921fb
 800dde8:	440fffff 	.word	0x440fffff
 800ddec:	7ff00000 	.word	0x7ff00000
 800ddf0:	3fdbffff 	.word	0x3fdbffff
 800ddf4:	3ff00000 	.word	0x3ff00000
 800ddf8:	3ff2ffff 	.word	0x3ff2ffff
 800ddfc:	40038000 	.word	0x40038000
 800de00:	3ff80000 	.word	0x3ff80000
 800de04:	bff00000 	.word	0xbff00000
 800de08:	0800e478 	.word	0x0800e478
 800de0c:	0800e498 	.word	0x0800e498

0800de10 <fabs>:
 800de10:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de14:	4619      	mov	r1, r3
 800de16:	4770      	bx	lr

0800de18 <__ieee754_sqrt>:
 800de18:	4a67      	ldr	r2, [pc, #412]	@ (800dfb8 <__ieee754_sqrt+0x1a0>)
 800de1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1e:	438a      	bics	r2, r1
 800de20:	4606      	mov	r6, r0
 800de22:	460f      	mov	r7, r1
 800de24:	460b      	mov	r3, r1
 800de26:	4604      	mov	r4, r0
 800de28:	d10e      	bne.n	800de48 <__ieee754_sqrt+0x30>
 800de2a:	4602      	mov	r2, r0
 800de2c:	f7f2 fb4c 	bl	80004c8 <__aeabi_dmul>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4630      	mov	r0, r6
 800de36:	4639      	mov	r1, r7
 800de38:	f7f2 f990 	bl	800015c <__adddf3>
 800de3c:	4606      	mov	r6, r0
 800de3e:	460f      	mov	r7, r1
 800de40:	4630      	mov	r0, r6
 800de42:	4639      	mov	r1, r7
 800de44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de48:	2900      	cmp	r1, #0
 800de4a:	dc0c      	bgt.n	800de66 <__ieee754_sqrt+0x4e>
 800de4c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800de50:	4302      	orrs	r2, r0
 800de52:	d0f5      	beq.n	800de40 <__ieee754_sqrt+0x28>
 800de54:	b189      	cbz	r1, 800de7a <__ieee754_sqrt+0x62>
 800de56:	4602      	mov	r2, r0
 800de58:	f7f2 f97e 	bl	8000158 <__aeabi_dsub>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	f7f2 fc5c 	bl	800071c <__aeabi_ddiv>
 800de64:	e7ea      	b.n	800de3c <__ieee754_sqrt+0x24>
 800de66:	150a      	asrs	r2, r1, #20
 800de68:	d115      	bne.n	800de96 <__ieee754_sqrt+0x7e>
 800de6a:	2100      	movs	r1, #0
 800de6c:	e009      	b.n	800de82 <__ieee754_sqrt+0x6a>
 800de6e:	0ae3      	lsrs	r3, r4, #11
 800de70:	3a15      	subs	r2, #21
 800de72:	0564      	lsls	r4, r4, #21
 800de74:	2b00      	cmp	r3, #0
 800de76:	d0fa      	beq.n	800de6e <__ieee754_sqrt+0x56>
 800de78:	e7f7      	b.n	800de6a <__ieee754_sqrt+0x52>
 800de7a:	460a      	mov	r2, r1
 800de7c:	e7fa      	b.n	800de74 <__ieee754_sqrt+0x5c>
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	3101      	adds	r1, #1
 800de82:	02d8      	lsls	r0, r3, #11
 800de84:	d5fb      	bpl.n	800de7e <__ieee754_sqrt+0x66>
 800de86:	1e48      	subs	r0, r1, #1
 800de88:	1a12      	subs	r2, r2, r0
 800de8a:	f1c1 0020 	rsb	r0, r1, #32
 800de8e:	fa24 f000 	lsr.w	r0, r4, r0
 800de92:	4303      	orrs	r3, r0
 800de94:	408c      	lsls	r4, r1
 800de96:	2600      	movs	r6, #0
 800de98:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800de9c:	2116      	movs	r1, #22
 800de9e:	07d2      	lsls	r2, r2, #31
 800dea0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dea4:	4632      	mov	r2, r6
 800dea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800deae:	bf5c      	itt	pl
 800deb0:	005b      	lslpl	r3, r3, #1
 800deb2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800deb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800deba:	bf58      	it	pl
 800debc:	0064      	lslpl	r4, r4, #1
 800debe:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dec2:	107f      	asrs	r7, r7, #1
 800dec4:	0064      	lsls	r4, r4, #1
 800dec6:	1815      	adds	r5, r2, r0
 800dec8:	429d      	cmp	r5, r3
 800deca:	bfde      	ittt	le
 800decc:	182a      	addle	r2, r5, r0
 800dece:	1b5b      	suble	r3, r3, r5
 800ded0:	1836      	addle	r6, r6, r0
 800ded2:	0fe5      	lsrs	r5, r4, #31
 800ded4:	3901      	subs	r1, #1
 800ded6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800deda:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dede:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800dee2:	d1f0      	bne.n	800dec6 <__ieee754_sqrt+0xae>
 800dee4:	460d      	mov	r5, r1
 800dee6:	f04f 0a20 	mov.w	sl, #32
 800deea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800deee:	429a      	cmp	r2, r3
 800def0:	eb01 0c00 	add.w	ip, r1, r0
 800def4:	db02      	blt.n	800defc <__ieee754_sqrt+0xe4>
 800def6:	d113      	bne.n	800df20 <__ieee754_sqrt+0x108>
 800def8:	45a4      	cmp	ip, r4
 800defa:	d811      	bhi.n	800df20 <__ieee754_sqrt+0x108>
 800defc:	f1bc 0f00 	cmp.w	ip, #0
 800df00:	eb0c 0100 	add.w	r1, ip, r0
 800df04:	da42      	bge.n	800df8c <__ieee754_sqrt+0x174>
 800df06:	2900      	cmp	r1, #0
 800df08:	db40      	blt.n	800df8c <__ieee754_sqrt+0x174>
 800df0a:	f102 0e01 	add.w	lr, r2, #1
 800df0e:	1a9b      	subs	r3, r3, r2
 800df10:	4672      	mov	r2, lr
 800df12:	45a4      	cmp	ip, r4
 800df14:	bf88      	it	hi
 800df16:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800df1a:	eba4 040c 	sub.w	r4, r4, ip
 800df1e:	4405      	add	r5, r0
 800df20:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800df24:	f1ba 0a01 	subs.w	sl, sl, #1
 800df28:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800df2c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800df30:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800df34:	d1db      	bne.n	800deee <__ieee754_sqrt+0xd6>
 800df36:	431c      	orrs	r4, r3
 800df38:	d01a      	beq.n	800df70 <__ieee754_sqrt+0x158>
 800df3a:	4c20      	ldr	r4, [pc, #128]	@ (800dfbc <__ieee754_sqrt+0x1a4>)
 800df3c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800dfc0 <__ieee754_sqrt+0x1a8>
 800df40:	e9d4 0100 	ldrd	r0, r1, [r4]
 800df44:	e9db 2300 	ldrd	r2, r3, [fp]
 800df48:	f7f2 f906 	bl	8000158 <__aeabi_dsub>
 800df4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4640      	mov	r0, r8
 800df56:	4649      	mov	r1, r9
 800df58:	f7f2 fd32 	bl	80009c0 <__aeabi_dcmple>
 800df5c:	b140      	cbz	r0, 800df70 <__ieee754_sqrt+0x158>
 800df5e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800df62:	e9db 2300 	ldrd	r2, r3, [fp]
 800df66:	f1b5 3fff 	cmp.w	r5, #4294967295
 800df6a:	d111      	bne.n	800df90 <__ieee754_sqrt+0x178>
 800df6c:	4655      	mov	r5, sl
 800df6e:	3601      	adds	r6, #1
 800df70:	1072      	asrs	r2, r6, #1
 800df72:	086b      	lsrs	r3, r5, #1
 800df74:	07f1      	lsls	r1, r6, #31
 800df76:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800df7a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800df7e:	bf48      	it	mi
 800df80:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800df84:	4618      	mov	r0, r3
 800df86:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800df8a:	e757      	b.n	800de3c <__ieee754_sqrt+0x24>
 800df8c:	4696      	mov	lr, r2
 800df8e:	e7be      	b.n	800df0e <__ieee754_sqrt+0xf6>
 800df90:	f7f2 f8e4 	bl	800015c <__adddf3>
 800df94:	e9d4 8900 	ldrd	r8, r9, [r4]
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4640      	mov	r0, r8
 800df9e:	4649      	mov	r1, r9
 800dfa0:	f7f2 fd04 	bl	80009ac <__aeabi_dcmplt>
 800dfa4:	b120      	cbz	r0, 800dfb0 <__ieee754_sqrt+0x198>
 800dfa6:	1ca8      	adds	r0, r5, #2
 800dfa8:	bf08      	it	eq
 800dfaa:	3601      	addeq	r6, #1
 800dfac:	3502      	adds	r5, #2
 800dfae:	e7df      	b.n	800df70 <__ieee754_sqrt+0x158>
 800dfb0:	1c6b      	adds	r3, r5, #1
 800dfb2:	f023 0501 	bic.w	r5, r3, #1
 800dfb6:	e7db      	b.n	800df70 <__ieee754_sqrt+0x158>
 800dfb8:	7ff00000 	.word	0x7ff00000
 800dfbc:	20000108 	.word	0x20000108
 800dfc0:	20000100 	.word	0x20000100
 800dfc4:	00000000 	.word	0x00000000

0800dfc8 <__ieee754_atan2>:
 800dfc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	4617      	mov	r7, r2
 800dfce:	4690      	mov	r8, r2
 800dfd0:	4699      	mov	r9, r3
 800dfd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dfd6:	427b      	negs	r3, r7
 800dfd8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800e160 <__ieee754_atan2+0x198>
 800dfdc:	433b      	orrs	r3, r7
 800dfde:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dfe2:	4553      	cmp	r3, sl
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	d809      	bhi.n	800dffe <__ieee754_atan2+0x36>
 800dfea:	4246      	negs	r6, r0
 800dfec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dff0:	4306      	orrs	r6, r0
 800dff2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800dff6:	4556      	cmp	r6, sl
 800dff8:	468e      	mov	lr, r1
 800dffa:	4683      	mov	fp, r0
 800dffc:	d908      	bls.n	800e010 <__ieee754_atan2+0x48>
 800dffe:	4642      	mov	r2, r8
 800e000:	464b      	mov	r3, r9
 800e002:	4620      	mov	r0, r4
 800e004:	4629      	mov	r1, r5
 800e006:	f7f2 f8a9 	bl	800015c <__adddf3>
 800e00a:	4604      	mov	r4, r0
 800e00c:	460d      	mov	r5, r1
 800e00e:	e016      	b.n	800e03e <__ieee754_atan2+0x76>
 800e010:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800e014:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800e018:	433e      	orrs	r6, r7
 800e01a:	d103      	bne.n	800e024 <__ieee754_atan2+0x5c>
 800e01c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e020:	f7ff bd66 	b.w	800daf0 <atan>
 800e024:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800e028:	f006 0602 	and.w	r6, r6, #2
 800e02c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800e030:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800e034:	d107      	bne.n	800e046 <__ieee754_atan2+0x7e>
 800e036:	2e02      	cmp	r6, #2
 800e038:	d064      	beq.n	800e104 <__ieee754_atan2+0x13c>
 800e03a:	2e03      	cmp	r6, #3
 800e03c:	d066      	beq.n	800e10c <__ieee754_atan2+0x144>
 800e03e:	4620      	mov	r0, r4
 800e040:	4629      	mov	r1, r5
 800e042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	4317      	orrs	r7, r2
 800e048:	d106      	bne.n	800e058 <__ieee754_atan2+0x90>
 800e04a:	f1be 0f00 	cmp.w	lr, #0
 800e04e:	da68      	bge.n	800e122 <__ieee754_atan2+0x15a>
 800e050:	a537      	add	r5, pc, #220	@ (adr r5, 800e130 <__ieee754_atan2+0x168>)
 800e052:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e056:	e7f2      	b.n	800e03e <__ieee754_atan2+0x76>
 800e058:	4552      	cmp	r2, sl
 800e05a:	d10f      	bne.n	800e07c <__ieee754_atan2+0xb4>
 800e05c:	4293      	cmp	r3, r2
 800e05e:	f106 36ff 	add.w	r6, r6, #4294967295
 800e062:	d107      	bne.n	800e074 <__ieee754_atan2+0xac>
 800e064:	2e02      	cmp	r6, #2
 800e066:	d855      	bhi.n	800e114 <__ieee754_atan2+0x14c>
 800e068:	4b3e      	ldr	r3, [pc, #248]	@ (800e164 <__ieee754_atan2+0x19c>)
 800e06a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e06e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e072:	e7e4      	b.n	800e03e <__ieee754_atan2+0x76>
 800e074:	2e02      	cmp	r6, #2
 800e076:	d851      	bhi.n	800e11c <__ieee754_atan2+0x154>
 800e078:	4b3b      	ldr	r3, [pc, #236]	@ (800e168 <__ieee754_atan2+0x1a0>)
 800e07a:	e7f6      	b.n	800e06a <__ieee754_atan2+0xa2>
 800e07c:	4553      	cmp	r3, sl
 800e07e:	d0e4      	beq.n	800e04a <__ieee754_atan2+0x82>
 800e080:	1a9b      	subs	r3, r3, r2
 800e082:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e086:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e08a:	da21      	bge.n	800e0d0 <__ieee754_atan2+0x108>
 800e08c:	f1b9 0f00 	cmp.w	r9, #0
 800e090:	da01      	bge.n	800e096 <__ieee754_atan2+0xce>
 800e092:	323c      	adds	r2, #60	@ 0x3c
 800e094:	db20      	blt.n	800e0d8 <__ieee754_atan2+0x110>
 800e096:	4642      	mov	r2, r8
 800e098:	464b      	mov	r3, r9
 800e09a:	4620      	mov	r0, r4
 800e09c:	4629      	mov	r1, r5
 800e09e:	f7f2 fb3d 	bl	800071c <__aeabi_ddiv>
 800e0a2:	f7ff feb5 	bl	800de10 <fabs>
 800e0a6:	f7ff fd23 	bl	800daf0 <atan>
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	460d      	mov	r5, r1
 800e0ae:	2e01      	cmp	r6, #1
 800e0b0:	d015      	beq.n	800e0de <__ieee754_atan2+0x116>
 800e0b2:	2e02      	cmp	r6, #2
 800e0b4:	d017      	beq.n	800e0e6 <__ieee754_atan2+0x11e>
 800e0b6:	2e00      	cmp	r6, #0
 800e0b8:	d0c1      	beq.n	800e03e <__ieee754_atan2+0x76>
 800e0ba:	a31f      	add	r3, pc, #124	@ (adr r3, 800e138 <__ieee754_atan2+0x170>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	f7f2 f848 	bl	8000158 <__aeabi_dsub>
 800e0c8:	a31d      	add	r3, pc, #116	@ (adr r3, 800e140 <__ieee754_atan2+0x178>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	e016      	b.n	800e0fe <__ieee754_atan2+0x136>
 800e0d0:	a51d      	add	r5, pc, #116	@ (adr r5, 800e148 <__ieee754_atan2+0x180>)
 800e0d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e0d6:	e7ea      	b.n	800e0ae <__ieee754_atan2+0xe6>
 800e0d8:	2400      	movs	r4, #0
 800e0da:	2500      	movs	r5, #0
 800e0dc:	e7e7      	b.n	800e0ae <__ieee754_atan2+0xe6>
 800e0de:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800e0e2:	461d      	mov	r5, r3
 800e0e4:	e7ab      	b.n	800e03e <__ieee754_atan2+0x76>
 800e0e6:	a314      	add	r3, pc, #80	@ (adr r3, 800e138 <__ieee754_atan2+0x170>)
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f7f2 f832 	bl	8000158 <__aeabi_dsub>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	a111      	add	r1, pc, #68	@ (adr r1, 800e140 <__ieee754_atan2+0x178>)
 800e0fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0fe:	f7f2 f82b 	bl	8000158 <__aeabi_dsub>
 800e102:	e782      	b.n	800e00a <__ieee754_atan2+0x42>
 800e104:	a50e      	add	r5, pc, #56	@ (adr r5, 800e140 <__ieee754_atan2+0x178>)
 800e106:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e10a:	e798      	b.n	800e03e <__ieee754_atan2+0x76>
 800e10c:	a510      	add	r5, pc, #64	@ (adr r5, 800e150 <__ieee754_atan2+0x188>)
 800e10e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e112:	e794      	b.n	800e03e <__ieee754_atan2+0x76>
 800e114:	a510      	add	r5, pc, #64	@ (adr r5, 800e158 <__ieee754_atan2+0x190>)
 800e116:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e11a:	e790      	b.n	800e03e <__ieee754_atan2+0x76>
 800e11c:	2400      	movs	r4, #0
 800e11e:	2500      	movs	r5, #0
 800e120:	e78d      	b.n	800e03e <__ieee754_atan2+0x76>
 800e122:	a509      	add	r5, pc, #36	@ (adr r5, 800e148 <__ieee754_atan2+0x180>)
 800e124:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e128:	e789      	b.n	800e03e <__ieee754_atan2+0x76>
 800e12a:	bf00      	nop
 800e12c:	f3af 8000 	nop.w
 800e130:	54442d18 	.word	0x54442d18
 800e134:	bff921fb 	.word	0xbff921fb
 800e138:	33145c07 	.word	0x33145c07
 800e13c:	3ca1a626 	.word	0x3ca1a626
 800e140:	54442d18 	.word	0x54442d18
 800e144:	400921fb 	.word	0x400921fb
 800e148:	54442d18 	.word	0x54442d18
 800e14c:	3ff921fb 	.word	0x3ff921fb
 800e150:	54442d18 	.word	0x54442d18
 800e154:	c00921fb 	.word	0xc00921fb
 800e158:	54442d18 	.word	0x54442d18
 800e15c:	3fe921fb 	.word	0x3fe921fb
 800e160:	7ff00000 	.word	0x7ff00000
 800e164:	0800e4d0 	.word	0x0800e4d0
 800e168:	0800e4b8 	.word	0x0800e4b8

0800e16c <_init>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	bf00      	nop
 800e170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e172:	bc08      	pop	{r3}
 800e174:	469e      	mov	lr, r3
 800e176:	4770      	bx	lr

0800e178 <_fini>:
 800e178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17a:	bf00      	nop
 800e17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17e:	bc08      	pop	{r3}
 800e180:	469e      	mov	lr, r3
 800e182:	4770      	bx	lr
